// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.ImplementationDiagnostics
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class ImplementationDiagnosticsTests : SputnikTestFixture
    {
        public ImplementationDiagnosticsTests()
            : base(@"Implementation_Diagnostics")
        {
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 11.4.3")]
        [TestCase("S11.4.3_D1.1.js", Description = "Result of typeof from RegExp is \"function\"")]
        public void ResultOfTypeofFromRegExpIsFunction(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 11.4.3")]
        [TestCase("S11.4.3_D1.2.js", Description = "Result of typeof from RegExp is \"object\"")]
        public void ResultOfTypeofFromRegExpIsObject(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 12.6.4")]
        [TestCase("S12.6.4_D1.js", Description = "If new properties are added to the object being enumerated during enumeration, the newly added properties to be visited in the active enumeration")]
        public void IfNewPropertiesAreAddedToTheObjectBeingEnumeratedDuringEnumerationTheNewlyAddedPropertiesToBeVisitedInTheActiveEnumeration(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 13.2.2")]
        [TestCase("S13.2.2_D20_T1.js", Description = "function declaration inside of \"with\" statement is a fuction declaration inside of current execution context")]
        [TestCase("S13.2.2_D20_T2.js", Description = "function declaration inside of \"with\" statement is a fuction declaration inside of current execution context")]
        [TestCase("S13.2.2_D20_T3.js", Description = "function declaration inside of \"with\" statement is a fuction declaration inside of current execution context")]
        [TestCase("S13.2.2_D20_T4.js", Description = "function declaration inside of \"with\" statement is a fuction declaration inside of current execution context")]
        [TestCase("S13.2.2_D20_T5.js", Description = "function declaration inside of \"with\" statement is a fuction declaration inside of current execution context")]
        [TestCase("S13.2.2_D20_T6.js", Description = "function declaration inside of \"with\" statement is a fuction declaration inside of current execution context")]
        [TestCase("S13.2.2_D20_T7.js", Description = "function declaration inside of \"with\" statement is a fuction declaration inside of current execution context")]
        [TestCase("S13.2.2_D20_T8.js", Description = "function declaration inside of \"with\" statement is a fuction declaration inside of current execution context")]
        public void FunctionDeclarationInsideOfWithStatementIsAFuctionDeclarationInsideOfCurrentExecutionContext(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 13.2")]
        [TestCase("S13.2_D1.1.js", Description = "Create a new native ECMAScript object, not joined the already exists object that was created by an earlier call to this section\'s algorithm, and if that call to this section\'s algorithm was given a FunctionBody that equated to the FunctionBody given now")]
        public void CreateANewNativeECMAScriptObjectNotJoinedTheAlreadyExistsObjectThatWasCreatedByAnEarlierCallToThisSectionSAlgorithmAndIfThatCallToThisSectionSAlgorithmWasGivenAFunctionBodyThatEquatedToTheFunctionBodyGivenNow(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 13.2")]
        [TestCase("S13.2_D1.2.js", Description = "Create a new native ECMAScript object, joined the already exists object that was created by an earlier call to this section\'s algorithm, and if that call to this section\'s algorithm was given a FunctionBody that equated to the FunctionBody given now")]
        public void CreateANewNativeECMAScriptObjectJoinedTheAlreadyExistsObjectThatWasCreatedByAnEarlierCallToThisSectionSAlgorithmAndIfThatCallToThisSectionSAlgorithmWasGivenAFunctionBodyThatEquatedToTheFunctionBodyGivenNow(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 13")]
        [Category("ECMA 12.10")]
        [TestCase("S13_D1_T1.js", Description = "Function declaration inside of \"with\" statement interprets as function expression")]
        public void FunctionDeclarationInsideOfWithStatementInterpretsAsFunctionExpression(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 14")]
        [TestCase("S14_D1_T1.js", Description = "Function declaration may be in unreacheable fragment of program")]
        public void FunctionDeclarationMayBeInUnreacheableFragmentOfProgram(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 14")]
        [TestCase("S14_D4_T1.js", Description = "Function declaration may be inside of try-catch block ")]
        [TestCase("S14_D4_T2.js", Description = "Function declaration may be inside of try-catch block ")]
        [TestCase("S14_D4_T3.js", Description = "Function declaration may be inside of try-catch block ")]
        public void FunctionDeclarationMayBeInsideOfTryCatchBlock(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 14")]
        [TestCase("S14_D6_T1.js", Description = "Function declaration may be inside of while block ")]
        [TestCase("S14_D6_T2.js", Description = "Function declaration may be inside of while block ")]
        public void FunctionDeclarationMayBeInsideOfWhileBlock(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 14")]
        [TestCase("S14_D7.js", Description = "Function declaration may be inside of \"with\" block ")]
        public void FunctionDeclarationMayBeInsideOfWithBlock(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 15.1.2.2")]
        [Category("ECMA 9.8")]
        [TestCase("S15.1.2.2_D1.1.js", Description = "If the length of S is at least 1 and the first character of S is 0, then R = 8")]
        public void IfTheLengthOfSIsAtLeast1AndTheFirstCharacterOfSIs0ThenR8(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 15.1.2.2")]
        [Category("ECMA 9.8")]
        [TestCase("S15.1.2.2_D1.2.js", Description = "If the length of S is at least 1 and the first character of S is 0, then R = 10")]
        public void IfTheLengthOfSIsAtLeast1AndTheFirstCharacterOfSIs0ThenR10(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 15.10.6.3")]
        [TestCase("S15.10.6.3_D1_T1.js", Description = "RegeExp.prototype.test calling does not change lastIndex property")]
        public void RegeExpPrototypeTestCallingDoesNotChangeLastIndexProperty(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 15.4.4.12")]
        [TestCase("S15.4.4.12_D1.5_T1.js", Description = "If a function is given fewer arguments than the function is specified to require, the function shall behave exactly as if it had been given sufficient additional arguments, each such argument being the undefined value")]
        [TestCase("S15.4.4.12_D1.5_T2.js", Description = "If a function is given fewer arguments than the function is specified to require, the function shall behave exactly as if it had been given sufficient additional arguments, each such argument being the undefined value")]
        public void IfAFunctionIsGivenFewerArgumentsThanTheFunctionIsSpecifiedToRequireTheFunctionShallBehaveExactlyAsIfItHadBeenGivenSufficientAdditionalArgumentsEachSuchArgumentBeingTheUndefinedValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 15.5.2")]
        [TestCase("S15.5.2_D1_T1.js", Description = "String constructor can accept many arguments. But only the first will be accounted ")]
        [TestCase("S15.5.2_D1_T2.js", Description = "String constructor can accept many arguments. But only the first will be accounted ")]
        public void StringConstructorCanAcceptManyArgumentsButOnlyTheFirstWillBeAccounted(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 15.5.2")]
        [TestCase("S15.5.2_D2.js", Description = "String constructor can\'t accept many arguments. When more than one is provided exception throws ")]
        public void StringConstructorCanTAcceptManyArgumentsWhenMoreThanOneIsProvidedExceptionThrows(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 15.5.4.11")]
        [TestCase("S15.5.4.11_D1.1_T1.js", Description = "String.prototype.replace (searchValue, replaceValue) accepts only two arguments", ExpectedException = typeof(Exception))]
        [TestCase("S15.5.4.11_D1.1_T2.js", Description = "String.prototype.replace (searchValue, replaceValue) accepts only two arguments", ExpectedException = typeof(Exception))]
        [TestCase("S15.5.4.11_D1.1_T3.js", Description = "String.prototype.replace (searchValue, replaceValue) accepts only two arguments", ExpectedException = typeof(Exception))]
        [TestCase("S15.5.4.11_D1.1_T4.js", Description = "String.prototype.replace (searchValue, replaceValue) accepts only two arguments", ExpectedException = typeof(Exception))]
        public void StringPrototypeReplaceSearchValueReplaceValueAcceptsOnlyTwoArguments(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 15.7.4.5")]
        [TestCase("S15.7.4.5_A1.2_D02.js", Description = "If f < 0 or f > 20, throw a RangeError exception")]
        [TestCase("S15.7.4.5_D1.2_T01.js", Description = "If f < 0 or f > 20, throw a RangeError exception")]
        public void IfF0OrF20ThrowARangeErrorException(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 15.9.1.14")]
        [TestCase("S15.9.1.14_D1.js", Description = "Return an implementation-dependent choice of either ToInteger(Result(2)) or ToInteger(Result(2)) + (+0)")]
        public void ReturnAnImplementationDependentChoiceOfEitherToIntegerResult2OrToIntegerResult20(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 15.5")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_D1.1.js", Description = "Engines implements array like access to string elemenths, when we call squre brackets operator char at position specified returns\r\n*/\r\n\r\nvar __str = \'hail to robots!!!\'")]
        public void EnginesImplementsArrayLikeAccessToStringElementhsWhenWeCallSqureBracketsOperatorCharAtPositionSpecifiedReturnsVar__strHailToRobots(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_D1.2.js", Description = "Some engines can implement array like access to string elemenths: Positions are indexed with nonnegative integers")]
        public void SomeEnginesCanImplementArrayLikeAccessToStringElementhsPositionsAreIndexedWithNonnegativeIntegers(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 15.5")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_D2.1.js", Description = "Engines implements array like access to string elemenths, Index of element must be nonnegative", ExpectedException = typeof(Exception))]
        public void EnginesImplementsArrayLikeAccessToStringElementhsIndexOfElementMustBeNonnegative(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 15.5")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_D2.2.js", Description = "Engines implements array like access to string elemenths, Index of elementh must be less than string length", ExpectedException = typeof(Exception))]
        public void EnginesImplementsArrayLikeAccessToStringElementhsIndexOfElementhMustBeLessThanStringLength(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 15.5")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_D2.3.js", Description = "Engines implements array like access to string elemenths, If index of elementh is greater or equals than string length an empty string returns")]
        public void EnginesImplementsArrayLikeAccessToStringElementhsIfIndexOfElementhIsGreaterOrEqualsThanStringLengthAnEmptyStringReturns(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 15.5")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_D2.4.js", Description = "Engines implements array like access to string elemenths, If index of elementh is less than 0 an empty string returns")]
        public void EnginesImplementsArrayLikeAccessToStringElementhsIfIndexOfElementhIsLessThan0AnEmptyStringReturns(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 15.5")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_D2.5.js", Description = "Engines implements array like access to string elemenths, If index of elementh is less than 0 an undefined returns")]
        public void EnginesImplementsArrayLikeAccessToStringElementhsIfIndexOfElementhIsLessThan0AnUndefinedReturns(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 15.5")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_D2.6.js", Description = "Engines implements array like access to string elemenths, If index of elementh is greater or equals than string length an undefined returns")]
        public void EnginesImplementsArrayLikeAccessToStringElementhsIfIndexOfElementhIsGreaterOrEqualsThanStringLengthAnUndefinedReturns(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 15.5")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_D2.7.js", Description = "Engines implements array like access to string elemenths, If index of element must is equal to -1 an length of string returns")]
        public void EnginesImplementsArrayLikeAccessToStringElementhsIfIndexOfElementMustIsEqualTo1AnLengthOfStringReturns(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 8.6")]
        [TestCase("S8.6_D1.1.js", Description = "An Object may have up to 4096 properties")]
        public void AnObjectMayHaveUpTo4096Properties(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 8.6")]
        [TestCase("S8.6_D1.2.js", Description = "An Object may have up to 16384 properties ")]
        [Explicit("Very high memory usage.")]
        public void AnObjectMayHaveUpTo16384Properties(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 8.6")]
        [TestCase("S8.6_D1.3.js", Description = "An Object may have up to 65536 properties ")]
        [Explicit("Very high memory usage.")]
        public void AnObjectMayHaveUpTo65536Properties(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 8.6")]
        [TestCase("S8.6_D1.4.js", Description = "An Object may have up to 262144 properties ")]
        [Explicit("Very high memory usage.")]
        public void AnObjectMayHaveUpTo262144Properties(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 8.8")]
        [TestCase("S8.8_D1.1.js", Description = "Arguments list may have up to 512 elements")]
        public void ArgumentsListMayHaveUpTo512Elements(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 8.8")]
        [TestCase("S8.8_D1.2.js", Description = "Arguments list may have up to 2048 elements")]
        [Explicit("Very high memory usage.")]
        public void ArgumentsListMayHaveUpTo2048Elements(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Implementation_Diagnostics")]
        [Category("ECMA 8.8")]
        [TestCase("S8.8_D1.3.js", Description = "Arguments list may have up to 8192 elements")]
        [Explicit("Very high memory usage.")]
        public void ArgumentsListMayHaveUpTo8192Elements(string file)
        {
            RunFile(file);
        }
    }
}