// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Unicode
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class Unicode320Tests : SputnikTestFixture
    {
        public Unicode320Tests()
            : base(@"Unicode\Unicode_320")
        {
        }

        [Test]
        [Category("Sputnik Unicode")]
        [Category("ECMA 15.10.2.12")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.3")]
        [TestCase("S15.10.2.12_A1_T6.js", Description = "The production CharacterClassEscape :: s evaluates by returning the set of characters containing the characters that are on the right-hand side of the WhiteSpace (7.2) or LineTerminator (7.3) productions")]
        public void TheProductionCharacterClassEscapeSEvaluatesByReturningTheSetOfCharactersContainingTheCharactersThatAreOnTheRightHandSideOfTheWhiteSpace72OrLineTerminator73Productions(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Unicode")]
        [Category("ECMA 15.10.2.12")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.3")]
        [TestCase("S15.10.2.12_A2_T6.js", Description = "The production CharacterClassEscape :: S evaluates by returning the set of all characters not included in the set returned by CharacterClassEscape :: s")]
        public void TheProductionCharacterClassEscapeSEvaluatesByReturningTheSetOfAllCharactersNotIncludedInTheSetReturnedByCharacterClassEscapeS(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Unicode")]
        [Category("ECMA 15.5.4.16")]
        [Category("ECMA 15.5.4.18")]
        [TestCase("S15.5.4.16_A1.js", Description = "The characters in UnicodeData.txt, but not in SpecialCasings.txt are converted one by one")]
        [TestCase("S15.5.4.18_A1.js", Description = "The characters in UnicodeData.txt, but not in SpecialCasings.txt are converted one by one")]
        public void TheCharactersInUnicodeDataTxtButNotInSpecialCasingsTxtAreConvertedOneByOne(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Unicode")]
        [Category("ECMA 15.5.4.16")]
        [Category("ECMA 15.5.4.18")]
        [TestCase("S15.5.4.16_A2.js", Description = "The characters in SpecialCasings.txt are converted by multi-character results")]
        [TestCase("S15.5.4.18_A2.js", Description = "The characters in SpecialCasings.txt are converted by multi-character results")]
        public void TheCharactersInSpecialCasingsTxtAreConvertedByMultiCharacterResults(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Unicode")]
        [Category("ECMA 7.1")]
        [TestCase("S7.1_A1_T1.js", Description = "The format control character (Cf) can occur anywhere in the source text and these characters are removed before applying the lexical grammar")]
        public void TheFormatControlCharacterCfCanOccurAnywhereInTheSourceTextAndTheseCharactersAreRemovedBeforeApplyingTheLexicalGrammar(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Unicode")]
        [Category("ECMA 7.1")]
        [TestCase("S7.1_A2.1_T1.js", Description = "Since the format control character (Cf) are removed before processing string literals, one must use a Unicode escape sequence to include a Cf inside string literal")]
        [TestCase("S7.1_A2.1_T2.js", Description = "Since the format control character (Cf) are removed before processing string literals, one must use a Unicode escape sequence to include a Cf inside string literal")]
        public void SinceTheFormatControlCharacterCfAreRemovedBeforeProcessingStringLiteralsOneMustUseAUnicodeEscapeSequenceToIncludeACfInsideStringLiteral(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Unicode")]
        [Category("ECMA 7.1")]
        [TestCase("S7.1_A2.2_T1.js", Description = "Since the format control character (Cf) are removed before processing regular expression literals, one must use a Unicode escape sequence to include a Cf inside regular expression literal")]
        [TestCase("S7.1_A2.2_T2.js", Description = "Since the format control character (Cf) are removed before processing regular expression literals, one must use a Unicode escape sequence to include a Cf inside regular expression literal")]
        public void SinceTheFormatControlCharacterCfAreRemovedBeforeProcessingRegularExpressionLiteralsOneMustUseAUnicodeEscapeSequenceToIncludeACfInsideRegularExpressionLiteral(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Unicode")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.5")]
        [TestCase("S7.2_A1.6_T1.js", Description = "Any other Unicode \"space separator\" (category \"Zs\") between any two tokens is allowed")]
        public void AnyOtherUnicodeSpaceSeparatorCategoryZsBetweenAnyTwoTokensIsAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Unicode")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.2_A2.6_T1.js", Description = "Any other Unicode \"space separator\" (category \"Zs\") within strings")]
        public void AnyOtherUnicodeSpaceSeparatorCategoryZsWithinStrings(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Unicode")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.4")]
        [TestCase("S7.2_A3.6_T1.js", Description = "Single line comment can contain any other Unicode \"space separator\" (category \"Zs\")")]
        public void SingleLineCommentCanContainAnyOtherUnicodeSpaceSeparatorCategoryZs(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Unicode")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.4")]
        [TestCase("S7.2_A4.6_T1.js", Description = "Multi line comment can contain any other Unicode \"space separator\" (category \"Zs\")")]
        public void MultiLineCommentCanContainAnyOtherUnicodeSpaceSeparatorCategoryZs(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Unicode")]
        [Category("ECMA 7.6")]
        [TestCase("S7.6_A1.1_T1.js", Description = "IdentifierStart :: UnicodeLetter (any character in the Unicode categories \"Lu\", \"Ll\", \"Lt\", \"Lm\", \"Lo\", \"Nl\")")]
        [TestCase("S7.6_A1.1_T2.js", Description = "IdentifierStart :: UnicodeLetter (any character in the Unicode categories \"Lu\", \"Ll\", \"Lt\", \"Lm\", \"Lo\", \"Nl\")")]
        [TestCase("S7.6_A1.1_T3.js", Description = "IdentifierStart :: UnicodeLetter (any character in the Unicode categories \"Lu\", \"Ll\", \"Lt\", \"Lm\", \"Lo\", \"Nl\")")]
        [TestCase("S7.6_A1.1_T4.js", Description = "IdentifierStart :: UnicodeLetter (any character in the Unicode categories \"Lu\", \"Ll\", \"Lt\", \"Lm\", \"Lo\", \"Nl\")")]
        [TestCase("S7.6_A1.1_T5.js", Description = "IdentifierStart :: UnicodeLetter (any character in the Unicode categories \"Lu\", \"Ll\", \"Lt\", \"Lm\", \"Lo\", \"Nl\")")]
        [TestCase("S7.6_A1.1_T6.js", Description = "IdentifierStart :: UnicodeLetter (any character in the Unicode categories \"Lu\", \"Ll\", \"Lt\", \"Lm\", \"Lo\", \"Nl\")")]
        [Explicit("Very high memory usage.")]
        public void IdentifierStartUnicodeLetterAnyCharacterInTheUnicodeCategoriesLuLlLtLmLoNl(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Unicode")]
        [Category("ECMA 7.6")]
        [TestCase("S7.6_A1.4_T1.js", Description = "IdentifierName must begin at IdentifierStart")]
        [TestCase("S7.6_A1.4_T2.js", Description = "IdentifierName must begin at IdentifierStart")]
        [TestCase("S7.6_A1.4_T3.js", Description = "IdentifierName must begin at IdentifierStart")]
        [TestCase("S7.6_A1.4_T4.js", Description = "IdentifierName must begin at IdentifierStart")]
        public void IdentifierNameMustBeginAtIdentifierStart(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Unicode")]
        [Category("ECMA 7.6")]
        [TestCase("S7.6_A2.2_T1.js", Description = "IdentifierPart :: UnicodeCombiningMark (any character in the Unicode categories \"Mn\", \"Mc\")")]
        [TestCase("S7.6_A2.2_T2.js", Description = "IdentifierPart :: UnicodeCombiningMark (any character in the Unicode categories \"Mn\", \"Mc\")")]
        public void IdentifierPartUnicodeCombiningMarkAnyCharacterInTheUnicodeCategoriesMnMc(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Unicode")]
        [Category("ECMA 7.6")]
        [TestCase("S7.6_A2.3.js", Description = "IdentifierPart :: UnicodeDigit (any character in the Unicode categories \"Decimal Number (Nd)\". @description: Complex test with eval")]
        public void IdentifierPartUnicodeDigitAnyCharacterInTheUnicodeCategoriesDecimalNumberNdDescriptionComplexTestWithEval(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Unicode")]
        [Category("ECMA 7.6")]
        [TestCase("S7.6_A2.4.js", Description = "IdentifierPart :: UnicodeConnectorPunctuation (any character in the Unicode categories \"Connector Punctuation (Pc)\". @description: Complex test with eval")]
        public void IdentifierPartUnicodeConnectorPunctuationAnyCharacterInTheUnicodeCategoriesConnectorPunctuationPcDescriptionComplexTestWithEval(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Unicode")]
        [Category("ECMA 7.6")]
        [TestCase("S7.6_A3.1.js", Description = "IdentifierName must contain only IdentifierPart character")]
        public void IdentifierNameMustContainOnlyIdentifierPartCharacter(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Unicode")]
        [Category("ECMA 7.6")]
        [TestCase("S7.6_A3.2.js", Description = "IdentifierName must begin only IdentifierStart character")]
        public void IdentifierNameMustBeginOnlyIdentifierStartCharacter(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Unicode")]
        [Category("ECMA 6")]
        [Category("ECMA 7.6")]
        [TestCase("S7.6_A5.2_T1.js", Description = "If a \\UnicodeEscapeSequence sequence were replaced by its UnicodeEscapeSequence\'s CV, the result must still be a valid Identifier that has the exact same sequence of characters as the original Identifier")]
        [TestCase("S7.6_A5.2_T10.js", Description = "If a \\UnicodeEscapeSequence sequence were replaced by its UnicodeEscapeSequence\'s CV, the result must still be a valid Identifier that has the exact same sequence of characters as the original Identifier")]
        [TestCase("S7.6_A5.2_T2.js", Description = "If a \\UnicodeEscapeSequence sequence were replaced by its UnicodeEscapeSequence\'s CV, the result must still be a valid Identifier that has the exact same sequence of characters as the original Identifier")]
        [TestCase("S7.6_A5.2_T3.js", Description = "If a \\UnicodeEscapeSequence sequence were replaced by its UnicodeEscapeSequence\'s CV, the result must still be a valid Identifier that has the exact same sequence of characters as the original Identifier")]
        [TestCase("S7.6_A5.2_T4.js", Description = "If a \\UnicodeEscapeSequence sequence were replaced by its UnicodeEscapeSequence\'s CV, the result must still be a valid Identifier that has the exact same sequence of characters as the original Identifier")]
        [TestCase("S7.6_A5.2_T5.js", Description = "If a \\UnicodeEscapeSequence sequence were replaced by its UnicodeEscapeSequence\'s CV, the result must still be a valid Identifier that has the exact same sequence of characters as the original Identifier")]
        [TestCase("S7.6_A5.2_T6.js", Description = "If a \\UnicodeEscapeSequence sequence were replaced by its UnicodeEscapeSequence\'s CV, the result must still be a valid Identifier that has the exact same sequence of characters as the original Identifier")]
        [TestCase("S7.6_A5.2_T7.js", Description = "If a \\UnicodeEscapeSequence sequence were replaced by its UnicodeEscapeSequence\'s CV, the result must still be a valid Identifier that has the exact same sequence of characters as the original Identifier")]
        [TestCase("S7.6_A5.2_T8.js", Description = "If a \\UnicodeEscapeSequence sequence were replaced by its UnicodeEscapeSequence\'s CV, the result must still be a valid Identifier that has the exact same sequence of characters as the original Identifier")]
        [TestCase("S7.6_A5.2_T9.js", Description = "If a \\UnicodeEscapeSequence sequence were replaced by its UnicodeEscapeSequence\'s CV, the result must still be a valid Identifier that has the exact same sequence of characters as the original Identifier")]
        [Explicit("Very high memory usage.")]
        public void IfAUnicodeEscapeSequenceSequenceWereReplacedByItsUnicodeEscapeSequenceSCVTheResultMustStillBeAValidIdentifierThatHasTheExactSameSequenceOfCharactersAsTheOriginalIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Unicode")]
        [Category("ECMA 6")]
        [Category("ECMA 7.6")]
        [TestCase("S7.6_A5.3_T1.js", Description = "If a UnicodeEscapeSequence put a character into an identifier that would otherwise be illegal, throw SyntaxError")]
        [TestCase("S7.6_A5.3_T2.js", Description = "If a UnicodeEscapeSequence put a character into an identifier that would otherwise be illegal, throw SyntaxError")]
        public void IfAUnicodeEscapeSequencePutACharacterIntoAnIdentifierThatWouldOtherwiseBeIllegalThrowSyntaxError(string file)
        {
            RunFile(file);
        }
    }
}