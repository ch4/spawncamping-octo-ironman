// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Expressions.AssignmentOperators
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class CompoundAssignmentTests : SputnikTestFixture
    {
        public CompoundAssignmentTests()
            : base(@"Conformance\11_Expressions\11.13_Assignment_Operators\11.13.2_Compound_Assignment")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.13.2")]
        [TestCase("S11.13.2_A1_T1.js", Description = "White Space and Line Terminator between LeftHandSideExpression and \"@=\" or between \"@=\" and AssignmentExpression are allowed")]
        [TestCase("S11.13.2_A1_T10.js", Description = "White Space and Line Terminator between LeftHandSideExpression and \"@=\" or between \"@=\" and AssignmentExpression are allowed")]
        [TestCase("S11.13.2_A1_T11.js", Description = "White Space and Line Terminator between LeftHandSideExpression and \"@=\" or between \"@=\" and AssignmentExpression are allowed")]
        [TestCase("S11.13.2_A1_T2.js", Description = "White Space and Line Terminator between LeftHandSideExpression and \"@=\" or between \"@=\" and AssignmentExpression are allowed")]
        [TestCase("S11.13.2_A1_T3.js", Description = "White Space and Line Terminator between LeftHandSideExpression and \"@=\" or between \"@=\" and AssignmentExpression are allowed")]
        [TestCase("S11.13.2_A1_T4.js", Description = "White Space and Line Terminator between LeftHandSideExpression and \"@=\" or between \"@=\" and AssignmentExpression are allowed")]
        [TestCase("S11.13.2_A1_T5.js", Description = "White Space and Line Terminator between LeftHandSideExpression and \"@=\" or between \"@=\" and AssignmentExpression are allowed")]
        [TestCase("S11.13.2_A1_T6.js", Description = "White Space and Line Terminator between LeftHandSideExpression and \"@=\" or between \"@=\" and AssignmentExpression are allowed")]
        [TestCase("S11.13.2_A1_T7.js", Description = "White Space and Line Terminator between LeftHandSideExpression and \"@=\" or between \"@=\" and AssignmentExpression are allowed")]
        [TestCase("S11.13.2_A1_T8.js", Description = "White Space and Line Terminator between LeftHandSideExpression and \"@=\" or between \"@=\" and AssignmentExpression are allowed")]
        [TestCase("S11.13.2_A1_T9.js", Description = "White Space and Line Terminator between LeftHandSideExpression and \"@=\" or between \"@=\" and AssignmentExpression are allowed")]
        public void WhiteSpaceAndLineTerminatorBetweenLeftHandSideExpressionAndOrBetweenAndAssignmentExpressionAreAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.13.2")]
        [TestCase("S11.13.2_A2.1_T1.1.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T1.10.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T1.11.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T1.2.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T1.3.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T1.4.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T1.5.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T1.6.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T1.7.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T1.8.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T1.9.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T2.1.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T2.10.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T2.11.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T2.2.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T2.3.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T2.4.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T2.5.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T2.6.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T2.7.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T2.8.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T2.9.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T3.1.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T3.10.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T3.11.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T3.2.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T3.3.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T3.4.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T3.5.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T3.6.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T3.7.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T3.8.js", Description = "Operator uses GetValue")]
        [TestCase("S11.13.2_A2.1_T3.9.js", Description = "Operator uses GetValue")]
        public void OperatorUsesGetValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.13.2")]
        [Category("ECMA 16")]
        [TestCase("S11.13.2_A2.2_T1.js", Description = "Operator uses PutValue", ExpectedException = typeof(Exception))]
        [TestCase("S11.13.2_A2.2_T10.js", Description = "Operator uses PutValue", ExpectedException = typeof(Exception))]
        [TestCase("S11.13.2_A2.2_T11.js", Description = "Operator uses PutValue", ExpectedException = typeof(Exception))]
        [TestCase("S11.13.2_A2.2_T2.js", Description = "Operator uses PutValue", ExpectedException = typeof(Exception))]
        [TestCase("S11.13.2_A2.2_T3.js", Description = "Operator uses PutValue", ExpectedException = typeof(Exception))]
        [TestCase("S11.13.2_A2.2_T4.js", Description = "Operator uses PutValue", ExpectedException = typeof(Exception))]
        [TestCase("S11.13.2_A2.2_T5.js", Description = "Operator uses PutValue", ExpectedException = typeof(Exception))]
        [TestCase("S11.13.2_A2.2_T6.js", Description = "Operator uses PutValue", ExpectedException = typeof(Exception))]
        [TestCase("S11.13.2_A2.2_T7.js", Description = "Operator uses PutValue", ExpectedException = typeof(Exception))]
        [TestCase("S11.13.2_A2.2_T8.js", Description = "Operator uses PutValue", ExpectedException = typeof(Exception))]
        [TestCase("S11.13.2_A2.2_T9.js", Description = "Operator uses PutValue", ExpectedException = typeof(Exception))]
        public void OperatorUsesPutValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.13.2")]
        [TestCase("S11.13.2_A3.1_T1.js", Description = "Operator x @= y uses PutValue(x, x @ y)")]
        [TestCase("S11.13.2_A3.1_T10.js", Description = "Operator x @= y uses PutValue(x, x @ y)")]
        [TestCase("S11.13.2_A3.1_T11.js", Description = "Operator x @= y uses PutValue(x, x @ y)")]
        [TestCase("S11.13.2_A3.1_T2.js", Description = "Operator x @= y uses PutValue(x, x @ y)")]
        [TestCase("S11.13.2_A3.1_T3.js", Description = "Operator x @= y uses PutValue(x, x @ y)")]
        [TestCase("S11.13.2_A3.1_T4.js", Description = "Operator x @= y uses PutValue(x, x @ y)")]
        [TestCase("S11.13.2_A3.1_T5.js", Description = "Operator x @= y uses PutValue(x, x @ y)")]
        [TestCase("S11.13.2_A3.1_T6.js", Description = "Operator x @= y uses PutValue(x, x @ y)")]
        [TestCase("S11.13.2_A3.1_T7.js", Description = "Operator x @= y uses PutValue(x, x @ y)")]
        [TestCase("S11.13.2_A3.1_T8.js", Description = "Operator x @= y uses PutValue(x, x @ y)")]
        [TestCase("S11.13.2_A3.1_T9.js", Description = "Operator x @= y uses PutValue(x, x @ y)")]
        public void OperatorXYUsesPutValueXXY(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.13.2")]
        [TestCase("S11.13.2_A3.2_T1.js", Description = "Operator x @= y returns x @ y")]
        [TestCase("S11.13.2_A3.2_T10.js", Description = "Operator x @= y returns x @ y")]
        [TestCase("S11.13.2_A3.2_T11.js", Description = "Operator x @= y returns x @ y")]
        [TestCase("S11.13.2_A3.2_T2.js", Description = "Operator x @= y returns x @ y")]
        [TestCase("S11.13.2_A3.2_T3.js", Description = "Operator x @= y returns x @ y")]
        [TestCase("S11.13.2_A3.2_T4.js", Description = "Operator x @= y returns x @ y")]
        [TestCase("S11.13.2_A3.2_T5.js", Description = "Operator x @= y returns x @ y")]
        [TestCase("S11.13.2_A3.2_T6.js", Description = "Operator x @= y returns x @ y")]
        [TestCase("S11.13.2_A3.2_T7.js", Description = "Operator x @= y returns x @ y")]
        [TestCase("S11.13.2_A3.2_T8.js", Description = "Operator x @= y returns x @ y")]
        [TestCase("S11.13.2_A3.2_T9.js", Description = "Operator x @= y returns x @ y")]
        public void OperatorXYReturnsXY(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.13.2")]
        [Category("ECMA 11.5.1")]
        [TestCase("S11.13.2_A4.1_T1.1.js", Description = "The production x *= y is the same as the production x = x * y")]
        [TestCase("S11.13.2_A4.1_T1.2.js", Description = "The production x *= y is the same as the production x = x * y")]
        [TestCase("S11.13.2_A4.1_T1.3.js", Description = "The production x *= y is the same as the production x = x * y")]
        [TestCase("S11.13.2_A4.1_T1.4.js", Description = "The production x *= y is the same as the production x = x * y")]
        [TestCase("S11.13.2_A4.1_T2.1.js", Description = "The production x *= y is the same as the production x = x * y")]
        [TestCase("S11.13.2_A4.1_T2.2.js", Description = "The production x *= y is the same as the production x = x * y")]
        [TestCase("S11.13.2_A4.1_T2.3.js", Description = "The production x *= y is the same as the production x = x * y")]
        [TestCase("S11.13.2_A4.1_T2.4.js", Description = "The production x *= y is the same as the production x = x * y")]
        [TestCase("S11.13.2_A4.1_T2.5.js", Description = "The production x *= y is the same as the production x = x * y")]
        [TestCase("S11.13.2_A4.1_T2.6.js", Description = "The production x *= y is the same as the production x = x * y")]
        [TestCase("S11.13.2_A4.1_T2.7.js", Description = "The production x *= y is the same as the production x = x * y")]
        [TestCase("S11.13.2_A4.1_T2.8.js", Description = "The production x *= y is the same as the production x = x * y")]
        [TestCase("S11.13.2_A4.1_T2.9.js", Description = "The production x *= y is the same as the production x = x * y")]
        public void TheProductionXYIsTheSameAsTheProductionXXY(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.10.1")]
        [Category("ECMA 11.10.2")]
        [Category("ECMA 11.10.3")]
        [Category("ECMA 11.13.2")]
        [Category("ECMA 11.5.2")]
        [Category("ECMA 11.5.3")]
        [Category("ECMA 11.6.1")]
        [Category("ECMA 11.6.2")]
        [Category("ECMA 11.7.1")]
        [Category("ECMA 11.7.2")]
        [Category("ECMA 11.7.3")]
        [TestCase("S11.13.2_A4.10_T1.1.js", Description = "The production x ^= y is the same as x = x ^ y")]
        [TestCase("S11.13.2_A4.10_T1.2.js", Description = "The production x ^= y is the same as x = x ^ y")]
        [TestCase("S11.13.2_A4.10_T1.3.js", Description = "The production x ^= y is the same as x = x ^ y")]
        [TestCase("S11.13.2_A4.10_T1.4.js", Description = "The production x ^= y is the same as x = x ^ y")]
        [TestCase("S11.13.2_A4.10_T2.1.js", Description = "The production x ^= y is the same as x = x ^ y")]
        [TestCase("S11.13.2_A4.10_T2.2.js", Description = "The production x ^= y is the same as x = x ^ y")]
        [TestCase("S11.13.2_A4.10_T2.3.js", Description = "The production x ^= y is the same as x = x ^ y")]
        [TestCase("S11.13.2_A4.10_T2.4.js", Description = "The production x ^= y is the same as x = x ^ y")]
        [TestCase("S11.13.2_A4.10_T2.5.js", Description = "The production x ^= y is the same as x = x ^ y")]
        [TestCase("S11.13.2_A4.10_T2.6.js", Description = "The production x ^= y is the same as x = x ^ y")]
        [TestCase("S11.13.2_A4.10_T2.7.js", Description = "The production x ^= y is the same as x = x ^ y")]
        [TestCase("S11.13.2_A4.10_T2.8.js", Description = "The production x ^= y is the same as x = x ^ y")]
        [TestCase("S11.13.2_A4.10_T2.9.js", Description = "The production x ^= y is the same as x = x ^ y")]
        [TestCase("S11.13.2_A4.11_T1.1.js", Description = "The production x |= y is the same as x = x | y")]
        [TestCase("S11.13.2_A4.11_T1.2.js", Description = "The production x |= y is the same as x = x | y")]
        [TestCase("S11.13.2_A4.11_T1.3.js", Description = "The production x |= y is the same as x = x | y")]
        [TestCase("S11.13.2_A4.11_T1.4.js", Description = "The production x |= y is the same as x = x | y")]
        [TestCase("S11.13.2_A4.11_T2.1.js", Description = "The production x |= y is the same as x = x | y")]
        [TestCase("S11.13.2_A4.11_T2.2.js", Description = "The production x |= y is the same as x = x | y")]
        [TestCase("S11.13.2_A4.11_T2.3.js", Description = "The production x |= y is the same as x = x | y")]
        [TestCase("S11.13.2_A4.11_T2.4.js", Description = "The production x |= y is the same as x = x | y")]
        [TestCase("S11.13.2_A4.11_T2.5.js", Description = "The production x |= y is the same as x = x | y")]
        [TestCase("S11.13.2_A4.11_T2.6.js", Description = "The production x |= y is the same as x = x | y")]
        [TestCase("S11.13.2_A4.11_T2.7.js", Description = "The production x |= y is the same as x = x | y")]
        [TestCase("S11.13.2_A4.11_T2.8.js", Description = "The production x |= y is the same as x = x | y")]
        [TestCase("S11.13.2_A4.11_T2.9.js", Description = "The production x |= y is the same as x = x | y")]
        [TestCase("S11.13.2_A4.2_T1.1.js", Description = "The production x /= y is the same as x = x / y")]
        [TestCase("S11.13.2_A4.2_T1.2.js", Description = "The production x /= y is the same as x = x / y")]
        [TestCase("S11.13.2_A4.2_T1.3.js", Description = "The production x /= y is the same as x = x / y")]
        [TestCase("S11.13.2_A4.2_T1.4.js", Description = "The production x /= y is the same as x = x / y")]
        [TestCase("S11.13.2_A4.2_T2.1.js", Description = "The production x /= y is the same as x = x / y")]
        [TestCase("S11.13.2_A4.2_T2.2.js", Description = "The production x /= y is the same as x = x / y")]
        [TestCase("S11.13.2_A4.2_T2.3.js", Description = "The production x /= y is the same as x = x / y")]
        [TestCase("S11.13.2_A4.2_T2.4.js", Description = "The production x /= y is the same as x = x / y")]
        [TestCase("S11.13.2_A4.2_T2.5.js", Description = "The production x /= y is the same as x = x / y")]
        [TestCase("S11.13.2_A4.2_T2.6.js", Description = "The production x /= y is the same as x = x / y")]
        [TestCase("S11.13.2_A4.2_T2.7.js", Description = "The production x /= y is the same as x = x / y")]
        [TestCase("S11.13.2_A4.2_T2.8.js", Description = "The production x /= y is the same as x = x / y")]
        [TestCase("S11.13.2_A4.2_T2.9.js", Description = "The production x /= y is the same as x = x / y")]
        [TestCase("S11.13.2_A4.3_T1.1.js", Description = "The production x %= y is the same as x = x % y")]
        [TestCase("S11.13.2_A4.3_T1.2.js", Description = "The production x %= y is the same as x = x % y")]
        [TestCase("S11.13.2_A4.3_T1.3.js", Description = "The production x %= y is the same as x = x % y")]
        [TestCase("S11.13.2_A4.3_T1.4.js", Description = "The production x %= y is the same as x = x % y")]
        [TestCase("S11.13.2_A4.3_T2.1.js", Description = "The production x %= y is the same as x = x % y")]
        [TestCase("S11.13.2_A4.3_T2.2.js", Description = "The production x %= y is the same as x = x % y")]
        [TestCase("S11.13.2_A4.3_T2.3.js", Description = "The production x %= y is the same as x = x % y")]
        [TestCase("S11.13.2_A4.3_T2.4.js", Description = "The production x %= y is the same as x = x % y")]
        [TestCase("S11.13.2_A4.3_T2.5.js", Description = "The production x %= y is the same as x = x % y")]
        [TestCase("S11.13.2_A4.3_T2.6.js", Description = "The production x %= y is the same as x = x % y")]
        [TestCase("S11.13.2_A4.3_T2.7.js", Description = "The production x %= y is the same as x = x % y")]
        [TestCase("S11.13.2_A4.3_T2.8.js", Description = "The production x %= y is the same as x = x % y")]
        [TestCase("S11.13.2_A4.3_T2.9.js", Description = "The production x %= y is the same as x = x % y")]
        [TestCase("S11.13.2_A4.4_T1.1.js", Description = "The production x += y is the same as x = x + y")]
        [TestCase("S11.13.2_A4.4_T1.2.js", Description = "The production x += y is the same as x = x + y")]
        [TestCase("S11.13.2_A4.4_T1.3.js", Description = "The production x += y is the same as x = x + y")]
        [TestCase("S11.13.2_A4.4_T1.4.js", Description = "The production x += y is the same as x = x + y")]
        [TestCase("S11.13.2_A4.4_T2.1.js", Description = "The production x += y is the same as x = x + y")]
        [TestCase("S11.13.2_A4.4_T2.2.js", Description = "The production x += y is the same as x = x + y")]
        [TestCase("S11.13.2_A4.4_T2.3.js", Description = "The production x += y is the same as x = x + y")]
        [TestCase("S11.13.2_A4.4_T2.4.js", Description = "The production x += y is the same as x = x + y")]
        [TestCase("S11.13.2_A4.4_T2.5.js", Description = "The production x += y is the same as x = x + y")]
        [TestCase("S11.13.2_A4.4_T2.6.js", Description = "The production x += y is the same as x = x + y")]
        [TestCase("S11.13.2_A4.4_T2.7.js", Description = "The production x += y is the same as x = x + y")]
        [TestCase("S11.13.2_A4.4_T2.8.js", Description = "The production x += y is the same as x = x + y")]
        [TestCase("S11.13.2_A4.4_T2.9.js", Description = "The production x += y is the same as x = x + y")]
        [TestCase("S11.13.2_A4.5_T1.1.js", Description = "The production x -= y is the same as x = x - y")]
        [TestCase("S11.13.2_A4.5_T1.2.js", Description = "The production x -= y is the same as x = x - y")]
        [TestCase("S11.13.2_A4.5_T1.3.js", Description = "The production x -= y is the same as x = x - y")]
        [TestCase("S11.13.2_A4.5_T1.4.js", Description = "The production x -= y is the same as x = x - y")]
        [TestCase("S11.13.2_A4.5_T2.1.js", Description = "The production x -= y is the same as x = x - y")]
        [TestCase("S11.13.2_A4.5_T2.2.js", Description = "The production x -= y is the same as x = x - y")]
        [TestCase("S11.13.2_A4.5_T2.3.js", Description = "The production x -= y is the same as x = x - y")]
        [TestCase("S11.13.2_A4.5_T2.4.js", Description = "The production x -= y is the same as x = x - y")]
        [TestCase("S11.13.2_A4.5_T2.5.js", Description = "The production x -= y is the same as x = x - y")]
        [TestCase("S11.13.2_A4.5_T2.6.js", Description = "The production x -= y is the same as x = x - y")]
        [TestCase("S11.13.2_A4.5_T2.7.js", Description = "The production x -= y is the same as x = x - y")]
        [TestCase("S11.13.2_A4.5_T2.8.js", Description = "The production x -= y is the same as x = x - y")]
        [TestCase("S11.13.2_A4.5_T2.9.js", Description = "The production x -= y is the same as x = x - y")]
        [TestCase("S11.13.2_A4.6_T1.1.js", Description = "The production x <<= y is the same as x = x << y")]
        [TestCase("S11.13.2_A4.6_T1.2.js", Description = "The production x <<= y is the same as x = x << y")]
        [TestCase("S11.13.2_A4.6_T1.3.js", Description = "The production x <<= y is the same as x = x << y")]
        [TestCase("S11.13.2_A4.6_T1.4.js", Description = "The production x <<= y is the same as x = x << y")]
        [TestCase("S11.13.2_A4.6_T2.1.js", Description = "The production x <<= y is the same as x = x << y")]
        [TestCase("S11.13.2_A4.6_T2.2.js", Description = "The production x <<= y is the same as x = x << y")]
        [TestCase("S11.13.2_A4.6_T2.3.js", Description = "The production x <<= y is the same as x = x << y")]
        [TestCase("S11.13.2_A4.6_T2.4.js", Description = "The production x <<= y is the same as x = x << y")]
        [TestCase("S11.13.2_A4.6_T2.5.js", Description = "The production x <<= y is the same as x = x << y")]
        [TestCase("S11.13.2_A4.6_T2.6.js", Description = "The production x <<= y is the same as x = x << y")]
        [TestCase("S11.13.2_A4.6_T2.7.js", Description = "The production x <<= y is the same as x = x << y")]
        [TestCase("S11.13.2_A4.6_T2.8.js", Description = "The production x <<= y is the same as x = x << y")]
        [TestCase("S11.13.2_A4.6_T2.9.js", Description = "The production x <<= y is the same as x = x << y")]
        [TestCase("S11.13.2_A4.7_T1.1.js", Description = "The production x >>= y is the same as x = x >> y")]
        [TestCase("S11.13.2_A4.7_T1.2.js", Description = "The production x >>= y is the same as x = x >> y")]
        [TestCase("S11.13.2_A4.7_T1.3.js", Description = "The production x >>= y is the same as x = x >> y")]
        [TestCase("S11.13.2_A4.7_T1.4.js", Description = "The production x >>= y is the same as x = x >> y")]
        [TestCase("S11.13.2_A4.7_T2.1.js", Description = "The production x >>= y is the same as x = x >> y")]
        [TestCase("S11.13.2_A4.7_T2.2.js", Description = "The production x >>= y is the same as x = x >> y")]
        [TestCase("S11.13.2_A4.7_T2.3.js", Description = "The production x >>= y is the same as x = x >> y")]
        [TestCase("S11.13.2_A4.7_T2.4.js", Description = "The production x >>= y is the same as x = x >> y")]
        [TestCase("S11.13.2_A4.7_T2.5.js", Description = "The production x >>= y is the same as x = x >> y")]
        [TestCase("S11.13.2_A4.7_T2.6.js", Description = "The production x >>= y is the same as x = x >> y")]
        [TestCase("S11.13.2_A4.7_T2.7.js", Description = "The production x >>= y is the same as x = x >> y")]
        [TestCase("S11.13.2_A4.7_T2.8.js", Description = "The production x >>= y is the same as x = x >> y")]
        [TestCase("S11.13.2_A4.7_T2.9.js", Description = "The production x >>= y is the same as x = x >> y")]
        [TestCase("S11.13.2_A4.8_T1.1.js", Description = "The production x >>>= y is the same as x = x >>> y")]
        [TestCase("S11.13.2_A4.8_T1.2.js", Description = "The production x >>>= y is the same as x = x >>> y")]
        [TestCase("S11.13.2_A4.8_T1.3.js", Description = "The production x >>>= y is the same as x = x >>> y")]
        [TestCase("S11.13.2_A4.8_T1.4.js", Description = "The production x >>>= y is the same as x = x >>> y")]
        [TestCase("S11.13.2_A4.8_T2.1.js", Description = "The production x >>>= y is the same as x = x >>> y")]
        [TestCase("S11.13.2_A4.8_T2.2.js", Description = "The production x >>>= y is the same as x = x >>> y")]
        [TestCase("S11.13.2_A4.8_T2.3.js", Description = "The production x >>>= y is the same as x = x >>> y")]
        [TestCase("S11.13.2_A4.8_T2.4.js", Description = "The production x >>>= y is the same as x = x >>> y")]
        [TestCase("S11.13.2_A4.8_T2.5.js", Description = "The production x >>>= y is the same as x = x >>> y")]
        [TestCase("S11.13.2_A4.8_T2.6.js", Description = "The production x >>>= y is the same as x = x >>> y")]
        [TestCase("S11.13.2_A4.8_T2.7.js", Description = "The production x >>>= y is the same as x = x >>> y")]
        [TestCase("S11.13.2_A4.8_T2.8.js", Description = "The production x >>>= y is the same as x = x >>> y")]
        [TestCase("S11.13.2_A4.8_T2.9.js", Description = "The production x >>>= y is the same as x = x >>> y")]
        [TestCase("S11.13.2_A4.9_T1.1.js", Description = "The production x &= y is the same as x = x & y")]
        [TestCase("S11.13.2_A4.9_T1.2.js", Description = "The production x &= y is the same as x = x & y")]
        [TestCase("S11.13.2_A4.9_T1.3.js", Description = "The production x &= y is the same as x = x & y")]
        [TestCase("S11.13.2_A4.9_T1.4.js", Description = "The production x &= y is the same as x = x & y")]
        [TestCase("S11.13.2_A4.9_T2.1.js", Description = "The production x &= y is the same as x = x & y")]
        [TestCase("S11.13.2_A4.9_T2.2.js", Description = "The production x &= y is the same as x = x & y")]
        [TestCase("S11.13.2_A4.9_T2.3.js", Description = "The production x &= y is the same as x = x & y")]
        [TestCase("S11.13.2_A4.9_T2.4.js", Description = "The production x &= y is the same as x = x & y")]
        [TestCase("S11.13.2_A4.9_T2.5.js", Description = "The production x &= y is the same as x = x & y")]
        [TestCase("S11.13.2_A4.9_T2.6.js", Description = "The production x &= y is the same as x = x & y")]
        [TestCase("S11.13.2_A4.9_T2.7.js", Description = "The production x &= y is the same as x = x & y")]
        [TestCase("S11.13.2_A4.9_T2.8.js", Description = "The production x &= y is the same as x = x & y")]
        [TestCase("S11.13.2_A4.9_T2.9.js", Description = "The production x &= y is the same as x = x & y")]
        public void TheProductionXYIsTheSameAsXXY(string file)
        {
            RunFile(file);
        }
    }
}