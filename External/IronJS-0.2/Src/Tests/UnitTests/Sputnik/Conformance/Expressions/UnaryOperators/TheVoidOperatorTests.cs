// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Expressions.UnaryOperators
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class TheVoidOperatorTests : SputnikTestFixture
    {
        public TheVoidOperatorTests()
            : base(@"Conformance\11_Expressions\11.4_Unary_Operators\11.4.2_The_void_Operator")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.4.2")]
        [TestCase("S11.4.2_A1.js", Description = "White Space and Line Terminator between \"void\" and UnaryExpression are allowed")]
        public void WhiteSpaceAndLineTerminatorBetweenVoidAndUnaryExpressionAreAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.4.2")]
        [TestCase("S11.4.2_A2_T1.js", Description = "Operator \"void\" uses GetValue")]
        [TestCase("S11.4.2_A2_T2.js", Description = "Operator \"void\" uses GetValue", ExpectedException = typeof(Exception))]
        public void OperatorVoidUsesGetValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.4.2")]
        [TestCase("S11.4.2_A4_T1.js", Description = "Operator \"void\" evaluates UnaryExpression and returns undefined")]
        [TestCase("S11.4.2_A4_T2.js", Description = "Operator \"void\" evaluates UnaryExpression and returns undefined")]
        [TestCase("S11.4.2_A4_T3.js", Description = "Operator \"void\" evaluates UnaryExpression and returns undefined")]
        [TestCase("S11.4.2_A4_T4.js", Description = "Operator \"void\" evaluates UnaryExpression and returns undefined")]
        [TestCase("S11.4.2_A4_T5.js", Description = "Operator \"void\" evaluates UnaryExpression and returns undefined")]
        [TestCase("S11.4.2_A4_T6.js", Description = "Operator \"void\" evaluates UnaryExpression and returns undefined")]
        public void OperatorVoidEvaluatesUnaryExpressionAndReturnsUndefined(string file)
        {
            RunFile(file);
        }
    }
}