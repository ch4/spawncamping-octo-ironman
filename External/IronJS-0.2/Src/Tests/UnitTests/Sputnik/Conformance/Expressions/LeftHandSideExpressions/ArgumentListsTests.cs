// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Expressions.LeftHandSideExpressions
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class ArgumentListsTests : SputnikTestFixture
    {
        public ArgumentListsTests()
            : base(@"Conformance\11_Expressions\11.2_Left_Hand_Side_Expressions\11.2.4_Argument_Lists")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 10.1.8")]
        [Category("ECMA 11.2.3")]
        [Category("ECMA 11.2.4")]
        [TestCase("S11.2.4_A1.1_T1.js", Description = "Arguments : ()")]
        [TestCase("S11.2.4_A1.1_T2.js", Description = "Arguments : ()")]
        public void Arguments(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 10.1.8")]
        [Category("ECMA 11.2.3")]
        [Category("ECMA 11.2.4")]
        [TestCase("S11.2.4_A1.2_T1.js", Description = "Arguments : (ArgumentList)")]
        [TestCase("S11.2.4_A1.2_T2.js", Description = "Arguments : (ArgumentList)")]
        public void ArgumentsArgumentList(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 10.1.8")]
        [Category("ECMA 11.2.3")]
        [Category("ECMA 11.2.4")]
        [TestCase("S11.2.4_A1.3_T1.js", Description = "Arguments : (ArgumentList : ArgumentList,, AssignmentExpression) is a bad syntax", ExpectedException = typeof(Exception))]
        public void ArgumentsArgumentListArgumentListAssignmentExpressionIsABadSyntax(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 10.1.8")]
        [Category("ECMA 11.2.3")]
        [Category("ECMA 11.2.4")]
        [TestCase("S11.2.4_A1.4_T1.js", Description = "Arguments : (ArgumentList : ArgumentList, AssignmentExpression)")]
        [TestCase("S11.2.4_A1.4_T2.js", Description = "Arguments : (ArgumentList : ArgumentList, AssignmentExpression)")]
        [TestCase("S11.2.4_A1.4_T3.js", Description = "Arguments : (ArgumentList : ArgumentList, AssignmentExpression)")]
        [TestCase("S11.2.4_A1.4_T4.js", Description = "Arguments : (ArgumentList : ArgumentList, AssignmentExpression)")]
        public void ArgumentsArgumentListArgumentListAssignmentExpression(string file)
        {
            RunFile(file);
        }
    }
}