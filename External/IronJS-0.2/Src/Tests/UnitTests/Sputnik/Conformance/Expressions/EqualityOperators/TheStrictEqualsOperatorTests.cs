// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Expressions.EqualityOperators
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class TheStrictEqualsOperatorTests : SputnikTestFixture
    {
        public TheStrictEqualsOperatorTests()
            : base(@"Conformance\11_Expressions\11.9_Equality_Operators\11.9.4_The_Strict_Equals_Operator")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.9.4")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.3")]
        [TestCase("S11.9.4_A1.js", Description = "White Space and Line Terminator between EqualityExpression and \"===\" or between \"===\" and RelationalExpression are allowed")]
        public void WhiteSpaceAndLineTerminatorBetweenEqualityExpressionAndOrBetweenAndRelationalExpressionAreAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.9.4")]
        [TestCase("S11.9.4_A2.1_T1.js", Description = "Operator x === y uses GetValue")]
        [TestCase("S11.9.4_A2.1_T2.js", Description = "Operator x === y uses GetValue")]
        [TestCase("S11.9.4_A2.1_T3.js", Description = "Operator x === y uses GetValue")]
        public void OperatorXYUsesGetValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.9.4")]
        [TestCase("S11.9.4_A2.4_T1.js", Description = "First expression is evaluated first, and then second expression")]
        [TestCase("S11.9.4_A2.4_T2.js", Description = "First expression is evaluated first, and then second expression")]
        [TestCase("S11.9.4_A2.4_T3.js", Description = "First expression is evaluated first, and then second expression")]
        public void FirstExpressionIsEvaluatedFirstAndThenSecondExpression(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.9.4")]
        [Category("ECMA 11.9.6")]
        [TestCase("S11.9.4_A3.js", Description = "Type(x) and Type(y) are Boolean-s. Return true, if x and y are both true and both false")]
        public void TypeXAndTypeYAreBooleanSReturnTrueIfXAndYAreBothTrueAndBothFalse(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.9.4")]
        [Category("ECMA 11.9.6")]
        [TestCase("S11.9.4_A4.1_T1.js", Description = "If x or y is NaN, return false")]
        [TestCase("S11.9.4_A4.1_T2.js", Description = "If x or y is NaN, return false")]
        public void IfXOrYIsNaNReturnFalse(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.9.4")]
        [Category("ECMA 11.9.6")]
        [TestCase("S11.9.4_A4.2.js", Description = "If x is +0(-0) and y is -0(+0), return true")]
        public void IfXIs00AndYIs00ReturnTrue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.9.4")]
        [Category("ECMA 11.9.6")]
        [TestCase("S11.9.4_A4.3.js", Description = "Type(x) and Type(y) are Number-s minus NaN, +0, -0. Return true, if x is the same number value as y")]
        public void TypeXAndTypeYAreNumberSMinusNaN00ReturnTrueIfXIsTheSameNumberValueAsY(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.9.4")]
        [Category("ECMA 11.9.6")]
        [TestCase("S11.9.4_A5.js", Description = "Type(x) and Type(y) are String-s. Return true, if x and y are exactly the same sequence of characters")]
        public void TypeXAndTypeYAreStringSReturnTrueIfXAndYAreExactlyTheSameSequenceOfCharacters(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.9.4")]
        [Category("ECMA 11.9.6")]
        [TestCase("S11.9.4_A6.1.js", Description = "If Type(x) and Type(y) are Undefined-s, return true")]
        public void IfTypeXAndTypeYAreUndefinedSReturnTrue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.9.4")]
        [Category("ECMA 11.9.6")]
        [TestCase("S11.9.4_A6.2.js", Description = "If Type(x) and Type(y) are Null-s, return true")]
        public void IfTypeXAndTypeYAreNullSReturnTrue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.9.4")]
        [Category("ECMA 11.9.6")]
        [TestCase("S11.9.4_A7.js", Description = "Type(x) and Type(y) are Object-s. Return true, if x and y are references to the same Object")]
        public void TypeXAndTypeYAreObjectSReturnTrueIfXAndYAreReferencesToTheSameObject(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.9.4")]
        [Category("ECMA 11.9.6")]
        [TestCase("S11.9.4_A8_T1.js", Description = "If Type(x) is different from Type(y), return false")]
        [TestCase("S11.9.4_A8_T2.js", Description = "If Type(x) is different from Type(y), return false")]
        [TestCase("S11.9.4_A8_T3.js", Description = "If Type(x) is different from Type(y), return false")]
        [TestCase("S11.9.4_A8_T4.js", Description = "If Type(x) is different from Type(y), return false")]
        [TestCase("S11.9.4_A8_T5.js", Description = "If Type(x) is different from Type(y), return false")]
        public void IfTypeXIsDifferentFromTypeYReturnFalse(string file)
        {
            RunFile(file);
        }
    }
}