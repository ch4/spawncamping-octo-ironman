// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Expressions.RelationalOperators
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class TheInstanceofOperatorTests : SputnikTestFixture
    {
        public TheInstanceofOperatorTests()
            : base(@"Conformance\11_Expressions\11.8_Relational_Operators\11.8.6_The_instanceof_operator")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.8.6")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.3")]
        [TestCase("S11.8.6_A1.js", Description = "White Space and Line Terminator between RelationalExpression and \"instanceof\" and between \"instanceof\" and ShiftExpression are allowed")]
        public void WhiteSpaceAndLineTerminatorBetweenRelationalExpressionAndInstanceofAndBetweenInstanceofAndShiftExpressionAreAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.8.6")]
        [TestCase("S11.8.6_A2.1_T1.js", Description = "Operator \"instanceof\" uses GetValue")]
        [TestCase("S11.8.6_A2.1_T2.js", Description = "Operator \"instanceof\" uses GetValue")]
        [TestCase("S11.8.6_A2.1_T3.js", Description = "Operator \"instanceof\" uses GetValue")]
        public void OperatorInstanceofUsesGetValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.8.6")]
        [TestCase("S11.8.6_A2.4_T1.js", Description = "First expression is evaluated first, and then second expression")]
        [TestCase("S11.8.6_A2.4_T2.js", Description = "First expression is evaluated first, and then second expression")]
        [TestCase("S11.8.6_A2.4_T3.js", Description = "First expression is evaluated first, and then second expression")]
        public void FirstExpressionIsEvaluatedFirstAndThenSecondExpression(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.8.6")]
        [TestCase("S11.8.6_A3.js", Description = "If ShiftExpression is not an object, throw TypeError")]
        public void IfShiftExpressionIsNotAnObjectThrowTypeError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.8.6")]
        [TestCase("S11.8.6_A4_T1.js", Description = "Only constructor call (with \"new\" keyword) makes instance")]
        [TestCase("S11.8.6_A4_T2.js", Description = "Only constructor call (with \"new\" keyword) makes instance")]
        [TestCase("S11.8.6_A4_T3.js", Description = "Only constructor call (with \"new\" keyword) makes instance")]
        public void OnlyConstructorCallWithNewKeywordMakesInstance(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.8.6")]
        [TestCase("S11.8.6_A5_T1.js", Description = "TypeError is subclass of Error from instanceof operator point of view")]
        [TestCase("S11.8.6_A5_T2.js", Description = "TypeError is subclass of Error from instanceof operator point of view")]
        public void TypeErrorIsSubclassOfErrorFromInstanceofOperatorPointOfView(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.8.6")]
        [TestCase("S11.8.6_A6_T1.js", Description = "Only Function objects implement [[HasInstance]] and can be proper ShiftExpression for the \"instanceof\" operator consequently @description: Checking \"this\" case")]
        public void OnlyFunctionObjectsImplementHasInstanceAndCanBeProperShiftExpressionForTheInstanceofOperatorConsequentlyDescriptionCheckingThisCase(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.8.6")]
        [TestCase("S11.8.6_A6_T2.js", Description = "Only Function objects implement [[HasInstance]] and can be proper ShiftExpression for the \"instanceof\" operator consequently")]
        [TestCase("S11.8.6_A6_T3.js", Description = "Only Function objects implement [[HasInstance]] and can be proper ShiftExpression for the \"instanceof\" operator consequently")]
        [TestCase("S11.8.6_A6_T4.js", Description = "Only Function objects implement [[HasInstance]] and can be proper ShiftExpression for the \"instanceof\" operator consequently")]
        public void OnlyFunctionObjectsImplementHasInstanceAndCanBeProperShiftExpressionForTheInstanceofOperatorConsequently(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.8.6")]
        [TestCase("S11.8.6_A7_T1.js", Description = "When \"instanceof\" returns true it means that GetValue(RelationalExpression) is constructed with ShiftExpression")]
        [TestCase("S11.8.6_A7_T2.js", Description = "When \"instanceof\" returns true it means that GetValue(RelationalExpression) is constructed with ShiftExpression")]
        [TestCase("S11.8.6_A7_T3.js", Description = "When \"instanceof\" returns true it means that GetValue(RelationalExpression) is constructed with ShiftExpression")]
        public void WhenInstanceofReturnsTrueItMeansThatGetValueRelationalExpressionIsConstructedWithShiftExpression(string file)
        {
            RunFile(file);
        }
    }
}