// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Expressions.UnaryOperators
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class UnaryPlusOperatorTests : SputnikTestFixture
    {
        public UnaryPlusOperatorTests()
            : base(@"Conformance\11_Expressions\11.4_Unary_Operators\11.4.6_Unary_plus_Operator")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.4.6")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.3")]
        [TestCase("S11.4.6_A1.js", Description = "White Space and Line Terminator between \"+\" and UnaryExpression are allowed")]
        public void WhiteSpaceAndLineTerminatorBetweenAndUnaryExpressionAreAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.4.6")]
        [TestCase("S11.4.6_A2.1_T1.js", Description = "Operator +x uses GetValue")]
        [TestCase("S11.4.6_A2.1_T2.js", Description = "Operator +x uses GetValue")]
        public void OperatorXUsesGetValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.4.6")]
        [Category("ECMA 8.6.2.6")]
        [TestCase("S11.4.6_A2.2_T1.js", Description = "Operator +x uses [[Default Value]]")]
        public void OperatorXUsesDefaultValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.4.6")]
        [TestCase("S11.4.6_A3_T1.js", Description = "Operator +x returns ToNumber(x)")]
        [TestCase("S11.4.6_A3_T2.js", Description = "Operator +x returns ToNumber(x)")]
        [TestCase("S11.4.6_A3_T3.js", Description = "Operator +x returns ToNumber(x)")]
        [TestCase("S11.4.6_A3_T4.js", Description = "Operator +x returns ToNumber(x)")]
        [TestCase("S11.4.6_A3_T5.js", Description = "Operator +x returns ToNumber(x)")]
        public void OperatorXReturnsToNumberX(string file)
        {
            RunFile(file);
        }
    }
}