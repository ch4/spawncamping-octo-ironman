// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Expressions.LeftHandSideExpressions
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class TheNewOperatorTests : SputnikTestFixture
    {
        public TheNewOperatorTests()
            : base(@"Conformance\11_Expressions\11.2_Left_Hand_Side_Expressions\11.2.2_The_new_Operator")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.2.2")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.3")]
        [TestCase("S11.2.2_A1.1.js", Description = "White Space and Line Terminator between \"new\" and NewExpression are allowed")]
        public void WhiteSpaceAndLineTerminatorBetweenNewAndNewExpressionAreAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.2.2")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.3")]
        [TestCase("S11.2.2_A1.2.js", Description = "White Space and Line Terminator between \"new\" and MemberExpression are allowed")]
        public void WhiteSpaceAndLineTerminatorBetweenNewAndMemberExpressionAreAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.2.2")]
        [TestCase("S11.2.2_A2.js", Description = "Operator \"new\" uses GetValue")]
        public void OperatorNewUsesGetValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.2.2")]
        [TestCase("S11.2.2_A3_T1.js", Description = "If Type(NewExpression) or Type(MemberExpression) is not Object, throw TypeError")]
        [TestCase("S11.2.2_A3_T2.js", Description = "If Type(NewExpression) or Type(MemberExpression) is not Object, throw TypeError")]
        [TestCase("S11.2.2_A3_T3.js", Description = "If Type(NewExpression) or Type(MemberExpression) is not Object, throw TypeError")]
        [TestCase("S11.2.2_A3_T4.js", Description = "If Type(NewExpression) or Type(MemberExpression) is not Object, throw TypeError")]
        [TestCase("S11.2.2_A3_T5.js", Description = "If Type(NewExpression) or Type(MemberExpression) is not Object, throw TypeError")]
        public void IfTypeNewExpressionOrTypeMemberExpressionIsNotObjectThrowTypeError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.2.2")]
        [TestCase("S11.2.2_A4_T1.js", Description = "If NewExpression or MemberExpression does not implement internal [[Construct]] method, throw TypeError")]
        [TestCase("S11.2.2_A4_T2.js", Description = "If NewExpression or MemberExpression does not implement internal [[Construct]] method, throw TypeError")]
        [TestCase("S11.2.2_A4_T3.js", Description = "If NewExpression or MemberExpression does not implement internal [[Construct]] method, throw TypeError")]
        [TestCase("S11.2.2_A4_T4.js", Description = "If NewExpression or MemberExpression does not implement internal [[Construct]] method, throw TypeError")]
        [TestCase("S11.2.2_A4_T5.js", Description = "If NewExpression or MemberExpression does not implement internal [[Construct]] method, throw TypeError")]
        public void IfNewExpressionOrMemberExpressionDoesNotImplementInternalConstructMethodThrowTypeError(string file)
        {
            RunFile(file);
        }
    }
}