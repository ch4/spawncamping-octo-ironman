// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Expressions.PostfixExpressions
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class PostfixIncrementOperatorTests : SputnikTestFixture
    {
        public PostfixIncrementOperatorTests()
            : base(@"Conformance\11_Expressions\11.3_PostfixExpressions\11.3.1_Postfix_Increment_Operator")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.3.1")]
        [Category("ECMA 11.6.3")]
        [Category("ECMA 7.3")]
        [TestCase("S11.3.1_A1.1_T1.js", Description = "Line Terminator between LeftHandSideExpression and \"++\" is not allowed", ExpectedException = typeof(Exception))]
        [TestCase("S11.3.1_A1.1_T2.js", Description = "Line Terminator between LeftHandSideExpression and \"++\" is not allowed", ExpectedException = typeof(Exception))]
        [TestCase("S11.3.1_A1.1_T3.js", Description = "Line Terminator between LeftHandSideExpression and \"++\" is not allowed", ExpectedException = typeof(Exception))]
        [TestCase("S11.3.1_A1.1_T4.js", Description = "Line Terminator between LeftHandSideExpression and \"++\" is not allowed", ExpectedException = typeof(Exception))]
        public void LineTerminatorBetweenLeftHandSideExpressionAndIsNotAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.3.1")]
        [Category("ECMA 11.6.3")]
        [Category("ECMA 7.2")]
        [TestCase("S11.3.1_A1.2_T1.js", Description = "White Space between LeftHandSideExpression and \"++\" are allowed")]
        public void WhiteSpaceBetweenLeftHandSideExpressionAndAreAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.3.1")]
        [Category("ECMA 11.6.3")]
        [TestCase("S11.3.1_A2.1_T1.js", Description = "Operator x++ uses GetValue and PutValue")]
        [TestCase("S11.3.1_A2.1_T2.js", Description = "Operator x++ uses GetValue and PutValue")]
        [TestCase("S11.3.1_A2.1_T3.js", Description = "Operator x++ uses GetValue and PutValue", ExpectedException = typeof(Exception))]
        public void OperatorXUsesGetValueAndPutValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.3.1")]
        [Category("ECMA 8.6.2.6")]
        [TestCase("S11.3.1_A2.2_T1.js", Description = "Operator x++ uses [[Default Value]]")]
        public void OperatorXUsesDefaultValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.3.1")]
        [Category("ECMA 11.6.3")]
        [TestCase("S11.3.1_A3_T1.js", Description = "Operator x++ returns x = ToNumber(x) + 1")]
        [TestCase("S11.3.1_A3_T2.js", Description = "Operator x++ returns x = ToNumber(x) + 1")]
        [TestCase("S11.3.1_A3_T3.js", Description = "Operator x++ returns x = ToNumber(x) + 1")]
        [TestCase("S11.3.1_A3_T4.js", Description = "Operator x++ returns x = ToNumber(x) + 1")]
        [TestCase("S11.3.1_A3_T5.js", Description = "Operator x++ returns x = ToNumber(x) + 1")]
        public void OperatorXReturnsXToNumberX1(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.3.1")]
        [Category("ECMA 11.6.3")]
        [TestCase("S11.3.1_A4_T1.js", Description = "Operator x++ returns ToNumber(x)")]
        [TestCase("S11.3.1_A4_T2.js", Description = "Operator x++ returns ToNumber(x)")]
        [TestCase("S11.3.1_A4_T3.js", Description = "Operator x++ returns ToNumber(x)")]
        [TestCase("S11.3.1_A4_T4.js", Description = "Operator x++ returns ToNumber(x)")]
        [TestCase("S11.3.1_A4_T5.js", Description = "Operator x++ returns ToNumber(x)")]
        public void OperatorXReturnsToNumberX(string file)
        {
            RunFile(file);
        }
    }
}