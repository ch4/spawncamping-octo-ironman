// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Expressions
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class ConditionalOperatorTests : SputnikTestFixture
    {
        public ConditionalOperatorTests()
            : base(@"Conformance\11_Expressions\11.12_Conditional_Operator")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.12")]
        [TestCase("S11.12_A1.js", Description = "White Space and Line Terminator between LogicalORExpression and \"?\" or between \"?\" and AssignmentExpression or between AssignmentExpression and \":\" or between \":\" and AssignmentExpression are allowed")]
        public void WhiteSpaceAndLineTerminatorBetweenLogicalORExpressionAndOrBetweenAndAssignmentExpressionOrBetweenAssignmentExpressionAndOrBetweenAndAssignmentExpressionAreAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.12")]
        [Category("ECMA 16")]
        [Category("ECMA 8.7.1")]
        [TestCase("S11.12_A2.1_T1.js", Description = "Operator x ? y : z uses GetValue")]
        [TestCase("S11.12_A2.1_T2.js", Description = "Operator x ? y : z uses GetValue")]
        [TestCase("S11.12_A2.1_T3.js", Description = "Operator x ? y : z uses GetValue")]
        [TestCase("S11.12_A2.1_T4.js", Description = "Operator x ? y : z uses GetValue")]
        [TestCase("S11.12_A2.1_T5.js", Description = "Operator x ? y : z uses GetValue")]
        [TestCase("S11.12_A2.1_T6.js", Description = "Operator x ? y : z uses GetValue")]
        public void OperatorXYZUsesGetValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.12")]
        [TestCase("S11.12_A3_T1.js", Description = "If ToBoolean(x) is false, return z")]
        [TestCase("S11.12_A3_T2.js", Description = "If ToBoolean(x) is false, return z")]
        [TestCase("S11.12_A3_T3.js", Description = "If ToBoolean(x) is false, return z")]
        [TestCase("S11.12_A3_T4.js", Description = "If ToBoolean(x) is false, return z")]
        public void IfToBooleanXIsFalseReturnZ(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.12")]
        [TestCase("S11.12_A4_T1.js", Description = "If ToBoolean(x) is true, return y")]
        [TestCase("S11.12_A4_T2.js", Description = "If ToBoolean(x) is true, return y")]
        [TestCase("S11.12_A4_T3.js", Description = "If ToBoolean(x) is true, return y")]
        [TestCase("S11.12_A4_T4.js", Description = "If ToBoolean(x) is true, return y")]
        public void IfToBooleanXIsTrueReturnY(string file)
        {
            RunFile(file);
        }
    }
}