// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Expressions.BinaryLogicalOperators
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class LogicalANDOperatorTests : SputnikTestFixture
    {
        public LogicalANDOperatorTests()
            : base(@"Conformance\11_Expressions\11.11_Binary_Logical_Operators\11.11.1_Logical_AND_Operator")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.11.1")]
        [TestCase("S11.11.1_A1.js", Description = "White Space and Line Terminator between LogicalANDExpression and \"&&\" or between \"&&\" and BitwiseORExpression are allowed")]
        public void WhiteSpaceAndLineTerminatorBetweenLogicalANDExpressionAndOrBetweenAndBitwiseORExpressionAreAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.11.1")]
        [Category("ECMA 16")]
        [Category("ECMA 8.7.1")]
        [TestCase("S11.11.1_A2.1_T1.js", Description = "Operator x && y uses GetValue")]
        [TestCase("S11.11.1_A2.1_T2.js", Description = "Operator x && y uses GetValue")]
        [TestCase("S11.11.1_A2.1_T3.js", Description = "Operator x && y uses GetValue")]
        [TestCase("S11.11.1_A2.1_T4.js", Description = "Operator x && y uses GetValue")]
        public void OperatorXYUsesGetValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.11.1")]
        [TestCase("S11.11.1_A2.4_T1.js", Description = "First expression is evaluated first, and then second expression")]
        [TestCase("S11.11.1_A2.4_T2.js", Description = "First expression is evaluated first, and then second expression")]
        [TestCase("S11.11.1_A2.4_T3.js", Description = "First expression is evaluated first, and then second expression")]
        public void FirstExpressionIsEvaluatedFirstAndThenSecondExpression(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.11.1")]
        [TestCase("S11.11.1_A3_T1.js", Description = "If ToBoolean(x) is false, return x")]
        [TestCase("S11.11.1_A3_T2.js", Description = "If ToBoolean(x) is false, return x")]
        [TestCase("S11.11.1_A3_T3.js", Description = "If ToBoolean(x) is false, return x")]
        [TestCase("S11.11.1_A3_T4.js", Description = "If ToBoolean(x) is false, return x")]
        public void IfToBooleanXIsFalseReturnX(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.11.1")]
        [TestCase("S11.11.1_A4_T1.js", Description = "If ToBoolean(x) is true, return y")]
        [TestCase("S11.11.1_A4_T2.js", Description = "If ToBoolean(x) is true, return y")]
        [TestCase("S11.11.1_A4_T3.js", Description = "If ToBoolean(x) is true, return y")]
        [TestCase("S11.11.1_A4_T4.js", Description = "If ToBoolean(x) is true, return y")]
        public void IfToBooleanXIsTrueReturnY(string file)
        {
            RunFile(file);
        }
    }
}