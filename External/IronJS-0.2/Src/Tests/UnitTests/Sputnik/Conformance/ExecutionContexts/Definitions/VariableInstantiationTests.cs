// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.ExecutionContexts.Definitions
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class VariableInstantiationTests : SputnikTestFixture
    {
        public VariableInstantiationTests()
            : base(@"Conformance\10_Execution_Contexts\10.1_Definitions\10.1.3_Variable_Instantiation")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 10.1.3")]
        [TestCase("S10.1.3_A1.js", Description = "If the caller supplies fewer parameter values than there are formal parameters, the extra formal parameters have value undefined")]
        public void IfTheCallerSuppliesFewerParameterValuesThanThereAreFormalParametersTheExtraFormalParametersHaveValueUndefined(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 10.1.3")]
        [TestCase("S10.1.3_A2.js", Description = "If two or more formal parameters share the same name, hence the same property, the corresponding property is given the value that was supplied for the last parameter with this name")]
        public void IfTwoOrMoreFormalParametersShareTheSameNameHenceTheSamePropertyTheCorrespondingPropertyIsGivenTheValueThatWasSuppliedForTheLastParameterWithThisName(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 10.1.3")]
        [TestCase("S10.1.3_A3.js", Description = "If the value of this last parameter (which has the same name as some previous parameters do) was not supplied by the caller, the value of the corresponding property is undefined")]
        public void IfTheValueOfThisLastParameterWhichHasTheSameNameAsSomePreviousParametersDoWasNotSuppliedByTheCallerTheValueOfTheCorrespondingPropertyIsUndefined(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 10.1.3")]
        [TestCase("S10.1.3_A4_T1.js", Description = "Function declaration in function code - If the variable object already has a property with the name of Function Identifier, replace its value and attributes. Semantically, this step must follow the creation of FormalParameterList properties")]
        [TestCase("S10.1.3_A4_T2.js", Description = "Function declaration in function code - If the variable object already has a property with the name of Function Identifier, replace its value and attributes. Semantically, this step must follow the creation of FormalParameterList properties")]
        public void FunctionDeclarationInFunctionCodeIfTheVariableObjectAlreadyHasAPropertyWithTheNameOfFunctionIdentifierReplaceItsValueAndAttributesSemanticallyThisStepMustFollowTheCreationOfFormalParameterListProperties(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 10.1.3")]
        [TestCase("S10.1.3_A5.1_T1.js", Description = "For each VariableDeclaration or VariableDeclarationNoIn in the code, create a property of the variable object whose name is the Identifier in the VariableDeclaration or VariableDeclarationNoIn, whose value is undefined and whose attributes are determined by the type of code")]
        [TestCase("S10.1.3_A5.1_T2.js", Description = "For each VariableDeclaration or VariableDeclarationNoIn in the code, create a property of the variable object whose name is the Identifier in the VariableDeclaration or VariableDeclarationNoIn, whose value is undefined and whose attributes are determined by the type of code")]
        public void ForEachVariableDeclarationOrVariableDeclarationNoInInTheCodeCreateAPropertyOfTheVariableObjectWhoseNameIsTheIdentifierInTheVariableDeclarationOrVariableDeclarationNoInWhoseValueIsUndefinedAndWhoseAttributesAreDeterminedByTheTypeOfCode(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 10.1.3")]
        [TestCase("S10.1.3_A5.2_T1.js", Description = "If there is already a property of the variable object with the name of a declared variable, the value of the property and its attributes are not changed")]
        public void IfThereIsAlreadyAPropertyOfTheVariableObjectWithTheNameOfADeclaredVariableTheValueOfThePropertyAndItsAttributesAreNotChanged(string file)
        {
            RunFile(file);
        }
    }
}