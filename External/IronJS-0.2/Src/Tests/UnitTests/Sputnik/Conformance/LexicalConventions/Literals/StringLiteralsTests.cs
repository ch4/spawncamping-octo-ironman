// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.LexicalConventions.Literals
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class StringLiteralsTests : SputnikTestFixture
    {
        public StringLiteralsTests()
            : base(@"Conformance\07_Lexical_Conventions\7.8_Literals\7.8.4_String_Literals")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.8.4_A1.1_T1.js", Description = "StringLiteral :: \"DoubleStringCharacters_opt\"", ExpectedException = typeof(Exception))]
        [TestCase("S7.8.4_A1.1_T2.js", Description = "StringLiteral :: \"DoubleStringCharacters_opt\"", ExpectedException = typeof(Exception))]
        public void StringLiteralDoubleStringCharacters_opt(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.8.4_A1.2_T1.js", Description = "StringLiteral :: \'SingleStringCharacters_opt\'", ExpectedException = typeof(Exception))]
        [TestCase("S7.8.4_A1.2_T2.js", Description = "StringLiteral :: \'SingleStringCharacters_opt\'", ExpectedException = typeof(Exception))]
        public void StringLiteralSingleStringCharacters_opt(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.8.4_A2.1_T1.js", Description = "Correct interpretation of ENGLISH ALPHABET")]
        [TestCase("S7.8.4_A2.1_T2.js", Description = "Correct interpretation of ENGLISH ALPHABET")]
        public void CorrectInterpretationOfENGLISHALPHABET(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.8.4_A2.2_T1.js", Description = "Correct interpretation of RUSSIAN ALPHABET")]
        [TestCase("S7.8.4_A2.2_T2.js", Description = "Correct interpretation of RUSSIAN ALPHABET")]
        public void CorrectInterpretationOfRUSSIANALPHABET(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.8.4_A2.3_T1.js", Description = "Correct interpretation of DIGITS")]
        public void CorrectInterpretationOfDIGITS(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.8.4_A3.1_T1.js", Description = "StringLiteral :: \"\\\" or \'\\\' is not correct", ExpectedException = typeof(Exception))]
        [TestCase("S7.8.4_A3.1_T2.js", Description = "StringLiteral :: \"\\\" or \'\\\' is not correct", ExpectedException = typeof(Exception))]
        [TestCase("S7.8.4_A3.2_T1.js", Description = "StringLiteral :: \"\\\\\\\" or \'\\\\\\\' is not correct", ExpectedException = typeof(Exception))]
        [TestCase("S7.8.4_A3.2_T2.js", Description = "StringLiteral :: \"\\\\\\\" or \'\\\\\\\' is not correct", ExpectedException = typeof(Exception))]
        public void StringLiteralOrIsNotCorrect(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.8.4_A4.1_T1.js", Description = "CharacterEscapeSequnce :: SingleEscapeSequence")]
        [TestCase("S7.8.4_A4.1_T2.js", Description = "CharacterEscapeSequnce :: SingleEscapeSequence")]
        public void CharacterEscapeSequnceSingleEscapeSequence(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.8.4_A4.2_T1.js", Description = "CharacterEscapeSequnce :: NonEscapeSequence")]
        [TestCase("S7.8.4_A4.2_T2.js", Description = "CharacterEscapeSequnce :: NonEscapeSequence")]
        [TestCase("S7.8.4_A4.2_T3.js", Description = "CharacterEscapeSequnce :: NonEscapeSequence")]
        [TestCase("S7.8.4_A4.2_T4.js", Description = "CharacterEscapeSequnce :: NonEscapeSequence")]
        [TestCase("S7.8.4_A4.2_T5.js", Description = "CharacterEscapeSequnce :: NonEscapeSequence")]
        [TestCase("S7.8.4_A4.2_T6.js", Description = "CharacterEscapeSequnce :: NonEscapeSequence")]
        [TestCase("S7.8.4_A4.2_T7.js", Description = "CharacterEscapeSequnce :: NonEscapeSequence")]
        [TestCase("S7.8.4_A4.2_T8.js", Description = "CharacterEscapeSequnce :: NonEscapeSequence")]
        public void CharacterEscapeSequnceNonEscapeSequence(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.8.4_A4.3_T1.js", Description = "NonEscapeSequence is not EscapeCharacter", ExpectedException = typeof(Exception))]
        [TestCase("S7.8.4_A4.3_T2.js", Description = "NonEscapeSequence is not EscapeCharacter", ExpectedException = typeof(Exception))]
        [TestCase("S7.8.4_A4.3_T3.js", Description = "NonEscapeSequence is not EscapeCharacter", ExpectedException = typeof(Exception))]
        [TestCase("S7.8.4_A4.3_T4.js", Description = "NonEscapeSequence is not EscapeCharacter", ExpectedException = typeof(Exception))]
        [TestCase("S7.8.4_A4.3_T5.js", Description = "NonEscapeSequence is not EscapeCharacter", ExpectedException = typeof(Exception))]
        [TestCase("S7.8.4_A4.3_T6.js", Description = "NonEscapeSequence is not EscapeCharacter", ExpectedException = typeof(Exception))]
        [TestCase("S7.8.4_A4.3_T7.js", Description = "NonEscapeSequence is not EscapeCharacter")]
        public void NonEscapeSequenceIsNotEscapeCharacter(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.8.4_A5.1_T1.js", Description = "EscapeSequence :: 0")]
        [TestCase("S7.8.4_A5.1_T2.js", Description = "EscapeSequence :: 0")]
        [TestCase("S7.8.4_A5.1_T3.js", Description = "EscapeSequence :: 0")]
        public void EscapeSequence0(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.8.4_A6.1_T1.js", Description = "EscapeSequence :: HexEscapeSequence :: x HexDigit HexDigit")]
        [TestCase("S7.8.4_A6.1_T2.js", Description = "EscapeSequence :: HexEscapeSequence :: x HexDigit HexDigit")]
        [TestCase("S7.8.4_A6.1_T3.js", Description = "EscapeSequence :: HexEscapeSequence :: x HexDigit HexDigit")]
        [TestCase("S7.8.4_A6.1_T4.js", Description = "EscapeSequence :: HexEscapeSequence :: x HexDigit HexDigit", ExpectedException = typeof(Exception))]
        public void EscapeSequenceHexEscapeSequenceXHexDigitHexDigit(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.8.4_A6.2_T1.js", Description = "HexEscapeSequence :: x HexDigit is incorrect", ExpectedException = typeof(Exception))]
        [TestCase("S7.8.4_A6.2_T2.js", Description = "HexEscapeSequence :: x HexDigit is incorrect", ExpectedException = typeof(Exception))]
        public void HexEscapeSequenceXHexDigitIsIncorrect(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.8.4_A6.3_T1.js", Description = "\\x HexDigit HexDigit SingleStringCharacter")]
        public void XHexDigitHexDigitSingleStringCharacter(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.8.4_A6.4_T1.js", Description = "HexEscapeSequence \\X HexDigit HexDigit is incorrect", ExpectedException = typeof(Exception))]
        [TestCase("S7.8.4_A6.4_T2.js", Description = "HexEscapeSequence \\X HexDigit HexDigit is incorrect", ExpectedException = typeof(Exception))]
        public void HexEscapeSequenceXHexDigitHexDigitIsIncorrect(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.8.4_A7.1_T1.js", Description = "EscapeSequence :: UnicodeEscapeSequence :: u HexDigit HexDigit HexDigit HexDigit")]
        [TestCase("S7.8.4_A7.1_T2.js", Description = "EscapeSequence :: UnicodeEscapeSequence :: u HexDigit HexDigit HexDigit HexDigit")]
        [TestCase("S7.8.4_A7.1_T3.js", Description = "EscapeSequence :: UnicodeEscapeSequence :: u HexDigit HexDigit HexDigit HexDigit")]
        [TestCase("S7.8.4_A7.1_T4.js", Description = "EscapeSequence :: UnicodeEscapeSequence :: u HexDigit HexDigit HexDigit HexDigit", ExpectedException = typeof(Exception))]
        public void EscapeSequenceUnicodeEscapeSequenceUHexDigitHexDigitHexDigitHexDigit(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.8.4_A7.2_T1.js", Description = "UnicodeEscapeSequence :: u HexDigit (one, two or three time) is incorrect", ExpectedException = typeof(Exception))]
        [TestCase("S7.8.4_A7.2_T2.js", Description = "UnicodeEscapeSequence :: u HexDigit (one, two or three time) is incorrect", ExpectedException = typeof(Exception))]
        [TestCase("S7.8.4_A7.2_T3.js", Description = "UnicodeEscapeSequence :: u HexDigit (one, two or three time) is incorrect", ExpectedException = typeof(Exception))]
        [TestCase("S7.8.4_A7.2_T4.js", Description = "UnicodeEscapeSequence :: u HexDigit (one, two or three time) is incorrect", ExpectedException = typeof(Exception))]
        [TestCase("S7.8.4_A7.2_T5.js", Description = "UnicodeEscapeSequence :: u HexDigit (one, two or three time) is incorrect", ExpectedException = typeof(Exception))]
        [TestCase("S7.8.4_A7.2_T6.js", Description = "UnicodeEscapeSequence :: u HexDigit (one, two or three time) is incorrect", ExpectedException = typeof(Exception))]
        public void UnicodeEscapeSequenceUHexDigitOneTwoOrThreeTimeIsIncorrect(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.8.4_A7.3_T1.js", Description = "\\u HexDigit HexDigit HexDigit HexDigit DoubleStringCharacter")]
        public void UHexDigitHexDigitHexDigitHexDigitDoubleStringCharacter(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.8.4_A7.4_T1.js", Description = "UnicodeEscapeSequence \\U HexDigit HexDigit HexDigit HexDigit is incorrect", ExpectedException = typeof(Exception))]
        [TestCase("S7.8.4_A7.4_T2.js", Description = "UnicodeEscapeSequence \\U HexDigit HexDigit HexDigit HexDigit is incorrect", ExpectedException = typeof(Exception))]
        public void UnicodeEscapeSequenceUHexDigitHexDigitHexDigitHexDigitIsIncorrect(string file)
        {
            RunFile(file);
        }
    }
}