// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.LexicalConventions
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class WhiteSpaceTests : SputnikTestFixture
    {
        public WhiteSpaceTests()
            : base(@"Conformance\07_Lexical_Conventions\7.2_White_Space")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.5")]
        [TestCase("S7.2_A1.1_T1.js", Description = "HORIZONTAL TAB (U+0009) between any two tokens is allowed")]
        [TestCase("S7.2_A1.1_T2.js", Description = "HORIZONTAL TAB (U+0009) between any two tokens is allowed")]
        public void HORIZONTALTABU0009BetweenAnyTwoTokensIsAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.5")]
        [TestCase("S7.2_A1.2_T1.js", Description = "VERTICAL TAB (U+000B) between any two tokens is allowed")]
        [TestCase("S7.2_A1.2_T2.js", Description = "VERTICAL TAB (U+000B) between any two tokens is allowed")]
        public void VERTICALTABU000BBetweenAnyTwoTokensIsAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.5")]
        [TestCase("S7.2_A1.3_T1.js", Description = "FORM FEED (U+000C) between any two tokens is allowed")]
        [TestCase("S7.2_A1.3_T2.js", Description = "FORM FEED (U+000C) between any two tokens is allowed")]
        public void FORMFEEDU000CBetweenAnyTwoTokensIsAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.5")]
        [TestCase("S7.2_A1.4_T1.js", Description = "SPACE (U+0020) between any two tokens is allowed")]
        [TestCase("S7.2_A1.4_T2.js", Description = "SPACE (U+0020) between any two tokens is allowed")]
        public void SPACEU0020BetweenAnyTwoTokensIsAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.5")]
        [TestCase("S7.2_A1.5_T1.js", Description = "NO-BREAK SPACE (U+00A0) between any two tokens is allowed")]
        [TestCase("S7.2_A1.5_T2.js", Description = "NO-BREAK SPACE (U+00A0) between any two tokens is allowed")]
        public void NOBREAKSPACEU00A0BetweenAnyTwoTokensIsAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.2_A2.1_T1.js", Description = "HORIZONTAL TAB (U+0009) may occur within strings")]
        [TestCase("S7.2_A2.1_T2.js", Description = "HORIZONTAL TAB (U+0009) may occur within strings")]
        public void HORIZONTALTABU0009MayOccurWithinStrings(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.2_A2.2_T1.js", Description = "VERTICAL TAB (U+000B) may occur within strings")]
        [TestCase("S7.2_A2.2_T2.js", Description = "VERTICAL TAB (U+000B) may occur within strings")]
        public void VERTICALTABU000BMayOccurWithinStrings(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.2_A2.3_T1.js", Description = "FORM FEED (U+000C) may occur within strings")]
        [TestCase("S7.2_A2.3_T2.js", Description = "FORM FEED (U+000C) may occur within strings")]
        public void FORMFEEDU000CMayOccurWithinStrings(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.2_A2.4_T1.js", Description = "SPACE (U+0020) may occur within strings")]
        [TestCase("S7.2_A2.4_T2.js", Description = "SPACE (U+0020) may occur within strings")]
        public void SPACEU0020MayOccurWithinStrings(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.8.4")]
        [TestCase("S7.2_A2.5_T1.js", Description = "NO-BREAK SPACE (U+00A0) may occur within strings")]
        [TestCase("S7.2_A2.5_T2.js", Description = "NO-BREAK SPACE (U+00A0) may occur within strings")]
        public void NOBREAKSPACEU00A0MayOccurWithinStrings(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.4")]
        [TestCase("S7.2_A3.1_T1.js", Description = "Single line comment can contain HORIZONTAL TAB (U+0009)")]
        [TestCase("S7.2_A3.1_T2.js", Description = "Single line comment can contain HORIZONTAL TAB (U+0009)")]
        public void SingleLineCommentCanContainHORIZONTALTABU0009(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.4")]
        [TestCase("S7.2_A3.2_T1.js", Description = "Single line comment can contain VERTICAL TAB (U+000B)")]
        [TestCase("S7.2_A3.2_T2.js", Description = "Single line comment can contain VERTICAL TAB (U+000B)")]
        public void SingleLineCommentCanContainVERTICALTABU000B(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.4")]
        [TestCase("S7.2_A3.3_T1.js", Description = "Single line comment can contain FORM FEED (U+000C)")]
        [TestCase("S7.2_A3.3_T2.js", Description = "Single line comment can contain FORM FEED (U+000C)")]
        public void SingleLineCommentCanContainFORMFEEDU000C(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.4")]
        [TestCase("S7.2_A3.4_T1.js", Description = "Single line comment can contain SPACE (U+0020)")]
        [TestCase("S7.2_A3.4_T2.js", Description = "Single line comment can contain SPACE (U+0020)")]
        public void SingleLineCommentCanContainSPACEU0020(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.4")]
        [TestCase("S7.2_A3.5_T1.js", Description = "Single line comment can contain NO-BREAK SPACE (U+00A0)")]
        [TestCase("S7.2_A3.5_T2.js", Description = "Single line comment can contain NO-BREAK SPACE (U+00A0)")]
        public void SingleLineCommentCanContainNOBREAKSPACEU00A0(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.4")]
        [TestCase("S7.2_A4.1_T1.js", Description = "Multi line comment can contain HORIZONTAL TAB (U+0009)")]
        [TestCase("S7.2_A4.1_T2.js", Description = "Multi line comment can contain HORIZONTAL TAB (U+0009)")]
        public void MultiLineCommentCanContainHORIZONTALTABU0009(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.4")]
        [TestCase("S7.2_A4.2_T1.js", Description = "Multi line comment can contain VERTICAL TAB (U+000B)")]
        [TestCase("S7.2_A4.2_T2.js", Description = "Multi line comment can contain VERTICAL TAB (U+000B)")]
        public void MultiLineCommentCanContainVERTICALTABU000B(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.4")]
        [TestCase("S7.2_A4.3_T1.js", Description = "Multi line comment can contain FORM FEED (U+000C)")]
        [TestCase("S7.2_A4.3_T2.js", Description = "Multi line comment can contain FORM FEED (U+000C)")]
        public void MultiLineCommentCanContainFORMFEEDU000C(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.4")]
        [TestCase("S7.2_A4.4_T1.js", Description = "Multi line comment can contain SPACE (U+0020)")]
        [TestCase("S7.2_A4.4_T2.js", Description = "Multi line comment can contain SPACE (U+0020)")]
        public void MultiLineCommentCanContainSPACEU0020(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.2")]
        [Category("ECMA 7.4")]
        [TestCase("S7.2_A4.5_T1.js", Description = "Multi line comment can contain NO-BREAK SPACE (U+00A0)")]
        [TestCase("S7.2_A4.5_T2.js", Description = "Multi line comment can contain NO-BREAK SPACE (U+00A0)")]
        public void MultiLineCommentCanContainNOBREAKSPACEU00A0(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.2")]
        [TestCase("S7.2_A5_T1.js", Description = "White space cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits", ExpectedException = typeof(Exception))]
        [TestCase("S7.2_A5_T2.js", Description = "White space cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits", ExpectedException = typeof(Exception))]
        [TestCase("S7.2_A5_T3.js", Description = "White space cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits", ExpectedException = typeof(Exception))]
        [TestCase("S7.2_A5_T4.js", Description = "White space cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits", ExpectedException = typeof(Exception))]
        [TestCase("S7.2_A5_T5.js", Description = "White space cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits", ExpectedException = typeof(Exception))]
        public void WhiteSpaceCannotBeExpressedAsAUnicodeEscapeSequenceConsistingOfSixCharactersNamelyUPlusFourHexadecimalDigits(string file)
        {
            RunFile(file);
        }
    }
}