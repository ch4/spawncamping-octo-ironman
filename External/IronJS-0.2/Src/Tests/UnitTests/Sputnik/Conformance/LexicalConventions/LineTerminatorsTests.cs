// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.LexicalConventions
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class LineTerminatorsTests : SputnikTestFixture
    {
        public LineTerminatorsTests()
            : base(@"Conformance\07_Lexical_Conventions\7.3_Line_Terminators")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.3")]
        [TestCase("S7.3_A1.1_T1.js", Description = "LINE FEED (U+000A) may occur between any two tokens")]
        [TestCase("S7.3_A1.1_T2.js", Description = "LINE FEED (U+000A) may occur between any two tokens")]
        public void LINEFEEDU000AMayOccurBetweenAnyTwoTokens(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.3")]
        [TestCase("S7.3_A1.2_T1.js", Description = "CARRIAGE RETURN (U+000D) may occur between any two tokens")]
        [TestCase("S7.3_A1.2_T2.js", Description = "CARRIAGE RETURN (U+000D) may occur between any two tokens")]
        public void CARRIAGERETURNU000DMayOccurBetweenAnyTwoTokens(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.3")]
        [TestCase("S7.3_A1.3.js", Description = "LINE SEPARATOR (U+2028) may occur between any two tokens")]
        public void LINESEPARATORU2028MayOccurBetweenAnyTwoTokens(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.3")]
        [TestCase("S7.3_A1.4.js", Description = "PARAGRAPH SEPARATOR (U+2029) may occur between any two tokens")]
        public void PARAGRAPHSEPARATORU2029MayOccurBetweenAnyTwoTokens(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.3")]
        [TestCase("S7.3_A2.1_T1.js", Description = "LINE FEED (U+000A) within strings is not allowed", ExpectedException = typeof(Exception))]
        [TestCase("S7.3_A2.1_T2.js", Description = "LINE FEED (U+000A) within strings is not allowed", ExpectedException = typeof(Exception))]
        public void LINEFEEDU000AWithinStringsIsNotAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.3")]
        [TestCase("S7.3_A2.2_T1.js", Description = "CARRIAGE RETURN (U+000D) within strings is not allowed", ExpectedException = typeof(Exception))]
        [TestCase("S7.3_A2.2_T2.js", Description = "CARRIAGE RETURN (U+000D) within strings is not allowed", ExpectedException = typeof(Exception))]
        public void CARRIAGERETURNU000DWithinStringsIsNotAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.3")]
        [TestCase("S7.3_A2.3.js", Description = "LINE SEPARATOR (U+2028) within strings is not allowed", ExpectedException = typeof(Exception))]
        public void LINESEPARATORU2028WithinStringsIsNotAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.3")]
        [TestCase("S7.3_A2.4.js", Description = "PARAGRAPH SEPARATOR (U+2029) within strings is not allowed", ExpectedException = typeof(Exception))]
        public void PARAGRAPHSEPARATORU2029WithinStringsIsNotAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.3")]
        [Category("ECMA 7.4")]
        [TestCase("S7.3_A3.1_T1.js", Description = "Single line comments can not contain LINE FEED (U+000A) inside", ExpectedException = typeof(Exception))]
        [TestCase("S7.3_A3.1_T2.js", Description = "Single line comments can not contain LINE FEED (U+000A) inside", ExpectedException = typeof(Exception))]
        [TestCase("S7.3_A3.1_T3.js", Description = "Single line comments can not contain LINE FEED (U+000A) inside", ExpectedException = typeof(Exception))]
        public void SingleLineCommentsCanNotContainLINEFEEDU000AInside(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.3")]
        [Category("ECMA 7.4")]
        [TestCase("S7.3_A3.2_T1.js", Description = "Single line comments can not contain CARRIAGE RETURN (U+000D) inside", ExpectedException = typeof(Exception))]
        [TestCase("S7.3_A3.2_T2.js", Description = "Single line comments can not contain CARRIAGE RETURN (U+000D) inside", ExpectedException = typeof(Exception))]
        [TestCase("S7.3_A3.2_T3.js", Description = "Single line comments can not contain CARRIAGE RETURN (U+000D) inside", ExpectedException = typeof(Exception))]
        public void SingleLineCommentsCanNotContainCARRIAGERETURNU000DInside(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.3")]
        [Category("ECMA 7.4")]
        [TestCase("S7.3_A3.3_T1.js", Description = "Single line comments can not contain LINE SEPARATOR (U+2028) inside", ExpectedException = typeof(Exception))]
        [TestCase("S7.3_A3.3_T2.js", Description = "Single line comments can not contain LINE SEPARATOR (U+2028) inside", ExpectedException = typeof(Exception))]
        public void SingleLineCommentsCanNotContainLINESEPARATORU2028Inside(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.3")]
        [Category("ECMA 7.4")]
        [TestCase("S7.3_A3.4_T1.js", Description = "Single line comments can not contain PARAGRAPH SEPARATOR (U+2029) inside", ExpectedException = typeof(Exception))]
        [TestCase("S7.3_A3.4_T2.js", Description = "Single line comments can not contain PARAGRAPH SEPARATOR (U+2029) inside", ExpectedException = typeof(Exception))]
        public void SingleLineCommentsCanNotContainPARAGRAPHSEPARATORU2029Inside(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.3")]
        [Category("ECMA 7.4")]
        [TestCase("S7.3_A4_T1.js", Description = "Single line comments can contain Line Terminator at the end of line")]
        [TestCase("S7.3_A4_T2.js", Description = "Single line comments can contain Line Terminator at the end of line")]
        [TestCase("S7.3_A4_T3.js", Description = "Single line comments can contain Line Terminator at the end of line")]
        [TestCase("S7.3_A4_T4.js", Description = "Single line comments can contain Line Terminator at the end of line")]
        public void SingleLineCommentsCanContainLineTerminatorAtTheEndOfLine(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.3")]
        [Category("ECMA 7.4")]
        [TestCase("S7.3_A5.1_T1.js", Description = "Multi line comment can contain LINE FEED (U+000A)")]
        [TestCase("S7.3_A5.1_T2.js", Description = "Multi line comment can contain LINE FEED (U+000A)")]
        public void MultiLineCommentCanContainLINEFEEDU000A(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.3")]
        [Category("ECMA 7.4")]
        [TestCase("S7.3_A5.2_T1.js", Description = "Multi line comment can contain CARRIAGE RETURN (U+000D)")]
        [TestCase("S7.3_A5.2_T2.js", Description = "Multi line comment can contain CARRIAGE RETURN (U+000D)")]
        public void MultiLineCommentCanContainCARRIAGERETURNU000D(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.3")]
        [Category("ECMA 7.4")]
        [TestCase("S7.3_A5.3.js", Description = "Multi line comment can contain LINE SEPARATOR (U+2028)")]
        public void MultiLineCommentCanContainLINESEPARATORU2028(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.3")]
        [Category("ECMA 7.4")]
        [TestCase("S7.3_A5.4.js", Description = "Multi line comment can contain LINE SEPARATOR (U+2029)")]
        public void MultiLineCommentCanContainLINESEPARATORU2029(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.3")]
        [TestCase("S7.3_A6_T1.js", Description = "Line Terminator cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits", ExpectedException = typeof(Exception))]
        [TestCase("S7.3_A6_T2.js", Description = "Line Terminator cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits", ExpectedException = typeof(Exception))]
        [TestCase("S7.3_A6_T3.js", Description = "Line Terminator cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits", ExpectedException = typeof(Exception))]
        [TestCase("S7.3_A6_T4.js", Description = "Line Terminator cannot be expressed as a Unicode escape sequence consisting of six characters, namely \\u plus four hexadecimal digits", ExpectedException = typeof(Exception))]
        public void LineTerminatorCannotBeExpressedAsAUnicodeEscapeSequenceConsistingOfSixCharactersNamelyUPlusFourHexadecimalDigits(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.3")]
        [TestCase("S7.3_A7_T1.js", Description = "Line Terminators between operators are allowed")]
        [TestCase("S7.3_A7_T2.js", Description = "Line Terminators between operators are allowed")]
        [TestCase("S7.3_A7_T3.js", Description = "Line Terminators between operators are allowed")]
        [TestCase("S7.3_A7_T4.js", Description = "Line Terminators between operators are allowed")]
        [TestCase("S7.3_A7_T5.js", Description = "Line Terminators between operators are allowed")]
        [TestCase("S7.3_A7_T6.js", Description = "Line Terminators between operators are allowed")]
        [TestCase("S7.3_A7_T7.js", Description = "Line Terminators between operators are allowed")]
        [TestCase("S7.3_A7_T8.js", Description = "Line Terminators between operators are allowed")]
        public void LineTerminatorsBetweenOperatorsAreAllowed(string file)
        {
            RunFile(file);
        }
    }
}