// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.LexicalConventions.Tokens
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class KeywordsTests : SputnikTestFixture
    {
        public KeywordsTests()
            : base(@"Conformance\07_Lexical_Conventions\7.5_Tokens\7.5.2_Keywords")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.1.js", Description = "The \"break\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheBreakTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.10.js", Description = "The \"for\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheForTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.11.js", Description = "The \"function\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheFunctionTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.12.js", Description = "The \"if\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheIfTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.13.js", Description = "The \"in\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheInTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.14.js", Description = "The \"instanceof\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheInstanceofTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.15.js", Description = "The \"new\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheNewTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.16.js", Description = "The \"return\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheReturnTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.17.js", Description = "The \"switch\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheSwitchTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.18.js", Description = "The \"this\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheThisTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.19.js", Description = "The \"throw\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheThrowTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.2.js", Description = "The \"case\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheCaseTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.20.js", Description = "The \"try\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheTryTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.21.js", Description = "The \"typeof\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheTypeofTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.22.js", Description = "The \"var\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheVarTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.23.js", Description = "The \"void\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheVoidTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.24.js", Description = "The \"while\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheWhileTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.25.js", Description = "The \"with\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheWithTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.3.js", Description = "The \"catch\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheCatchTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.4.js", Description = "The \"continue\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheContinueTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.5.js", Description = "The \"default\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheDefaultTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.6.js", Description = "The \"delete\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheDeleteTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.7.js", Description = "The \"do\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheDoTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.8.js", Description = "The \"else\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheElseTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.2")]
        [TestCase("S7.5.2_A1.9.js", Description = "The \"finally\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheFinallyTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }
    }
}