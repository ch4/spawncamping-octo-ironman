// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.LexicalConventions.AutomaticSemicolonInsertion
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class AutomaticSemicolonInsertionTests : SputnikTestFixture
    {
        public AutomaticSemicolonInsertionTests()
            : base(@"Conformance\07_Lexical_Conventions\7.9_Automatic_Semicolon_Insertion")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.12")]
        [Category("ECMA 12.7")]
        [Category("ECMA 7.9")]
        [TestCase("S7.9_A1.js", Description = "Check Continue Statement for automatic semicolon insertion")]
        public void CheckContinueStatementForAutomaticSemicolonInsertion(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.9")]
        [TestCase("S7.9_A10_T1.js", Description = "Check {} for automatic semicolon insertion")]
        [TestCase("S7.9_A10_T10.js", Description = "Check {} for automatic semicolon insertion")]
        [TestCase("S7.9_A10_T11.js", Description = "Check {} for automatic semicolon insertion")]
        [TestCase("S7.9_A10_T12.js", Description = "Check {} for automatic semicolon insertion")]
        [TestCase("S7.9_A10_T2.js", Description = "Check {} for automatic semicolon insertion", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A10_T3.js", Description = "Check {} for automatic semicolon insertion")]
        [TestCase("S7.9_A10_T4.js", Description = "Check {} for automatic semicolon insertion", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A10_T5.js", Description = "Check {} for automatic semicolon insertion")]
        [TestCase("S7.9_A10_T6.js", Description = "Check {} for automatic semicolon insertion", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A10_T7.js", Description = "Check {} for automatic semicolon insertion")]
        [TestCase("S7.9_A10_T8.js", Description = "Check {} for automatic semicolon insertion", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A10_T9.js", Description = "Check {} for automatic semicolon insertion")]
        public void CheckForAutomaticSemicolonInsertion(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.5")]
        [Category("ECMA 7.9")]
        [TestCase("S7.9_A11_T1.js", Description = "Check If Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A11_T10.js", Description = "Check If Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A11_T11.js", Description = "Check If Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A11_T2.js", Description = "Check If Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A11_T3.js", Description = "Check If Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A11_T4.js", Description = "Check If Statement for automatic semicolon insertion", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A11_T5.js", Description = "Check If Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A11_T6.js", Description = "Check If Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A11_T7.js", Description = "Check If Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A11_T8.js", Description = "Check If Statement for automatic semicolon insertion", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A11_T9.js", Description = "Check If Statement for automatic semicolon insertion")]
        public void CheckIfStatementForAutomaticSemicolonInsertion(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.12")]
        [Category("ECMA 12.8")]
        [Category("ECMA 7.9")]
        [TestCase("S7.9_A2.js", Description = "Check Break Statement for automatic semicolon insertion")]
        public void CheckBreakStatementForAutomaticSemicolonInsertion(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.9")]
        [Category("ECMA 7.9")]
        [TestCase("S7.9_A3.js", Description = "Check Return Statement for automatic semicolon insertion")]
        public void CheckReturnStatementForAutomaticSemicolonInsertion(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.13")]
        [Category("ECMA 7.9")]
        [TestCase("S7.9_A4.js", Description = "Check Throw Statement for automatic semicolon insertion", ExpectedException = typeof(Exception))]
        public void CheckThrowStatementForAutomaticSemicolonInsertion(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.13.1")]
        [Category("ECMA 12.4")]
        [Category("ECMA 7.9")]
        [TestCase("S7.9_A5.1_T1.js", Description = "Check Postfix Increment Operator for automatic semicolon insertion", ExpectedException = typeof(Exception))]
        public void CheckPostfixIncrementOperatorForAutomaticSemicolonInsertion(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.13.1")]
        [Category("ECMA 12.4")]
        [Category("ECMA 7.9")]
        [TestCase("S7.9_A5.2_T1.js", Description = "Check Prefix Increment Operator for automatic semicolon insertion")]
        public void CheckPrefixIncrementOperatorForAutomaticSemicolonInsertion(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.13.2")]
        [Category("ECMA 12.4")]
        [Category("ECMA 7.9")]
        [TestCase("S7.9_A5.3_T1.js", Description = "Check Postfix Decrement Operator for automatic semicolon insertion", ExpectedException = typeof(Exception))]
        public void CheckPostfixDecrementOperatorForAutomaticSemicolonInsertion(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.13.2")]
        [Category("ECMA 12.4")]
        [Category("ECMA 7.9")]
        [TestCase("S7.9_A5.4_T1.js", Description = "Check Prefix Decrement Operator for automatic semicolon insertion")]
        public void CheckPrefixDecrementOperatorForAutomaticSemicolonInsertion(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.2.5")]
        [Category("ECMA 12.4")]
        [Category("ECMA 7.9")]
        [TestCase("S7.9_A5.5_T1.js", Description = "Check Function Expression for automatic semicolon insertion")]
        [TestCase("S7.9_A5.5_T2.js", Description = "Check Function Expression for automatic semicolon insertion")]
        [TestCase("S7.9_A5.5_T3.js", Description = "Check Function Expression for automatic semicolon insertion")]
        [TestCase("S7.9_A5.5_T4.js", Description = "Check Function Expression for automatic semicolon insertion")]
        [TestCase("S7.9_A5.5_T5.js", Description = "Check Function Expression for automatic semicolon insertion")]
        public void CheckFunctionExpressionForAutomaticSemicolonInsertion(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.3")]
        [Category("ECMA 11.4.4")]
        [Category("ECMA 11.4.5")]
        [Category("ECMA 12.4")]
        [Category("ECMA 7.9")]
        [TestCase("S7.9_A5.6_T1.js", Description = "Since LineTerminator between Postfix Increment/Decrement Operator(I/DO) and operand is not allowed but between Prefix I/DO and operand admitted, Postfix I/DO in combination with prefix I/DO after automatic semicolon insertion gives valid result")]
        [TestCase("S7.9_A5.6_T2.js", Description = "Since LineTerminator between Postfix Increment/Decrement Operator(I/DO) and operand is not allowed but between Prefix I/DO and operand admitted, Postfix I/DO in combination with prefix I/DO after automatic semicolon insertion gives valid result")]
        public void SinceLineTerminatorBetweenPostfixIncrementDecrementOperatorIDOAndOperandIsNotAllowedButBetweenPrefixIDOAndOperandAdmittedPostfixIDOInCombinationWithPrefixIDOAfterAutomaticSemicolonInsertionGivesValidResult(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.9")]
        [TestCase("S7.9_A5.7_T1.js", Description = "Since LineTerminator(LT) between Postfix Increment/Decrement Operator(I/DO) and operand is not allowed, two IO(just as two DO and their combination) between two references separated by [LT] after automatic semicolon insertion lead to syntax error", ExpectedException = typeof(Exception))]
        public void SinceLineTerminatorLTBetweenPostfixIncrementDecrementOperatorIDOAndOperandIsNotAllowedTwoIOJustAsTwoDOAndTheirCombinationBetweenTwoReferencesSeparatedByLTAfterAutomaticSemicolonInsertionLeadToSyntaxError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.9")]
        [TestCase("S7.9_A5.8_T1.js", Description = "Since LineTerminator(LT) between Postfix Increment/Decrement Operator(I/DO) and operand is admitted, Additive/Substract Operator(A/SO) in combination with I/DO separated by LT or white spaces after automatic semicolon insertion gives valid result")]
        public void SinceLineTerminatorLTBetweenPostfixIncrementDecrementOperatorIDOAndOperandIsAdmittedAdditiveSubstractOperatorASOInCombinationWithIDOSeparatedByLTOrWhiteSpacesAfterAutomaticSemicolonInsertionGivesValidResult(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.9")]
        [TestCase("S7.9_A5.9_T1.js", Description = "Additive/Substract Operator(A/SO) in combination with itself separated by LT or white spaces after automatic semicolon insertion gives valid result")]
        public void AdditiveSubstractOperatorASOInCombinationWithItselfSeparatedByLTOrWhiteSpacesAfterAutomaticSemicolonInsertionGivesValidResult(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.3")]
        [Category("ECMA 7.9")]
        [TestCase("S7.9_A6.1_T1.js", Description = "Check For Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A6.1_T10.js", Description = "Check For Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A6.1_T11.js", Description = "Check For Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A6.1_T12.js", Description = "Check For Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A6.1_T13.js", Description = "Check For Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A6.1_T2.js", Description = "Check For Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A6.1_T3.js", Description = "Check For Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A6.1_T4.js", Description = "Check For Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A6.1_T5.js", Description = "Check For Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A6.1_T6.js", Description = "Check For Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A6.1_T7.js", Description = "Check For Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A6.1_T8.js", Description = "Check For Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A6.1_T9.js", Description = "Check For Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A6.4_T1.js", Description = "Check For Statement for automatic semicolon insertion", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A6.4_T2.js", Description = "Check For Statement for automatic semicolon insertion", ExpectedException = typeof(Exception))]
        public void CheckForStatementForAutomaticSemicolonInsertion(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.3")]
        [Category("ECMA 7.9")]
        [TestCase("S7.9_A6.2_T1.js", Description = "Check For Statement for automatic semicolon insertion. If automatic insertion semicolon would become one of the two semicolons in the header of a For Statement. Use one semicolon", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A6.2_T10.js", Description = "Check For Statement for automatic semicolon insertion. If automatic insertion semicolon would become one of the two semicolons in the header of a For Statement. Use one semicolon", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A6.2_T2.js", Description = "Check For Statement for automatic semicolon insertion. If automatic insertion semicolon would become one of the two semicolons in the header of a For Statement. Use one semicolon", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A6.2_T3.js", Description = "Check For Statement for automatic semicolon insertion. If automatic insertion semicolon would become one of the two semicolons in the header of a For Statement. Use one semicolon", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A6.2_T4.js", Description = "Check For Statement for automatic semicolon insertion. If automatic insertion semicolon would become one of the two semicolons in the header of a For Statement. Use one semicolon", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A6.2_T5.js", Description = "Check For Statement for automatic semicolon insertion. If automatic insertion semicolon would become one of the two semicolons in the header of a For Statement. Use one semicolon", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A6.2_T6.js", Description = "Check For Statement for automatic semicolon insertion. If automatic insertion semicolon would become one of the two semicolons in the header of a For Statement. Use one semicolon", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A6.2_T7.js", Description = "Check For Statement for automatic semicolon insertion. If automatic insertion semicolon would become one of the two semicolons in the header of a For Statement. Use one semicolon", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A6.2_T8.js", Description = "Check For Statement for automatic semicolon insertion. If automatic insertion semicolon would become one of the two semicolons in the header of a For Statement. Use one semicolon", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A6.2_T9.js", Description = "Check For Statement for automatic semicolon insertion. If automatic insertion semicolon would become one of the two semicolons in the header of a For Statement. Use one semicolon", ExpectedException = typeof(Exception))]
        public void CheckForStatementForAutomaticSemicolonInsertionIfAutomaticInsertionSemicolonWouldBecomeOneOfTheTwoSemicolonsInTheHeaderOfAForStatementUseOneSemicolon(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.3")]
        [Category("ECMA 7.9")]
        [TestCase("S7.9_A6.3_T1.js", Description = "Check For Statement for automatic semicolon insertion. If automatic insertion semicolon would become one of the two semicolons in the header of a For Statement. Don`t use semicolons", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A6.3_T2.js", Description = "Check For Statement for automatic semicolon insertion. If automatic insertion semicolon would become one of the two semicolons in the header of a For Statement. Don`t use semicolons", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A6.3_T3.js", Description = "Check For Statement for automatic semicolon insertion. If automatic insertion semicolon would become one of the two semicolons in the header of a For Statement. Don`t use semicolons", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A6.3_T4.js", Description = "Check For Statement for automatic semicolon insertion. If automatic insertion semicolon would become one of the two semicolons in the header of a For Statement. Don`t use semicolons", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A6.3_T5.js", Description = "Check For Statement for automatic semicolon insertion. If automatic insertion semicolon would become one of the two semicolons in the header of a For Statement. Don`t use semicolons", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A6.3_T6.js", Description = "Check For Statement for automatic semicolon insertion. If automatic insertion semicolon would become one of the two semicolons in the header of a For Statement. Don`t use semicolons", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A6.3_T7.js", Description = "Check For Statement for automatic semicolon insertion. If automatic insertion semicolon would become one of the two semicolons in the header of a For Statement. Don`t use semicolons", ExpectedException = typeof(Exception))]
        public void CheckForStatementForAutomaticSemicolonInsertionIfAutomaticInsertionSemicolonWouldBecomeOneOfTheTwoSemicolonsInTheHeaderOfAForStatementDonTUseSemicolons(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.2")]
        [Category("ECMA 7.9")]
        [TestCase("S7.9_A7_T1.js", Description = "Check Var Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A7_T2.js", Description = "Check Var Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A7_T3.js", Description = "Check Var Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A7_T4.js", Description = "Check Var Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A7_T5.js", Description = "Check Var Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A7_T6.js", Description = "Check Var Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A7_T7.js", Description = "Check Var Statement for automatic semicolon insertion", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A7_T8.js", Description = "Check Var Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A7_T9.js", Description = "Check Var Statement for automatic semicolon insertion")]
        public void CheckVarStatementForAutomaticSemicolonInsertion(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.4")]
        [Category("ECMA 7.9")]
        [TestCase("S7.9_A8_T1.js", Description = "Check Empty Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A8_T2.js", Description = "Check Empty Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A8_T3.js", Description = "Check Empty Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A8_T4.js", Description = "Check Empty Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A8_T5.js", Description = "Check Empty Statement for automatic semicolon insertion")]
        public void CheckEmptyStatementForAutomaticSemicolonInsertion(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.1")]
        [Category("ECMA 7.9")]
        [TestCase("S7.9_A9_T1.js", Description = "Check Do-While Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A9_T2.js", Description = "Check Do-While Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A9_T3.js", Description = "Check Do-While Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A9_T4.js", Description = "Check Do-While Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A9_T5.js", Description = "Check Do-While Statement for automatic semicolon insertion")]
        [TestCase("S7.9_A9_T6.js", Description = "Check Do-While Statement for automatic semicolon insertion", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A9_T7.js", Description = "Check Do-While Statement for automatic semicolon insertion", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A9_T8.js", Description = "Check Do-While Statement for automatic semicolon insertion", ExpectedException = typeof(Exception))]
        [TestCase("S7.9_A9_T9.js", Description = "Check Do-While Statement for automatic semicolon insertion")]
        public void CheckDoWhileStatementForAutomaticSemicolonInsertion(string file)
        {
            RunFile(file);
        }
    }
}