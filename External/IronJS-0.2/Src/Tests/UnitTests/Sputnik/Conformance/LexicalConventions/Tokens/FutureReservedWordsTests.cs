// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.LexicalConventions.Tokens
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class FutureReservedWordsTests : SputnikTestFixture
    {
        public FutureReservedWordsTests()
            : base(@"Conformance\07_Lexical_Conventions\7.5_Tokens\7.5.3_Future_Reserved_Words")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.1.js", Description = "The \"abstract\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheAbstractTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.10.js", Description = "The \"export\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheExportTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.11.js", Description = "The \"extends\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheExtendsTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.12.js", Description = "The \"final\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheFinalTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.13.js", Description = "The \"float\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheFloatTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.14.js", Description = "The \"goto\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheGotoTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.15.js", Description = "The \"implements\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheImplementsTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.16.js", Description = "The \"import\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheImportTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.17.js", Description = "The \"int\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheIntTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.18.js", Description = "The \"interface\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheInterfaceTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.19.js", Description = "The \"long\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheLongTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.2.js", Description = "The \"boolean\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheBooleanTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.20.js", Description = "The \"native\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheNativeTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.21.js", Description = "The \"package\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void ThePackageTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.22.js", Description = "The \"private\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void ThePrivateTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.23.js", Description = "The \"protected\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheProtectedTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.24.js", Description = "The \"public\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void ThePublicTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.25.js", Description = "The \"short\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheShortTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.26.js", Description = "The \"static\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheStaticTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.27.js", Description = "The \"super\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheSuperTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.28.js", Description = "The \"synchronized\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheSynchronizedTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.29.js", Description = "The \"throws\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheThrowsTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.3.js", Description = "The \"byte\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheByteTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.30.js", Description = "The \"transient\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheTransientTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.31.js", Description = "The \"volatile\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheVolatileTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.4.js", Description = "The \"char\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheCharTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.5.js", Description = "The \"class\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheClassTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.6.js", Description = "The \"const\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheConstTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.7.js", Description = "The \"debugger\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheDebuggerTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.8.js", Description = "The \"double\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheDoubleTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.5.3")]
        [TestCase("S7.5.3_A1.9.js", Description = "The \"enum\" token can not be used as identifier", ExpectedException = typeof(Exception))]
        public void TheEnumTokenCanNotBeUsedAsIdentifier(string file)
        {
            RunFile(file);
        }
    }
}