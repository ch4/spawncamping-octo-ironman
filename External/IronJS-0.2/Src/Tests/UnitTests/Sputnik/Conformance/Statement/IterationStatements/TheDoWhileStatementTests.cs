// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Statement.IterationStatements
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class TheDoWhileStatementTests : SputnikTestFixture
    {
        public TheDoWhileStatementTests()
            : base(@"Conformance\12_Statement\12.6_Iteration_Statements\12.6.1_The_do_while_Statement")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.1")]
        [TestCase("S12.6.1_A1.js", Description = "When the production \"do Statement while ( Expression )\" is evaluated, Statement is evaluated first")]
        public void WhenTheProductionDoStatementWhileExpressionIsEvaluatedStatementIsEvaluatedFirst(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.1")]
        [Category("ECMA 13")]
        [TestCase("S12.6.1_A10.js", Description = "FunctionExpression within a \"do-while\" statement is allowed, but no function with the given name will appear in the global context")]
        public void FunctionExpressionWithinADoWhileStatementIsAllowedButNoFunctionWithTheGivenNameWillAppearInTheGlobalContext(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.1")]
        [TestCase("S12.6.1_A11.js", Description = "Block \"{}\" in a \"do-while\" Expression is evaluated to true")]
        public void BlockInADoWhileExpressionIsEvaluatedToTrue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.1")]
        [TestCase("S12.6.1_A12.js", Description = "Any statement within \"do-while\" construction must be a compound", ExpectedException = typeof(Exception))]
        public void AnyStatementWithinDoWhileConstructionMustBeACompound(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.1")]
        [Category("ECMA 13")]
        [TestCase("S12.6.1_A13_T1.js", Description = "FunctionDeclaration within a \"do-while\" Block is not allowed", ExpectedException = typeof(Exception))]
        [TestCase("S12.6.1_A13_T2.js", Description = "FunctionDeclaration within a \"do-while\" Block is not allowed", ExpectedException = typeof(Exception))]
        [TestCase("S12.6.1_A13_T3.js", Description = "FunctionDeclaration within a \"do-while\" Block is not allowed", ExpectedException = typeof(Exception))]
        public void FunctionDeclarationWithinADoWhileBlockIsNotAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.1")]
        [Category("ECMA 13")]
        [TestCase("S12.6.1_A14_T1.js", Description = "FunctionExpression within a \"do-while\" Expression is allowed")]
        [TestCase("S12.6.1_A14_T2.js", Description = "FunctionExpression within a \"do-while\" Expression is allowed")]
        public void FunctionExpressionWithinADoWhileExpressionIsAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.1")]
        [TestCase("S12.6.1_A15.js", Description = "Block within a \"do-while\" Expression is not allowed", ExpectedException = typeof(Exception))]
        public void BlockWithinADoWhileExpressionIsNotAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.1")]
        [TestCase("S12.6.1_A2.js", Description = "While evaluating \"do Statement while ( Expression )\", Statement is evaluated first and only after it is done Expression is checked")]
        public void WhileEvaluatingDoStatementWhileExpressionStatementIsEvaluatedFirstAndOnlyAfterItIsDoneExpressionIsChecked(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.1")]
        [TestCase("S12.6.1_A3.js", Description = "When the production \"do Statement while ( Expression )\" is evaluated, then (normal, V, empty) is returned")]
        public void WhenTheProductionDoStatementWhileExpressionIsEvaluatedThenNormalVEmptyIsReturned(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.2")]
        [Category("ECMA 12.6.1")]
        [Category("ECMA 12.8")]
        [TestCase("S12.6.1_A4_T1.js", Description = "\"break\" within a \"do-while\" Statement is allowed and performed as described in 12.8")]
        [TestCase("S12.6.1_A4_T2.js", Description = "\"break\" within a \"do-while\" Statement is allowed and performed as described in 12.8")]
        [TestCase("S12.6.1_A4_T3.js", Description = "\"break\" within a \"do-while\" Statement is allowed and performed as described in 12.8")]
        [TestCase("S12.6.1_A4_T4.js", Description = "\"break\" within a \"do-while\" Statement is allowed and performed as described in 12.8")]
        [TestCase("S12.6.1_A4_T5.js", Description = "\"break\" within a \"do-while\" Statement is allowed and performed as described in 12.8")]
        public void BreakWithinADoWhileStatementIsAllowedAndPerformedAsDescribedIn128(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.1")]
        [TestCase("S12.6.1_A5.js", Description = "After \"do-while\" is broken, (normal, V, empty) is returned")]
        public void AfterDoWhileIsBrokenNormalVEmptyIsReturned(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.1")]
        [TestCase("S12.6.1_A6_T1.js", Description = "Expression in \"do-while\" IterationStatement is bracketed with braces", ExpectedException = typeof(Exception))]
        [TestCase("S12.6.1_A6_T2.js", Description = "Expression in \"do-while\" IterationStatement is bracketed with braces", ExpectedException = typeof(Exception))]
        [TestCase("S12.6.1_A6_T3.js", Description = "Expression in \"do-while\" IterationStatement is bracketed with braces", ExpectedException = typeof(Exception))]
        [TestCase("S12.6.1_A6_T4.js", Description = "Expression in \"do-while\" IterationStatement is bracketed with braces", ExpectedException = typeof(Exception))]
        [TestCase("S12.6.1_A6_T5.js", Description = "Expression in \"do-while\" IterationStatement is bracketed with braces", ExpectedException = typeof(Exception))]
        [TestCase("S12.6.1_A6_T6.js", Description = "Expression in \"do-while\" IterationStatement is bracketed with braces", ExpectedException = typeof(Exception))]
        public void ExpressionInDoWhileIterationStatementIsBracketedWithBraces(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.1")]
        [TestCase("S12.6.1_A7.js", Description = "The \"do-while\" Statement is evaluted according to 12.6.1 and returns (normal, V, empty)")]
        public void TheDoWhileStatementIsEvalutedAccordingTo1261AndReturnsNormalVEmpty(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.1")]
        [TestCase("S12.6.1_A8.js", Description = "\"continue\" statement within a \"do-while\" Statement is allowed")]
        public void ContinueStatementWithinADoWhileStatementIsAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.1")]
        [TestCase("S12.6.1_A9.js", Description = "\"do-while\" Statement is evaluated without syntax checks")]
        public void DoWhileStatementIsEvaluatedWithoutSyntaxChecks(string file)
        {
            RunFile(file);
        }
    }
}