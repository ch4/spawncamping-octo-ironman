// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Statement
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class TheIfStatementTests : SputnikTestFixture
    {
        public TheIfStatementTests()
            : base(@"Conformance\12_Statement\12.5_The_if_Statement")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.5")]
        [TestCase("S12.5_A1.1_T1.js", Description = "0, null, undefined, false, empty string, NaN in expression is evaluated to false")]
        [TestCase("S12.5_A1.1_T2.js", Description = "0, null, undefined, false, empty string, NaN in expression is evaluated to false")]
        public void _0NullUndefinedFalseEmptyStringNaNInExpressionIsEvaluatedToFalse(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.5")]
        [TestCase("S12.5_A1.2_T1.js", Description = "1, true, non-empty string and others in expression is evaluated to true when using operator \"new\"")]
        [TestCase("S12.5_A1.2_T2.js", Description = "1, true, non-empty string and others in expression is evaluated to true when using operator \"new\"")]
        public void _1TrueNonEmptyStringAndOthersInExpressionIsEvaluatedToTrueWhenUsingOperatorNew(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.5")]
        [TestCase("S12.5_A1_T1.js", Description = "1, true, non-empty string in expression is evaluated to true")]
        [TestCase("S12.5_A1_T2.js", Description = "1, true, non-empty string in expression is evaluated to true")]
        public void _1TrueNonEmptyStringInExpressionIsEvaluatedToTrue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.5")]
        [TestCase("S12.5_A10_T1.js", Description = "Function expession inside the \"if\" expression is allowed")]
        [TestCase("S12.5_A10_T2.js", Description = "Function expession inside the \"if\" expression is allowed")]
        public void FunctionExpessionInsideTheIfExpressionIsAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.5")]
        [TestCase("S12.5_A11.js", Description = "{} within the \"if\" expression is not allowed", ExpectedException = typeof(Exception))]
        public void WithinTheIfExpressionIsNotAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.5")]
        [TestCase("S12.5_A12_T1.js", Description = "Embedded \"if/else\" constructions are allowed")]
        [TestCase("S12.5_A12_T2.js", Description = "Embedded \"if/else\" constructions are allowed")]
        [TestCase("S12.5_A12_T3.js", Description = "Embedded \"if/else\" constructions are allowed")]
        [TestCase("S12.5_A12_T4.js", Description = "Embedded \"if/else\" constructions are allowed")]
        public void EmbeddedIfElseConstructionsAreAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.5")]
        [TestCase("S12.5_A2.js", Description = "In the \"if\" Statement eval in Expression is admitted", ExpectedException = typeof(Exception))]
        public void InTheIfStatementEvalInExpressionIsAdmitted(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.5")]
        [TestCase("S12.5_A3.js", Description = "When the production \"IfStatement: if ( Expression ) Statement else Statement\" is evaluated, Expression is evaluated first")]
        public void WhenTheProductionIfStatementIfExpressionStatementElseStatementIsEvaluatedExpressionIsEvaluatedFirst(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.5")]
        [TestCase("S12.5_A4.js", Description = "When the production \"IfStatement: if ( Expression ) Statement else Statement\" is evaluated, Statement(s) is(are) evaluated second")]
        public void WhenTheProductionIfStatementIfExpressionStatementElseStatementIsEvaluatedStatementSIsAreEvaluatedSecond(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.5")]
        [TestCase("S12.5_A5.js", Description = "FunctionDeclaration inside the \"if\" Expression is evaluated as true and function will not be declarated")]
        public void FunctionDeclarationInsideTheIfExpressionIsEvaluatedAsTrueAndFunctionWillNotBeDeclarated(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.5")]
        [TestCase("S12.5_A6_T1.js", Description = "In the If statement expression must be enclosed in braces", ExpectedException = typeof(Exception))]
        [TestCase("S12.5_A6_T2.js", Description = "In the If statement expression must be enclosed in braces", ExpectedException = typeof(Exception))]
        public void InTheIfStatementExpressionMustBeEnclosedInBraces(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.5")]
        [TestCase("S12.5_A7.js", Description = "In the \"if\" statement empty statement is allowed and is evaluated to \"undefined\"")]
        public void InTheIfStatementEmptyStatementIsAllowedAndIsEvaluatedToUndefined(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.5")]
        [TestCase("S12.5_A8.js", Description = "In the \"if\" Statement empty expression is not allowed", ExpectedException = typeof(Exception))]
        public void InTheIfStatementEmptyExpressionIsNotAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.5")]
        [TestCase("S12.5_A9_T1.js", Description = "Function declaration within an \"if\" statement is not allowed", ExpectedException = typeof(Exception))]
        [TestCase("S12.5_A9_T2.js", Description = "Function declaration within an \"if\" statement is not allowed", ExpectedException = typeof(Exception))]
        [TestCase("S12.5_A9_T3.js", Description = "Function declaration within an \"if\" statement is not allowed", ExpectedException = typeof(Exception))]
        public void FunctionDeclarationWithinAnIfStatementIsNotAllowed(string file)
        {
            RunFile(file);
        }
    }
}