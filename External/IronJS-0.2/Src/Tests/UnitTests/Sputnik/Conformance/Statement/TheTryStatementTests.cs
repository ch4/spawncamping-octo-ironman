// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Statement
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class TheTryStatementTests : SputnikTestFixture
    {
        public TheTryStatementTests()
            : base(@"Conformance\12_Statement\12.14_The_try_Statement")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.14")]
        [TestCase("S12.14_A1.js", Description = "The production TryStatement : try Block Catch is evaluated as follows: 2. If Result(1).type is not throw, return Result(1)")]
        public void TheProductionTryStatementTryBlockCatchIsEvaluatedAsFollows2IfResult1TypeIsNotThrowReturnResult1(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.14")]
        [TestCase("S12.14_A10_T1.js", Description = "Using \"try\" with \"catch\" or \"finally\" statement within/without a \"while\" statement")]
        [TestCase("S12.14_A10_T2.js", Description = "Using \"try\" with \"catch\" or \"finally\" statement within/without a \"while\" statement")]
        [TestCase("S12.14_A10_T3.js", Description = "Using \"try\" with \"catch\" or \"finally\" statement within/without a \"while\" statement")]
        [TestCase("S12.14_A10_T4.js", Description = "Using \"try\" with \"catch\" or \"finally\" statement within/without a \"while\" statement")]
        [TestCase("S12.14_A10_T5.js", Description = "Using \"try\" with \"catch\" or \"finally\" statement within/without a \"while\" statement")]
        public void UsingTryWithCatchOrFinallyStatementWithinWithoutAWhileStatement(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.14")]
        [TestCase("S12.14_A11_T1.js", Description = "Using \"try\" with \"catch\" or \"finally\" statement within/without a \"for\" statement")]
        [TestCase("S12.14_A11_T2.js", Description = "Using \"try\" with \"catch\" or \"finally\" statement within/without a \"for\" statement")]
        [TestCase("S12.14_A11_T3.js", Description = "Using \"try\" with \"catch\" or \"finally\" statement within/without a \"for\" statement")]
        [TestCase("S12.14_A11_T4.js", Description = "Using \"try\" with \"catch\" or \"finally\" statement within/without a \"for\" statement")]
        public void UsingTryWithCatchOrFinallyStatementWithinWithoutAForStatement(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.14")]
        [TestCase("S12.14_A12_T1.js", Description = "Using \"try\" with \"catch\" or \"finally\" statement within/without a \"for-in\" statement")]
        [TestCase("S12.14_A12_T2.js", Description = "Using \"try\" with \"catch\" or \"finally\" statement within/without a \"for-in\" statement")]
        [TestCase("S12.14_A12_T3.js", Description = "Using \"try\" with \"catch\" or \"finally\" statement within/without a \"for-in\" statement")]
        [TestCase("S12.14_A12_T4.js", Description = "Using \"try\" with \"catch\" or \"finally\" statement within/without a \"for-in\" statement")]
        public void UsingTryWithCatchOrFinallyStatementWithinWithoutAForInStatement(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.14")]
        [TestCase("S12.14_A13_T1.js", Description = "Using \"try\" with \"catch\" or \"finally\" statement with a \"return\" statement")]
        [TestCase("S12.14_A13_T2.js", Description = "Using \"try\" with \"catch\" or \"finally\" statement with a \"return\" statement")]
        [TestCase("S12.14_A13_T3.js", Description = "Using \"try\" with \"catch\" or \"finally\" statement with a \"return\" statement")]
        public void UsingTryWithCatchOrFinallyStatementWithAReturnStatement(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.14")]
        [TestCase("S12.14_A14.js", Description = "Using \"try\" with \"catch\" or \"finally\" statement within/without a \"with\" statement")]
        public void UsingTryWithCatchOrFinallyStatementWithinWithoutAWithStatement(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.14")]
        [TestCase("S12.14_A15.js", Description = "Using \"try\" with \"catch\" or \"finally\" statement within/without a \"switch\" statement")]
        public void UsingTryWithCatchOrFinallyStatementWithinWithoutASwitchStatement(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.1")]
        [Category("ECMA 12.14")]
        [TestCase("S12.14_A16_T1.js", Description = "TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"", ExpectedException = typeof(Exception))]
        [TestCase("S12.14_A16_T10.js", Description = "TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"", ExpectedException = typeof(Exception))]
        [TestCase("S12.14_A16_T11.js", Description = "TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"", ExpectedException = typeof(Exception))]
        [TestCase("S12.14_A16_T12.js", Description = "TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"", ExpectedException = typeof(Exception))]
        [TestCase("S12.14_A16_T13.js", Description = "TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"", ExpectedException = typeof(Exception))]
        [TestCase("S12.14_A16_T14.js", Description = "TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"", ExpectedException = typeof(Exception))]
        [TestCase("S12.14_A16_T15.js", Description = "TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"", ExpectedException = typeof(Exception))]
        [TestCase("S12.14_A16_T2.js", Description = "TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"", ExpectedException = typeof(Exception))]
        [TestCase("S12.14_A16_T3.js", Description = "TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"", ExpectedException = typeof(Exception))]
        [TestCase("S12.14_A16_T4.js", Description = "TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"", ExpectedException = typeof(Exception))]
        [TestCase("S12.14_A16_T5.js", Description = "TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"", ExpectedException = typeof(Exception))]
        [TestCase("S12.14_A16_T6.js", Description = "TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"", ExpectedException = typeof(Exception))]
        [TestCase("S12.14_A16_T7.js", Description = "TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"", ExpectedException = typeof(Exception))]
        [TestCase("S12.14_A16_T8.js", Description = "TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"", ExpectedException = typeof(Exception))]
        [TestCase("S12.14_A16_T9.js", Description = "TryStatement: \"try Block Catch\" or \"try Block Finally\" or \"try Block Catch Finally\"", ExpectedException = typeof(Exception))]
        public void TryStatementTryBlockCatchOrTryBlockFinallyOrTryBlockCatchFinally(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.14")]
        [TestCase("S12.14_A17.js", Description = "Using \"try\" with \"catch\" or \"finally\" statement in a constructor")]
        public void UsingTryWithCatchOrFinallyStatementInAConstructor(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.13")]
        [Category("ECMA 12.14")]
        [TestCase("S12.14_A18_T1.js", Description = "Catching objects with try/catch/finally statement")]
        [TestCase("S12.14_A18_T2.js", Description = "Catching objects with try/catch/finally statement")]
        [TestCase("S12.14_A18_T3.js", Description = "Catching objects with try/catch/finally statement")]
        [TestCase("S12.14_A18_T4.js", Description = "Catching objects with try/catch/finally statement")]
        [TestCase("S12.14_A18_T5.js", Description = "Catching objects with try/catch/finally statement")]
        [TestCase("S12.14_A18_T6.js", Description = "Catching objects with try/catch/finally statement")]
        [TestCase("S12.14_A18_T7.js", Description = "Catching objects with try/catch/finally statement")]
        public void CatchingObjectsWithTryCatchFinallyStatement(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.14")]
        [Category("ECMA 15.11")]
        [Category("ECMA 16")]
        [TestCase("S12.14_A19_T1.js", Description = "Catching system exceptions of different types with try statement")]
        [TestCase("S12.14_A19_T2.js", Description = "Catching system exceptions of different types with try statement")]
        public void CatchingSystemExceptionsOfDifferentTypesWithTryStatement(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.14")]
        [TestCase("S12.14_A2.js", Description = "Throwing exception with \"throw\" and catching it with \"try\" statement")]
        public void ThrowingExceptionWithThrowAndCatchingItWithTryStatement(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.14")]
        [TestCase("S12.14_A3.js", Description = "Catching system exception with \"try\" statement")]
        public void CatchingSystemExceptionWithTryStatement(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.14")]
        [TestCase("S12.14_A4.js", Description = "Sanity test for \"catch(Indetifier) statement\"")]
        public void SanityTestForCatchIndetifierStatement(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.14")]
        [TestCase("S12.14_A5.js", Description = "The production TryStatement: \"try Block Finally\" and the production TryStatement: \"try Block Catch Finally\"")]
        public void TheProductionTryStatementTryBlockFinallyAndTheProductionTryStatementTryBlockCatchFinally(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.14")]
        [TestCase("S12.14_A6.js", Description = " The production TryStatement: \"try Block Catch Finally\"")]
        public void TheProductionTryStatementTryBlockCatchFinally(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.14")]
        [TestCase("S12.14_A7_T1.js", Description = "Evaluating the nested productions TryStatement")]
        [TestCase("S12.14_A7_T2.js", Description = "Evaluating the nested productions TryStatement")]
        [TestCase("S12.14_A7_T3.js", Description = "Evaluating the nested productions TryStatement")]
        public void EvaluatingTheNestedProductionsTryStatement(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.14")]
        [TestCase("S12.14_A8.js", Description = "\"try\" with \"catch\" or \"finally\" statement within/without an \"if\" statement")]
        public void TryWithCatchOrFinallyStatementWithinWithoutAnIfStatement(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.14")]
        [TestCase("S12.14_A9_T1.js", Description = "\"try\" with \"catch\" or \"finally\" statement within/without an \"do while\" statement")]
        [TestCase("S12.14_A9_T2.js", Description = "\"try\" with \"catch\" or \"finally\" statement within/without an \"do while\" statement")]
        [TestCase("S12.14_A9_T3.js", Description = "\"try\" with \"catch\" or \"finally\" statement within/without an \"do while\" statement")]
        [TestCase("S12.14_A9_T4.js", Description = "\"try\" with \"catch\" or \"finally\" statement within/without an \"do while\" statement")]
        [TestCase("S12.14_A9_T5.js", Description = "\"try\" with \"catch\" or \"finally\" statement within/without an \"do while\" statement")]
        public void TryWithCatchOrFinallyStatementWithinWithoutAnDoWhileStatement(string file)
        {
            RunFile(file);
        }
    }
}