// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Statement
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class TheSwitchStatementTests : SputnikTestFixture
    {
        public TheSwitchStatementTests()
            : base(@"Conformance\12_Statement\12.11_The_switch_Statement")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.11")]
        [TestCase("S12.11_A1_T1.js", Description = "If Result.type is break and Result.target is in the current label set, return (normal, Result.value, empty)")]
        [TestCase("S12.11_A1_T2.js", Description = "If Result.type is break and Result.target is in the current label set, return (normal, Result.value, empty)")]
        [TestCase("S12.11_A1_T3.js", Description = "If Result.type is break and Result.target is in the current label set, return (normal, Result.value, empty)")]
        [TestCase("S12.11_A1_T4.js", Description = "If Result.type is break and Result.target is in the current label set, return (normal, Result.value, empty)")]
        public void IfResultTypeIsBreakAndResultTargetIsInTheCurrentLabelSetReturnNormalResultValueEmpty(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.11")]
        [TestCase("S12.11_A2_T1.js", Description = "There can be only one DefaultClause", ExpectedException = typeof(Exception))]
        public void ThereCanBeOnlyOneDefaultClause(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.11")]
        [TestCase("S12.11_A3_T1.js", Description = "Syntax constructions of switch statement", ExpectedException = typeof(Exception))]
        [TestCase("S12.11_A3_T2.js", Description = "Syntax constructions of switch statement", ExpectedException = typeof(Exception))]
        [TestCase("S12.11_A3_T3.js", Description = "Syntax constructions of switch statement", ExpectedException = typeof(Exception))]
        [TestCase("S12.11_A3_T4.js", Description = "Syntax constructions of switch statement", ExpectedException = typeof(Exception))]
        [TestCase("S12.11_A3_T5.js", Description = "Syntax constructions of switch statement", ExpectedException = typeof(Exception))]
        public void SyntaxConstructionsOfSwitchStatement(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.11")]
        [TestCase("S12.11_A4_T1.js", Description = "Embedded syntax constructions of switch statement")]
        public void EmbeddedSyntaxConstructionsOfSwitchStatement(string file)
        {
            RunFile(file);
        }
    }
}