// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Statement
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class TheContinueStatementTests : SputnikTestFixture
    {
        public TheContinueStatementTests()
            : base(@"Conformance\12_Statement\12.7_The_continue_Statement")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.7")]
        [TestCase("S12.7_A1_T1.js", Description = "Appearing of continue without an IterationStatement leads to syntax error", ExpectedException = typeof(Exception))]
        [TestCase("S12.7_A1_T2.js", Description = "Appearing of continue without an IterationStatement leads to syntax error", ExpectedException = typeof(Exception))]
        [TestCase("S12.7_A1_T3.js", Description = "Appearing of continue without an IterationStatement leads to syntax error", ExpectedException = typeof(Exception))]
        [TestCase("S12.7_A1_T4.js", Description = "Appearing of continue without an IterationStatement leads to syntax error", ExpectedException = typeof(Exception))]
        public void AppearingOfContinueWithoutAnIterationStatementLeadsToSyntaxError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.7")]
        [TestCase("S12.7_A2.js", Description = "Since LineTerminator between \"continue\" and Identifier is not allowed, \"continue\" is evaluated without label")]
        public void SinceLineTerminatorBetweenContinueAndIdentifierIsNotAllowedContinueIsEvaluatedWithoutLabel(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.7")]
        [TestCase("S12.7_A3.js", Description = "When \"continue Identifier\" is evaluated (continue, empty, empty) is returned")]
        public void WhenContinueIdentifierIsEvaluatedContinueEmptyEmptyIsReturned(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.7")]
        [TestCase("S12.7_A4_T1.js", Description = "When \"continue Identifier\" is evaluated (continue, empty, Identifier) is returned")]
        [TestCase("S12.7_A4_T2.js", Description = "When \"continue Identifier\" is evaluated (continue, empty, Identifier) is returned")]
        [TestCase("S12.7_A4_T3.js", Description = "When \"continue Identifier\" is evaluated (continue, empty, Identifier) is returned")]
        public void WhenContinueIdentifierIsEvaluatedContinueEmptyIdentifierIsReturned(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.7")]
        [TestCase("S12.7_A5_T1.js", Description = "When \"continue Identifier\" is evaluated Identifier must be label in the label set of an enclosing (but not crossing function boundaries) IterationStatement", ExpectedException = typeof(Exception))]
        [TestCase("S12.7_A5_T2.js", Description = "When \"continue Identifier\" is evaluated Identifier must be label in the label set of an enclosing (but not crossing function boundaries) IterationStatement", ExpectedException = typeof(Exception))]
        [TestCase("S12.7_A5_T3.js", Description = "When \"continue Identifier\" is evaluated Identifier must be label in the label set of an enclosing (but not crossing function boundaries) IterationStatement", ExpectedException = typeof(Exception))]
        public void WhenContinueIdentifierIsEvaluatedIdentifierMustBeLabelInTheLabelSetOfAnEnclosingButNotCrossingFunctionBoundariesIterationStatement(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.7")]
        [TestCase("S12.7_A6.js", Description = "Appearing of \"continue\" within a function call that is within an IterationStatement yields SyntaxError", ExpectedException = typeof(Exception))]
        public void AppearingOfContinueWithinAFunctionCallThatIsWithinAnIterationStatementYieldsSyntaxError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.7")]
        [TestCase("S12.7_A7.js", Description = "Appearing of continue within eval statement that is within an IterationStatement yields SyntaxError")]
        public void AppearingOfContinueWithinEvalStatementThatIsWithinAnIterationStatementYieldsSyntaxError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.7")]
        [TestCase("S12.7_A8_T1.js", Description = "Appearing of \"continue\" within a \"try/catch\" Block yields SyntaxError", ExpectedException = typeof(Exception))]
        [TestCase("S12.7_A8_T2.js", Description = "Appearing of \"continue\" within a \"try/catch\" Block yields SyntaxError", ExpectedException = typeof(Exception))]
        public void AppearingOfContinueWithinATryCatchBlockYieldsSyntaxError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.7")]
        [TestCase("S12.7_A9_T1.js", Description = "Continue inside of try-catch nested in a loop is allowed")]
        [TestCase("S12.7_A9_T2.js", Description = "Continue inside of try-catch nested in a loop is allowed")]
        public void ContinueInsideOfTryCatchNestedInALoopIsAllowed(string file)
        {
            RunFile(file);
        }
    }
}