// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Statement
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class VariableStatementTests : SputnikTestFixture
    {
        public VariableStatementTests()
            : base(@"Conformance\12_Statement\12.2_Variable_Statement")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.2")]
        [TestCase("S12.2_A1.js", Description = "Variables are created when the program is entered. Variables are initialised to \"undefined\" when created. A variable with an Initialiser is assigned the value of its AssignmentExpression when the VariableStatement is executed, not when the variable is created")]
        public void VariablesAreCreatedWhenTheProgramIsEnteredVariablesAreInitialisedToUndefinedWhenCreatedAVariableWithAnInitialiserIsAssignedTheValueOfItsAssignmentExpressionWhenTheVariableStatementIsExecutedNotWhenTheVariableIsCreated(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.2")]
        [TestCase("S12.2_A10.js", Description = "\"var\" statement within \"for\" statement is allowed")]
        public void VarStatementWithinForStatementIsAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.2")]
        [TestCase("S12.2_A11.js", Description = "When using property attributes, {ReadOnly} is not used")]
        public void WhenUsingPropertyAttributesReadOnlyIsNotUsed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.2")]
        [TestCase("S12.2_A12.js", Description = "VariableDeclaration within \"do-while\" loop is allowed")]
        public void VariableDeclarationWithinDoWhileLoopIsAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.2")]
        [TestCase("S12.2_A2.js", Description = "Variables are defined with global scope (that is, they are created as members of the global object, as described in 10.1.3) using property attributes { DontDelete}")]
        public void VariablesAreDefinedWithGlobalScopeThatIsTheyAreCreatedAsMembersOfTheGlobalObjectAsDescribedIn1013UsingPropertyAttributesDontDelete(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.2")]
        [TestCase("S12.2_A3.js", Description = "FunctionDeclaration produces a new scope")]
        public void FunctionDeclarationProducesANewScope(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.2")]
        [TestCase("S12.2_A4.js", Description = "Unicode characters in variable Identifier are allowed")]
        public void UnicodeCharactersInVariableIdentifierAreAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.2")]
        [TestCase("S12.2_A5.js", Description = "VariableDeclaration within Eval statement is initialized as the program reaches the eval statement")]
        public void VariableDeclarationWithinEvalStatementIsInitializedAsTheProgramReachesTheEvalStatement(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.2")]
        [TestCase("S12.2_A6_T1.js", Description = "VariableDeclaration within \"try-catch\" statement is allowed")]
        [TestCase("S12.2_A6_T2.js", Description = "VariableDeclaration within \"try-catch\" statement is allowed")]
        public void VariableDeclarationWithinTryCatchStatementIsAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.2")]
        [TestCase("S12.2_A7.js", Description = "VariableDeclaration within \"for\" statement is allowed")]
        public void VariableDeclarationWithinForStatementIsAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.2")]
        [TestCase("S12.2_A8_T1.js", Description = "Only AssignmentExpression is admitted when variable is initialized", ExpectedException = typeof(Exception))]
        [TestCase("S12.2_A8_T2.js", Description = "Only AssignmentExpression is admitted when variable is initialized", ExpectedException = typeof(Exception))]
        [TestCase("S12.2_A8_T3.js", Description = "Only AssignmentExpression is admitted when variable is initialized", ExpectedException = typeof(Exception))]
        [TestCase("S12.2_A8_T4.js", Description = "Only AssignmentExpression is admitted when variable is initialized", ExpectedException = typeof(Exception))]
        [TestCase("S12.2_A8_T5.js", Description = "Only AssignmentExpression is admitted when variable is initialized", ExpectedException = typeof(Exception))]
        [TestCase("S12.2_A8_T6.js", Description = "Only AssignmentExpression is admitted when variable is initialized", ExpectedException = typeof(Exception))]
        [TestCase("S12.2_A8_T7.js", Description = "Only AssignmentExpression is admitted when variable is initialized", ExpectedException = typeof(Exception))]
        [TestCase("S12.2_A8_T8.js", Description = "Only AssignmentExpression is admitted when variable is initialized", ExpectedException = typeof(Exception))]
        public void OnlyAssignmentExpressionIsAdmittedWhenVariableIsInitialized(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.2")]
        [TestCase("S12.2_A9.js", Description = "When using property attributes, {DontEnum} is not used")]
        public void WhenUsingPropertyAttributesDontEnumIsNotUsed(string file)
        {
            RunFile(file);
        }
    }
}