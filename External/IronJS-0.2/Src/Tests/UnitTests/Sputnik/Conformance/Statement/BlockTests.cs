// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Statement
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class BlockTests : SputnikTestFixture
    {
        public BlockTests()
            : base(@"Conformance\12_Statement\12.1_Block")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.1")]
        [TestCase("S12.1_A1.js", Description = "The production Block  { } can\'t contain function declaration", ExpectedException = typeof(Exception))]
        public void TheProductionBlockCanTContainFunctionDeclaration(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.1")]
        [TestCase("S12.1_A2.js", Description = "The production StatementList  Statement is evaluated as follows 1. Evaluate Statement. 2. If an exception was thrown, return (throw, V, empty) where V is the exception")]
        public void TheProductionStatementListStatementIsEvaluatedAsFollows1EvaluateStatement2IfAnExceptionWasThrownReturnThrowVEmptyWhereVIsTheException(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.1")]
        [TestCase("S12.1_A4_T1.js", Description = "The production Block can\'t be inside of expression", ExpectedException = typeof(Exception))]
        [TestCase("S12.1_A4_T2.js", Description = "The production Block can\'t be inside of expression", ExpectedException = typeof(Exception))]
        public void TheProductionBlockCanTBeInsideOfExpression(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.1")]
        [TestCase("S12.1_A5.js", Description = "StatementList: StatementList Statement inside the Block is evaluated from left to right")]
        public void StatementListStatementListStatementInsideTheBlockIsEvaluatedFromLeftToRight(string file)
        {
            RunFile(file);
        }
    }
}