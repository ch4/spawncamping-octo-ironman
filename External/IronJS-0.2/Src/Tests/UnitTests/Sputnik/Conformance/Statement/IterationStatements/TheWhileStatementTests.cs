// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Statement.IterationStatements
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class TheWhileStatementTests : SputnikTestFixture
    {
        public TheWhileStatementTests()
            : base(@"Conformance\12_Statement\12.6_Iteration_Statements\12.6.2_The_while_statement")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.2")]
        [TestCase("S12.6.2_A1.js", Description = "Expression from \"while\" IterationStatement is evaluated first")]
        public void ExpressionFromWhileIterationStatementIsEvaluatedFirst(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.2")]
        [Category("ECMA 13.2")]
        [TestCase("S12.6.2_A10.js", Description = "FunctionExpression within a \"while\" IterationStatement is allowed, but no function with the given name will appear in the global context")]
        public void FunctionExpressionWithinAWhileIterationStatementIsAllowedButNoFunctionWithTheGivenNameWillAppearInTheGlobalContext(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.2")]
        [TestCase("S12.6.2_A11.js", Description = "\"{}\" Block within a \"while\" Expression is evaluated to true")]
        public void BlockWithinAWhileExpressionIsEvaluatedToTrue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.2")]
        [TestCase("S12.6.2_A13_T1.js", Description = "FunctionDeclaration within a \"while\" Statement is not allowed", ExpectedException = typeof(Exception))]
        [TestCase("S12.6.2_A13_T2.js", Description = "FunctionDeclaration within a \"while\" Statement is not allowed", ExpectedException = typeof(Exception))]
        [TestCase("S12.6.2_A13_T3.js", Description = "FunctionDeclaration within a \"while\" Statement is not allowed", ExpectedException = typeof(Exception))]
        public void FunctionDeclarationWithinAWhileStatementIsNotAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.2")]
        [TestCase("S12.6.2_A14_T1.js", Description = "FunctionExpression within a \"while\" Expression is allowed")]
        [TestCase("S12.6.2_A14_T2.js", Description = "FunctionExpression within a \"while\" Expression is allowed")]
        public void FunctionExpressionWithinAWhileExpressionIsAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.2")]
        [TestCase("S12.6.2_A15.js", Description = "Block within a \"while\" Expression is not allowed", ExpectedException = typeof(Exception))]
        public void BlockWithinAWhileExpressionIsNotAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.2")]
        [TestCase("S12.6.2_A2.js", Description = "While evaluating The production IterationStatement: \"while ( Expression ) Statement\", Expression is evaluated first")]
        public void WhileEvaluatingTheProductionIterationStatementWhileExpressionStatementExpressionIsEvaluatedFirst(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.2")]
        [TestCase("S12.6.2_A3.js", Description = "When \"while\" IterationStatement is evaluated, (normal, V, empty) is returned")]
        public void WhenWhileIterationStatementIsEvaluatedNormalVEmptyIsReturned(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.2")]
        [Category("ECMA 12.6.2")]
        [Category("ECMA 12.8")]
        [TestCase("S12.6.2_A4_T1.js", Description = "\"break\" within a \"while\" Statement is allowed and performed as described in 12.8")]
        [TestCase("S12.6.2_A4_T2.js", Description = "\"break\" within a \"while\" Statement is allowed and performed as described in 12.8")]
        [TestCase("S12.6.2_A4_T3.js", Description = "\"break\" within a \"while\" Statement is allowed and performed as described in 12.8")]
        [TestCase("S12.6.2_A4_T4.js", Description = "\"break\" within a \"while\" Statement is allowed and performed as described in 12.8")]
        [TestCase("S12.6.2_A4_T5.js", Description = "\"break\" within a \"while\" Statement is allowed and performed as described in 12.8")]
        public void BreakWithinAWhileStatementIsAllowedAndPerformedAsDescribedIn128(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.2")]
        [TestCase("S12.6.2_A5.js", Description = "While using \"while\" within an eval statement, source \"break\" is allowed and (normal, V, empty) is returned")]
        public void WhileUsingWhileWithinAnEvalStatementSourceBreakIsAllowedAndNormalVEmptyIsReturned(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.2")]
        [TestCase("S12.6.2_A6_T1.js", Description = "Expression in \"while\" IterationStatement is bracketed with braces", ExpectedException = typeof(Exception))]
        [TestCase("S12.6.2_A6_T2.js", Description = "Expression in \"while\" IterationStatement is bracketed with braces", ExpectedException = typeof(Exception))]
        [TestCase("S12.6.2_A6_T3.js", Description = "Expression in \"while\" IterationStatement is bracketed with braces", ExpectedException = typeof(Exception))]
        [TestCase("S12.6.2_A6_T4.js", Description = "Expression in \"while\" IterationStatement is bracketed with braces", ExpectedException = typeof(Exception))]
        [TestCase("S12.6.2_A6_T5.js", Description = "Expression in \"while\" IterationStatement is bracketed with braces", ExpectedException = typeof(Exception))]
        [TestCase("S12.6.2_A6_T6.js", Description = "Expression in \"while\" IterationStatement is bracketed with braces", ExpectedException = typeof(Exception))]
        public void ExpressionInWhileIterationStatementIsBracketedWithBraces(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.2")]
        [TestCase("S12.6.2_A7.js", Description = "The \"while\" Statement is evaluted according to 12.6.2 and returns (normal, V, empty)")]
        public void TheWhileStatementIsEvalutedAccordingTo1262AndReturnsNormalVEmpty(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.2")]
        [TestCase("S12.6.2_A8.js", Description = "\"continue\" statement within a \"while\" Statement is allowed")]
        public void ContinueStatementWithinAWhileStatementIsAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.2")]
        [TestCase("S12.6.2_A9.js", Description = "\"while\" Statement is evaluated without syntax checks")]
        public void WhileStatementIsEvaluatedWithoutSyntaxChecks(string file)
        {
            RunFile(file);
        }
    }
}