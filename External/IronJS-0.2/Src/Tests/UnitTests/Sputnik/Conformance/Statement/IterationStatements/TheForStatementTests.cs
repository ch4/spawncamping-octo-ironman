// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Statement.IterationStatements
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class TheForStatementTests : SputnikTestFixture
    {
        public TheForStatementTests()
            : base(@"Conformance\12_Statement\12.6_Iteration_Statements\12.6.3_The_for_Statement")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.3")]
        [TestCase("S12.6.3_A1.js", Description = "The \"for {")]
        public void TheFor(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.3")]
        [TestCase("S12.6.3_A10.js", Description = "Nested \"var-loops\" nine blocks depth is evaluated properly")]
        [TestCase("S12.6.3_A10.1.js", Description = "Nested \"var-loops\" nine blocks depth is evaluated properly")]
        public void NestedVarLoopsNineBlocksDepthIsEvaluatedProperly(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.3")]
        [TestCase("S12.6.3_A11.1_T1.js", Description = "If (Evaluate Statement).type is \"continue\" and (Evaluate Statement).target is in the current label set, iteration of labeled \"var-loop\" breaks")]
        [TestCase("S12.6.3_A11.1_T2.js", Description = "If (Evaluate Statement).type is \"continue\" and (Evaluate Statement).target is in the current label set, iteration of labeled \"var-loop\" breaks")]
        [TestCase("S12.6.3_A11.1_T3.js", Description = "If (Evaluate Statement).type is \"continue\" and (Evaluate Statement).target is in the current label set, iteration of labeled \"var-loop\" breaks", ExpectedException = typeof(Exception))]
        public void IfEvaluateStatementTypeIsContinueAndEvaluateStatementTargetIsInTheCurrentLabelSetIterationOfLabeledVarLoopBreaks(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.3")]
        [TestCase("S12.6.3_A11_T1.js", Description = "If (Evaluate Statement).type is \"continue\" and (Evaluate Statement).target is in the current label set, iteration of labeled loop breaks")]
        [TestCase("S12.6.3_A11_T2.js", Description = "If (Evaluate Statement).type is \"continue\" and (Evaluate Statement).target is in the current label set, iteration of labeled loop breaks")]
        [TestCase("S12.6.3_A11_T3.js", Description = "If (Evaluate Statement).type is \"continue\" and (Evaluate Statement).target is in the current label set, iteration of labeled loop breaks", ExpectedException = typeof(Exception))]
        public void IfEvaluateStatementTypeIsContinueAndEvaluateStatementTargetIsInTheCurrentLabelSetIterationOfLabeledLoopBreaks(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.3")]
        [TestCase("S12.6.3_A12.1_T1.js", Description = "If (Evaluate Statement).type is \"break\" and (Evaluate Statement).target is in the current label set, (normal, (Evaluate Statement), empty) is returned while evaluating a \"var-loop\"")]
        [TestCase("S12.6.3_A12.1_T2.js", Description = "If (Evaluate Statement).type is \"break\" and (Evaluate Statement).target is in the current label set, (normal, (Evaluate Statement), empty) is returned while evaluating a \"var-loop\"")]
        [TestCase("S12.6.3_A12.1_T3.js", Description = "If (Evaluate Statement).type is \"break\" and (Evaluate Statement).target is in the current label set, (normal, (Evaluate Statement), empty) is returned while evaluating a \"var-loop\"", ExpectedException = typeof(Exception))]
        public void IfEvaluateStatementTypeIsBreakAndEvaluateStatementTargetIsInTheCurrentLabelSetNormalEvaluateStatementEmptyIsReturnedWhileEvaluatingAVarLoop(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.3")]
        [TestCase("S12.6.3_A12_T1.js", Description = "If (Evaluate Statement).type is \"break\" and (Evaluate Statement).target is in the current label set, (normal, (Evaluate Statement), empty) is returned while evaluating a loop")]
        [TestCase("S12.6.3_A12_T2.js", Description = "If (Evaluate Statement).type is \"break\" and (Evaluate Statement).target is in the current label set, (normal, (Evaluate Statement), empty) is returned while evaluating a loop")]
        [TestCase("S12.6.3_A12_T3.js", Description = "If (Evaluate Statement).type is \"break\" and (Evaluate Statement).target is in the current label set, (normal, (Evaluate Statement), empty) is returned while evaluating a loop", ExpectedException = typeof(Exception))]
        public void IfEvaluateStatementTypeIsBreakAndEvaluateStatementTargetIsInTheCurrentLabelSetNormalEvaluateStatementEmptyIsReturnedWhileEvaluatingALoop(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.3")]
        [TestCase("S12.6.3_A13.js", Description = "VariableDeclaration in \"var VariableDeclarationListNoIn\" of for IterationStatement is allowed")]
        public void VariableDeclarationInVarVariableDeclarationListNoInOfForIterationStatementIsAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.3")]
        [TestCase("S12.6.3_A14.js", Description = "The production IterationStatement: \"for (var VariableDeclarationListNoIn")]
        [TestCase("S12.6.3_A15.js", Description = "The production IterationStatement: \"for (var VariableDeclarationListNoIn")]
        public void TheProductionIterationStatementForVarVariableDeclarationListNoIn(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.3")]
        [TestCase("S12.6.3_A2.js", Description = "While evaluating \"for (ExpressionNoIn")]
        [TestCase("S12.6.3_A2.1.js", Description = "While evaluating \"for (ExpressionNoIn ")]
        [TestCase("S12.6.3_A2.2.js", Description = "While evaluating \"for (ExpressionNoIn")]
        [TestCase("S12.6.3_A3.js", Description = "While evaluating \"for (ExpressionNoIn")]
        public void WhileEvaluatingForExpressionNoIn(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.3")]
        [TestCase("S12.6.3_A4.1.js", Description = "\"in\"-expression is not allowed as a ExpressionNoIn in \"for (ExpressionNoIn", ExpectedException = typeof(Exception))]
        [TestCase("S12.6.3_A4_T1.js", Description = "\"in\"-expression is not allowed as a ExpressionNoIn in \"for (ExpressionNoIn", ExpectedException = typeof(Exception))]
        [TestCase("S12.6.3_A4_T2.js", Description = "\"in\"-expression is not allowed as a ExpressionNoIn in \"for (ExpressionNoIn", ExpectedException = typeof(Exception))]
        public void InExpressionIsNotAllowedAsAExpressionNoInInForExpressionNoIn(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.3")]
        [TestCase("S12.6.3_A5.js", Description = "\"in\"-expression wrapped into \"eval\" statement is allowed as a ExpressionNoIn in \"for (ExpressionNoIn")]
        public void InExpressionWrappedIntoEvalStatementIsAllowedAsAExpressionNoInInForExpressionNoIn(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.3")]
        [TestCase("S12.6.3_A6.js", Description = "While evaluating \"for ( ")]
        public void WhileEvaluatingFor(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.3")]
        [TestCase("S12.6.3_A7.1_T1.js", Description = "Only three expressions and two semicolons in \"for(with var)\" braces are allowed. Appearing of for (ExpressionNoIn_opt ", ExpectedException = typeof(Exception))]
        [TestCase("S12.6.3_A7.1_T2.js", Description = "Only three expressions and two semicolons in \"for(with var)\" braces are allowed. Appearing of for (ExpressionNoIn_opt ", ExpectedException = typeof(Exception))]
        public void OnlyThreeExpressionsAndTwoSemicolonsInForWithVarBracesAreAllowedAppearingOfForExpressionNoIn_opt(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.3")]
        [TestCase("S12.6.3_A7_T1.js", Description = "Only three expressions and two semicolons in \"for\" braces are allowed. Appearing of for (ExpressionNoIn_opt ", ExpectedException = typeof(Exception))]
        [TestCase("S12.6.3_A7_T2.js", Description = "Only three expressions and two semicolons in \"for\" braces are allowed. Appearing of for (ExpressionNoIn_opt ", ExpectedException = typeof(Exception))]
        public void OnlyThreeExpressionsAndTwoSemicolonsInForBracesAreAllowedAppearingOfForExpressionNoIn_opt(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.3")]
        [TestCase("S12.6.3_A8.1_T1.js", Description = "Blocks within \"for(with var)\" braces are not allowed", ExpectedException = typeof(Exception))]
        [TestCase("S12.6.3_A8.1_T2.js", Description = "Blocks within \"for(with var)\" braces are not allowed", ExpectedException = typeof(Exception))]
        [TestCase("S12.6.3_A8.1_T3.js", Description = "Blocks within \"for(with var)\" braces are not allowed", ExpectedException = typeof(Exception))]
        public void BlocksWithinForWithVarBracesAreNotAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.3")]
        [TestCase("S12.6.3_A8_T1.js", Description = "Blocks within \"for\" braces are not allowed", ExpectedException = typeof(Exception))]
        [TestCase("S12.6.3_A8_T2.js", Description = "Blocks within \"for\" braces are not allowed", ExpectedException = typeof(Exception))]
        [TestCase("S12.6.3_A8_T3.js", Description = "Blocks within \"for\" braces are not allowed", ExpectedException = typeof(Exception))]
        public void BlocksWithinForBracesAreNotAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.3")]
        [TestCase("S12.6.3_A9.js", Description = "The result of evaluating \"for(var ExpNoIn")]
        public void TheResultOfEvaluatingForVarExpNoIn(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.3")]
        [TestCase("S12.6.3_A9.1.js", Description = "The result of evaluating \"for( ExpNoIn")]
        public void TheResultOfEvaluatingForExpNoIn(string file)
        {
            RunFile(file);
        }
    }
}