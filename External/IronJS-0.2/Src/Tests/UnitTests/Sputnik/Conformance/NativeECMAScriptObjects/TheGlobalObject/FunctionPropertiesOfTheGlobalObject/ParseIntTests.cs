// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.TheGlobalObject.FunctionPropertiesOfTheGlobalObject
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class ParseIntTests : SputnikTestFixture
    {
        public ParseIntTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.1_The_Global_Object\15.1.2_Function_Properties_of_the_Global_Object\15.1.2.2_parseInt")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.2")]
        [Category("ECMA 8.6.2.6")]
        [Category("ECMA 9.8")]
        [TestCase("S15.1.2.2_A1_T1.js", Description = "Operator use ToString")]
        [TestCase("S15.1.2.2_A1_T2.js", Description = "Operator use ToString")]
        [TestCase("S15.1.2.2_A1_T3.js", Description = "Operator use ToString")]
        [TestCase("S15.1.2.2_A1_T4.js", Description = "Operator use ToString")]
        [TestCase("S15.1.2.2_A1_T5.js", Description = "Operator use ToString")]
        [TestCase("S15.1.2.2_A1_T6.js", Description = "Operator use ToString")]
        [TestCase("S15.1.2.2_A1_T7.js", Description = "Operator use ToString")]
        public void OperatorUseToString(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.2")]
        [TestCase("S15.1.2.2_A2_T1.js", Description = "Operator remove leading StrWhiteSpaceChar")]
        [TestCase("S15.1.2.2_A2_T10.js", Description = "Operator remove leading StrWhiteSpaceChar")]
        [TestCase("S15.1.2.2_A2_T2.js", Description = "Operator remove leading StrWhiteSpaceChar")]
        [TestCase("S15.1.2.2_A2_T3.js", Description = "Operator remove leading StrWhiteSpaceChar")]
        [TestCase("S15.1.2.2_A2_T4.js", Description = "Operator remove leading StrWhiteSpaceChar")]
        [TestCase("S15.1.2.2_A2_T5.js", Description = "Operator remove leading StrWhiteSpaceChar")]
        [TestCase("S15.1.2.2_A2_T6.js", Description = "Operator remove leading StrWhiteSpaceChar")]
        [TestCase("S15.1.2.2_A2_T7.js", Description = "Operator remove leading StrWhiteSpaceChar")]
        [TestCase("S15.1.2.2_A2_T8.js", Description = "Operator remove leading StrWhiteSpaceChar")]
        [TestCase("S15.1.2.2_A2_T9.js", Description = "Operator remove leading StrWhiteSpaceChar")]
        public void OperatorRemoveLeadingStrWhiteSpaceChar(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.2")]
        [Category("ECMA 8.6.2.6")]
        [Category("ECMA 9.3")]
        [TestCase("S15.1.2.2_A3.1_T1.js", Description = "Operator use ToNumber")]
        [TestCase("S15.1.2.2_A3.1_T2.js", Description = "Operator use ToNumber")]
        [TestCase("S15.1.2.2_A3.1_T3.js", Description = "Operator use ToNumber")]
        [TestCase("S15.1.2.2_A3.1_T4.js", Description = "Operator use ToNumber")]
        [TestCase("S15.1.2.2_A3.1_T5.js", Description = "Operator use ToNumber")]
        [TestCase("S15.1.2.2_A3.1_T6.js", Description = "Operator use ToNumber")]
        [TestCase("S15.1.2.2_A3.1_T7.js", Description = "Operator use ToNumber")]
        public void OperatorUseToNumber(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.2")]
        [TestCase("S15.1.2.2_A3.2_T1.js", Description = "Operator use ToInt32")]
        [TestCase("S15.1.2.2_A3.2_T2.js", Description = "Operator use ToInt32")]
        [TestCase("S15.1.2.2_A3.2_T3.js", Description = "Operator use ToInt32")]
        public void OperatorUseToInt32(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.2")]
        [TestCase("S15.1.2.2_A4.1_T1.js", Description = "If R = 0 or R = undefined, then R = 10")]
        [TestCase("S15.1.2.2_A4.1_T2.js", Description = "If R = 0 or R = undefined, then R = 10")]
        public void IfR0OrRUndefinedThenR10(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.2")]
        [TestCase("S15.1.2.2_A4.2_T1.js", Description = "If R < 2 or R > 36, then return NaN")]
        [TestCase("S15.1.2.2_A4.2_T2.js", Description = "If R < 2 or R > 36, then return NaN")]
        [TestCase("S15.1.2.2_A4.2_T3.js", Description = "If R < 2 or R > 36, then return NaN")]
        public void IfR2OrR36ThenReturnNaN(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.2")]
        [TestCase("S15.1.2.2_A5.1_T1.js", Description = "If the length of S is at least 1 and the first character of S is 0, then at the implementation\'s discretion either let R = 8 or R = 10")]
        public void IfTheLengthOfSIsAtLeast1AndTheFirstCharacterOfSIs0ThenAtTheImplementationSDiscretionEitherLetR8OrR10(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.2")]
        [TestCase("S15.1.2.2_A5.2_T1.js", Description = "If the length of S is at least 2 and the first two characters of S are either 0x or 0X, then remove the first two characters from S and let R = 16")]
        [TestCase("S15.1.2.2_A5.2_T2.js", Description = "If the length of S is at least 2 and the first two characters of S are either 0x or 0X, then remove the first two characters from S and let R = 16")]
        public void IfTheLengthOfSIsAtLeast2AndTheFirstTwoCharactersOfSAreEither0xOr0XThenRemoveTheFirstTwoCharactersFromSAndLetR16(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.2")]
        [TestCase("S15.1.2.2_A6.1_T1.js", Description = "If S contains any character that is not a radix-R digit, then let Z be the substring of S consisting of all characters before the first such character")]
        [TestCase("S15.1.2.2_A6.1_T2.js", Description = "If S contains any character that is not a radix-R digit, then let Z be the substring of S consisting of all characters before the first such character")]
        [TestCase("S15.1.2.2_A6.1_T3.js", Description = "If S contains any character that is not a radix-R digit, then let Z be the substring of S consisting of all characters before the first such character")]
        [TestCase("S15.1.2.2_A6.1_T4.js", Description = "If S contains any character that is not a radix-R digit, then let Z be the substring of S consisting of all characters before the first such character")]
        [TestCase("S15.1.2.2_A6.1_T5.js", Description = "If S contains any character that is not a radix-R digit, then let Z be the substring of S consisting of all characters before the first such character")]
        [TestCase("S15.1.2.2_A6.1_T6.js", Description = "If S contains any character that is not a radix-R digit, then let Z be the substring of S consisting of all characters before the first such character")]
        public void IfSContainsAnyCharacterThatIsNotARadixRDigitThenLetZBeTheSubstringOfSConsistingOfAllCharactersBeforeTheFirstSuchCharacter(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.2")]
        [TestCase("S15.1.2.2_A7.1_T1.js", Description = "If Z is empty, return NaN")]
        [TestCase("S15.1.2.2_A7.1_T2.js", Description = "If Z is empty, return NaN")]
        public void IfZIsEmptyReturnNaN(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.2")]
        [TestCase("S15.1.2.2_A7.2_T1.js", Description = "Compute the mathematical integer value that is represented by Z in radix-R notation, using the letters A-Z and a-z for digits with values 10 through 35. Compute the number value for Result(16)")]
        [TestCase("S15.1.2.2_A7.2_T2.js", Description = "Compute the mathematical integer value that is represented by Z in radix-R notation, using the letters A-Z and a-z for digits with values 10 through 35. Compute the number value for Result(16)")]
        [TestCase("S15.1.2.2_A7.2_T3.js", Description = "Compute the mathematical integer value that is represented by Z in radix-R notation, using the letters A-Z and a-z for digits with values 10 through 35. Compute the number value for Result(16)")]
        public void ComputeTheMathematicalIntegerValueThatIsRepresentedByZInRadixRNotationUsingTheLettersAZAndAZForDigitsWithValues10Through35ComputeTheNumberValueForResult16(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.2")]
        [TestCase("S15.1.2.2_A7.3_T1.js", Description = "Return sign * Result(17)")]
        [TestCase("S15.1.2.2_A7.3_T2.js", Description = "Return sign * Result(17)")]
        [TestCase("S15.1.2.2_A7.3_T3.js", Description = "Return sign * Result(17)")]
        public void ReturnSignResult17(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.2")]
        [Category("ECMA 9.3.1")]
        [TestCase("S15.1.2.2_A8.js", Description = "parseInt may interpret only a leading portion of the string as a number value")]
        public void ParseIntMayInterpretOnlyALeadingPortionOfTheStringAsANumberValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.4")]
        [Category("ECMA 15.1.2.2")]
        [Category("ECMA 15.2.4.7")]
        [TestCase("S15.1.2.2_A9.1.js", Description = "The length property of parseInt has the attribute DontEnum")]
        public void TheLengthPropertyOfParseIntHasTheAttributeDontEnum(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.4.1")]
        [Category("ECMA 15.1.2.2")]
        [Category("ECMA 15.2.4.5")]
        [TestCase("S15.1.2.2_A9.2.js", Description = "The length property of parseInt has the attribute DontDelete")]
        public void TheLengthPropertyOfParseIntHasTheAttributeDontDelete(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.2")]
        [TestCase("S15.1.2.2_A9.3.js", Description = "The length property of parseInt has the attribute ReadOnly")]
        public void TheLengthPropertyOfParseIntHasTheAttributeReadOnly(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.2")]
        [TestCase("S15.1.2.2_A9.4.js", Description = "The length property of parseInt is 2")]
        public void TheLengthPropertyOfParseIntIs2(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.4")]
        [Category("ECMA 15.1.2.2")]
        [Category("ECMA 15.2.4.7")]
        [TestCase("S15.1.2.2_A9.5.js", Description = "The parseInt property has the attribute DontEnum")]
        public void TheParseIntPropertyHasTheAttributeDontEnum(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.2")]
        [TestCase("S15.1.2.2_A9.6.js", Description = "The parseInt property has not prototype property")]
        public void TheParseIntPropertyHasNotPrototypeProperty(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.2.2")]
        [Category("ECMA 15.1.2.2")]
        [TestCase("S15.1.2.2_A9.7.js", Description = "The parseInt property can\'t be used as constructor")]
        public void TheParseIntPropertyCanTBeUsedAsConstructor(string file)
        {
            RunFile(file);
        }
    }
}