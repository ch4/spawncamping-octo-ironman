// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.TheMathObject.FunctionPropertiesOfTheMathObject
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class MinTests : SputnikTestFixture
    {
        public MinTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.8_The_Math_Object\15.8.2_Function_Properties_of_the_Math_Object\15.8.2.12_min")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.8.2.12")]
        [TestCase("S15.8.2.12_A1.js", Description = "If no arguments are given, Math.min() is +Infinity")]
        public void IfNoArgumentsAreGivenMathMinIsInfinity(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.8.2.12")]
        [TestCase("S15.8.2.12_A2.js", Description = "If any value is NaN, the result of Math.min is NaN")]
        public void IfAnyValueIsNaNTheResultOfMathMinIsNaN(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.8.2.12")]
        [TestCase("S15.8.2.12_A3.js", Description = "+0 is considered to be larger than -0")]
        public void _0IsConsideredToBeLargerThan0(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.8.2.12")]
        [TestCase("S15.8.2.12_A4.js", Description = "The length property of the Math.min method is 2")]
        public void TheLengthPropertyOfTheMathMinMethodIs2(string file)
        {
            RunFile(file);
        }
    }
}