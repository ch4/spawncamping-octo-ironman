// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.TheGlobalObject.URIHandlingFunctionProperties
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class EncodeURITests : SputnikTestFixture
    {
        public EncodeURITests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.1_The_Global_Object\15.1.3_URI_Handling_Function_Properties\15.1.3.3_encodeURI")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.3")]
        [TestCase("S15.1.3.3_A1.1_T1.js", Description = "If string.charAt(k) in [0xDC00 - 0xDFFF], throw URIError")]
        [TestCase("S15.1.3.3_A1.1_T2.js", Description = "If string.charAt(k) in [0xDC00 - 0xDFFF], throw URIError")]
        public void IfStringCharAtKIn0xDC000xDFFFThrowURIError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.3")]
        [TestCase("S15.1.3.3_A1.2_T1.js", Description = "If string.charAt(k) in [0xD800 - 0xDBFF] and string.length = k + 1, throw URIError")]
        [TestCase("S15.1.3.3_A1.2_T2.js", Description = "If string.charAt(k) in [0xD800 - 0xDBFF] and string.length = k + 1, throw URIError")]
        public void IfStringCharAtKIn0xD8000xDBFFAndStringLengthK1ThrowURIError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.3")]
        [TestCase("S15.1.3.3_A1.3_T1.js", Description = "If string.charAt(k) in [0xD800 - 0xDBFF] and string.charAt(k+1) not in [0xDC00 - 0xDFFF], throw URIError")]
        public void IfStringCharAtKIn0xD8000xDBFFAndStringCharAtK1NotIn0xDC000xDFFFThrowURIError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.3")]
        [TestCase("S15.1.3.3_A2.1_T1.js", Description = "If string.charAt(k) in [0x0000 - 0x007F]\\[uriReserved, uriUnescaped, #], return 1 octet (00000000 0zzzzzzz -> 0zzzzzzz)")]
        public void IfStringCharAtKIn0x00000x007FUriReservedUriUnescapedReturn1Octet000000000zzzzzzz0zzzzzzz(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.3")]
        [TestCase("S15.1.3.3_A2.2_T1.js", Description = "If string.charAt(k) in [0x0080 - 0x07FF], return 2 octets (00000yyy yyzzzzzz -> 110yyyyy 10zzzzzz)")]
        public void IfStringCharAtKIn0x00800x07FFReturn2Octets00000yyyYyzzzzzz110yyyyy10zzzzzz(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.3")]
        [TestCase("S15.1.3.3_A2.3_T1.js", Description = "If string.charAt(k) in [0x0800 - 0xD7FF], return 3 octets (xxxxyyyy yyzzzzzz -> 1110xxxx 10yyyyyy 10zzzzzz)")]
        public void IfStringCharAtKIn0x08000xD7FFReturn3OctetsXxxxyyyyYyzzzzzz1110xxxx10yyyyyy10zzzzzz(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.3")]
        [TestCase("S15.1.3.3_A2.4_T1.js", Description = "If string.charAt(k) in [0xD800 - 0xDBFF] and string.charAt(k+1) in [0xDC00 \uFFFD 0xDFFF], return 4 octets (000wwwxx xxxxyyyy yyzzzzzz -> 11110www 10xxxxxx 10yyyyyy 10zzzzzz)")]
        [TestCase("S15.1.3.3_A2.4_T2.js", Description = "If string.charAt(k) in [0xD800 - 0xDBFF] and string.charAt(k+1) in [0xDC00 \uFFFD 0xDFFF], return 4 octets (000wwwxx xxxxyyyy yyzzzzzz -> 11110www 10xxxxxx 10yyyyyy 10zzzzzz)")]
        public void IfStringCharAtKIn0xD8000xDBFFAndStringCharAtK1In0xDC000xDFFFReturn4Octets000wwwxxXxxxyyyyYyzzzzzz11110www10xxxxxx10yyyyyy10zzzzzz(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.3")]
        [TestCase("S15.1.3.3_A2.5_T1.js", Description = "If string.charAt(k) in [0xE000 - 0xFFFF], return 3 octets (xxxxyyyy yyzzzzzz -> 1110xxxx 10yyyyyy 10zzzzzz)")]
        public void IfStringCharAtKIn0xE0000xFFFFReturn3OctetsXxxxyyyyYyzzzzzz1110xxxx10yyyyyy10zzzzzz(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.3")]
        [TestCase("S15.1.3.3_A3.1_T1.js", Description = "unescapedURISet containing one instance of each character valid in uriReserved")]
        public void UnescapedURISetContainingOneInstanceOfEachCharacterValidInUriReserved(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.3")]
        [TestCase("S15.1.3.3_A3.2_T1.js", Description = "unescapedURISet containing one instance of each character valid in uriUnescaped")]
        [TestCase("S15.1.3.3_A3.2_T2.js", Description = "unescapedURISet containing one instance of each character valid in uriUnescaped")]
        [TestCase("S15.1.3.3_A3.2_T3.js", Description = "unescapedURISet containing one instance of each character valid in uriUnescaped")]
        public void UnescapedURISetContainingOneInstanceOfEachCharacterValidInUriUnescaped(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.3")]
        [TestCase("S15.1.3.3_A3.3_T1.js", Description = "unescapedURISet containing \"#\"")]
        public void UnescapedURISetContaining(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.3")]
        [TestCase("S15.1.3.3_A4_T1.js", Description = "URI tests")]
        [TestCase("S15.1.3.3_A4_T2.js", Description = "URI tests")]
        [TestCase("S15.1.3.3_A4_T3.js", Description = "URI tests")]
        [TestCase("S15.1.3.3_A4_T4.js", Description = "URI tests")]
        public void URITests(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.4")]
        [Category("ECMA 15.1.3.3")]
        [Category("ECMA 15.2.4.7")]
        [TestCase("S15.1.3.3_A5.1.js", Description = "The length property of encodeURI has the attribute DontEnum")]
        public void TheLengthPropertyOfEncodeURIHasTheAttributeDontEnum(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.4.1")]
        [Category("ECMA 15.1.3.3")]
        [Category("ECMA 15.2.4.5")]
        [TestCase("S15.1.3.3_A5.2.js", Description = "The length property of encodeURI has the attribute DontDelete")]
        public void TheLengthPropertyOfEncodeURIHasTheAttributeDontDelete(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.3")]
        [TestCase("S15.1.3.3_A5.3.js", Description = "The length property of encodeURI has the attribute ReadOnly")]
        public void TheLengthPropertyOfEncodeURIHasTheAttributeReadOnly(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.3")]
        [TestCase("S15.1.3.3_A5.4.js", Description = "The length property of encodeURI is 1")]
        public void TheLengthPropertyOfEncodeURIIs1(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.4")]
        [Category("ECMA 15.1.3.3")]
        [Category("ECMA 15.2.4.7")]
        [TestCase("S15.1.3.3_A5.5.js", Description = "The encodeURI property has the attribute DontEnum")]
        public void TheEncodeURIPropertyHasTheAttributeDontEnum(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.3")]
        [TestCase("S15.1.3.3_A5.6.js", Description = "The encodeURI property has not prototype property")]
        public void TheEncodeURIPropertyHasNotPrototypeProperty(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.2.2")]
        [Category("ECMA 15.1.3.3")]
        [TestCase("S15.1.3.3_A5.7.js", Description = "The encodeURI property can\'t be used as constructor")]
        public void TheEncodeURIPropertyCanTBeUsedAsConstructor(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.3")]
        [Category("ECMA 8.6.2.6")]
        [Category("ECMA 9.8")]
        [TestCase("S15.1.3.3_A6_T1.js", Description = "Operator use ToString")]
        public void OperatorUseToString(string file)
        {
            RunFile(file);
        }
    }
}