// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.NumberObjects.PropertiesOfTheNumberPrototypeObject
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class PropertiesOfTheNumberPrototypeObjectTests : SputnikTestFixture
    {
        public PropertiesOfTheNumberPrototypeObjectTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.7_Number_Objects\15.7.4_Properties_of_the_Number_Prototype_Object")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.7.4")]
        [TestCase("S15.7.4_A1.js", Description = "The Number prototype object is itself a Number object (its [[Class]] is \"Number\") whose value is +0")]
        public void TheNumberPrototypeObjectIsItselfANumberObjectItsClassIsNumberWhoseValueIs0(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.7.4")]
        [TestCase("S15.7.4_A2.js", Description = "The value of the internal [[Prototype]] property of the Number prototype object is the Object prototype object")]
        public void TheValueOfTheInternalPrototypePropertyOfTheNumberPrototypeObjectIsTheObjectPrototypeObject(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.7.4")]
        [TestCase("S15.7.4_A3.1.js", Description = "The Number prototype object has the property constructor")]
        public void TheNumberPrototypeObjectHasThePropertyConstructor(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.7.4")]
        [TestCase("S15.7.4_A3.2.js", Description = "The Number prototype object has the property toString")]
        public void TheNumberPrototypeObjectHasThePropertyToString(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.7.4")]
        [TestCase("S15.7.4_A3.3.js", Description = "The Number prototype object has the property toLocaleString")]
        public void TheNumberPrototypeObjectHasThePropertyToLocaleString(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.7.4")]
        [TestCase("S15.7.4_A3.4.js", Description = "The Number prototype object has the property valueOf")]
        public void TheNumberPrototypeObjectHasThePropertyValueOf(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.7.4")]
        [TestCase("S15.7.4_A3.5.js", Description = "The Number prototype object has the property toFixed")]
        public void TheNumberPrototypeObjectHasThePropertyToFixed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.7.4")]
        [TestCase("S15.7.4_A3.6.js", Description = "The Number prototype object has the property toExponential")]
        public void TheNumberPrototypeObjectHasThePropertyToExponential(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.7.4")]
        [TestCase("S15.7.4_A3.7.js", Description = "The Number prototype object has the property toPrecision")]
        public void TheNumberPrototypeObjectHasThePropertyToPrecision(string file)
        {
            RunFile(file);
        }
    }
}