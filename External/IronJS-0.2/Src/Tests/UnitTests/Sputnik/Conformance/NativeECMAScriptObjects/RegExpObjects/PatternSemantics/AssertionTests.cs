// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.RegExpObjects.PatternSemantics
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class AssertionTests : SputnikTestFixture
    {
        public AssertionTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.10_RegExp_Objects\15.10.2_Pattern_Semantics\15.10.2.6_Assertion")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.2.6")]
        [TestCase("S15.10.2.6_A1_T1.js", Description = "The production Assertion :: $ evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A1_T2.js", Description = "The production Assertion :: $ evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A1_T3.js", Description = "The production Assertion :: $ evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A1_T4.js", Description = "The production Assertion :: $ evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A1_T5.js", Description = "The production Assertion :: $ evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A2_T1.js", Description = "The production Assertion :: ^ evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A2_T10.js", Description = "The production Assertion :: ^ evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A2_T2.js", Description = "The production Assertion :: ^ evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A2_T3.js", Description = "The production Assertion :: ^ evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A2_T4.js", Description = "The production Assertion :: ^ evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A2_T5.js", Description = "The production Assertion :: ^ evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A2_T6.js", Description = "The production Assertion :: ^ evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A2_T7.js", Description = "The production Assertion :: ^ evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A2_T8.js", Description = "The production Assertion :: ^ evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A2_T9.js", Description = "The production Assertion :: ^ evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        public void TheProductionAssertionEvaluatesByReturningAnInternalAssertionTesterClosureThatTakesAStateArgumentXAndPerformsThe(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.2.6")]
        [TestCase("S15.10.2.6_A3_T1.js", Description = "The production Assertion :: \\b evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A3_T10.js", Description = "The production Assertion :: \\b evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A3_T11.js", Description = "The production Assertion :: \\b evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A3_T12.js", Description = "The production Assertion :: \\b evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A3_T13.js", Description = "The production Assertion :: \\b evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A3_T14.js", Description = "The production Assertion :: \\b evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A3_T15.js", Description = "The production Assertion :: \\b evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A3_T2.js", Description = "The production Assertion :: \\b evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A3_T3.js", Description = "The production Assertion :: \\b evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A3_T4.js", Description = "The production Assertion :: \\b evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A3_T5.js", Description = "The production Assertion :: \\b evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A3_T6.js", Description = "The production Assertion :: \\b evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A3_T7.js", Description = "The production Assertion :: \\b evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A3_T8.js", Description = "The production Assertion :: \\b evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A3_T9.js", Description = "The production Assertion :: \\b evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A4_T1.js", Description = "The production Assertion :: \\B evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A4_T2.js", Description = "The production Assertion :: \\B evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A4_T3.js", Description = "The production Assertion :: \\B evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A4_T4.js", Description = "The production Assertion :: \\B evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A4_T5.js", Description = "The production Assertion :: \\B evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A4_T6.js", Description = "The production Assertion :: \\B evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A4_T7.js", Description = "The production Assertion :: \\B evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        [TestCase("S15.10.2.6_A4_T8.js", Description = "The production Assertion :: \\B evaluates by returning an internal AssertionTester closure that takes a State argument x and performs the ...")]
        public void TheProductionAssertionBEvaluatesByReturningAnInternalAssertionTesterClosureThatTakesAStateArgumentXAndPerformsThe(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.2.6")]
        [TestCase("S15.10.2.6_A5_T1.js", Description = "Since assertion evaluating do not change endIndex repetition of assertion does the same result")]
        [TestCase("S15.10.2.6_A5_T2.js", Description = "Since assertion evaluating do not change endIndex repetition of assertion does the same result")]
        public void SinceAssertionEvaluatingDoNotChangeEndIndexRepetitionOfAssertionDoesTheSameResult(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.2.6")]
        [TestCase("S15.10.2.6_A6_T1.js", Description = "Assertions in combination")]
        [TestCase("S15.10.2.6_A6_T2.js", Description = "Assertions in combination")]
        [TestCase("S15.10.2.6_A6_T3.js", Description = "Assertions in combination")]
        [TestCase("S15.10.2.6_A6_T4.js", Description = "Assertions in combination")]
        public void AssertionsInCombination(string file)
        {
            RunFile(file);
        }
    }
}