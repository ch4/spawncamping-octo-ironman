// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.StringObjects.PropertiesOfTheStringPrototypeObject
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class StringPrototypeReplaceTests : SputnikTestFixture
    {
        public StringPrototypeReplaceTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.5_String_Objects\15.5.4_Properties_of_the_String_Prototype_Object\15.5.4.11_String.prototype.replace")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.11")]
        [TestCase("S15.5.4.11_A1_T1.js", Description = "String.prototype.replace (searchValue, replaceValue)")]
        [TestCase("S15.5.4.11_A1_T10.js", Description = "String.prototype.replace (searchValue, replaceValue)")]
        [TestCase("S15.5.4.11_A1_T11.js", Description = "String.prototype.replace (searchValue, replaceValue)")]
        [TestCase("S15.5.4.11_A1_T12.js", Description = "String.prototype.replace (searchValue, replaceValue)")]
        [TestCase("S15.5.4.11_A1_T13.js", Description = "String.prototype.replace (searchValue, replaceValue)")]
        [TestCase("S15.5.4.11_A1_T14.js", Description = "String.prototype.replace (searchValue, replaceValue)")]
        [TestCase("S15.5.4.11_A1_T15.js", Description = "String.prototype.replace (searchValue, replaceValue)")]
        [TestCase("S15.5.4.11_A1_T16.js", Description = "String.prototype.replace (searchValue, replaceValue)")]
        [TestCase("S15.5.4.11_A1_T17.js", Description = "String.prototype.replace (searchValue, replaceValue)")]
        [TestCase("S15.5.4.11_A1_T2.js", Description = "String.prototype.replace (searchValue, replaceValue)")]
        [TestCase("S15.5.4.11_A1_T3.js", Description = "String.prototype.replace (searchValue, replaceValue)")]
        [TestCase("S15.5.4.11_A1_T4.js", Description = "String.prototype.replace (searchValue, replaceValue)")]
        [TestCase("S15.5.4.11_A1_T5.js", Description = "String.prototype.replace (searchValue, replaceValue)")]
        [TestCase("S15.5.4.11_A1_T6.js", Description = "String.prototype.replace (searchValue, replaceValue)")]
        [TestCase("S15.5.4.11_A1_T7.js", Description = "String.prototype.replace (searchValue, replaceValue)")]
        [TestCase("S15.5.4.11_A1_T8.js", Description = "String.prototype.replace (searchValue, replaceValue)")]
        [TestCase("S15.5.4.11_A1_T9.js", Description = "String.prototype.replace (searchValue, replaceValue)")]
        public void StringPrototypeReplaceSearchValueReplaceValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.11")]
        [TestCase("S15.5.4.11_A10.js", Description = "The String.prototype.replace.length property has the attribute ReadOnly")]
        public void TheStringPrototypeReplaceLengthPropertyHasTheAttributeReadOnly(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.11")]
        [TestCase("S15.5.4.11_A11.js", Description = "The length property of the replace method is 2")]
        public void TheLengthPropertyOfTheReplaceMethodIs2(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.11")]
        [TestCase("S15.5.4.11_A2_T1.js", Description = "The $ replacements are done left-to-right, and, once such are placement is performed, the new replacement text is not subject to further replacements")]
        [TestCase("S15.5.4.11_A2_T10.js", Description = "The $ replacements are done left-to-right, and, once such are placement is performed, the new replacement text is not subject to further replacements")]
        [TestCase("S15.5.4.11_A2_T2.js", Description = "The $ replacements are done left-to-right, and, once such are placement is performed, the new replacement text is not subject to further replacements")]
        [TestCase("S15.5.4.11_A2_T3.js", Description = "The $ replacements are done left-to-right, and, once such are placement is performed, the new replacement text is not subject to further replacements")]
        [TestCase("S15.5.4.11_A2_T4.js", Description = "The $ replacements are done left-to-right, and, once such are placement is performed, the new replacement text is not subject to further replacements")]
        [TestCase("S15.5.4.11_A2_T5.js", Description = "The $ replacements are done left-to-right, and, once such are placement is performed, the new replacement text is not subject to further replacements")]
        [TestCase("S15.5.4.11_A2_T6.js", Description = "The $ replacements are done left-to-right, and, once such are placement is performed, the new replacement text is not subject to further replacements")]
        [TestCase("S15.5.4.11_A2_T7.js", Description = "The $ replacements are done left-to-right, and, once such are placement is performed, the new replacement text is not subject to further replacements")]
        [TestCase("S15.5.4.11_A2_T8.js", Description = "The $ replacements are done left-to-right, and, once such are placement is performed, the new replacement text is not subject to further replacements")]
        [TestCase("S15.5.4.11_A2_T9.js", Description = "The $ replacements are done left-to-right, and, once such are placement is performed, the new replacement text is not subject to further replacements")]
        public void TheReplacementsAreDoneLeftToRightAndOnceSuchArePlacementIsPerformedTheNewReplacementTextIsNotSubjectToFurtherReplacements(string file)
        {
            RunFile(file);
        }

        [Test, Ignore("These tests are incorrect.  Consult ECMA-262, Section 15.5.4.11, Table 22, Item '$n'.")]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.11")]
        [TestCase("S15.5.4.11_A3_T1.js", Description = "replace with regexp /(uid=)(\\d+)/ returns")]
        [TestCase("S15.5.4.11_A3_T2.js", Description = "replace with regexp /(uid=)(\\d+)/ returns")]
        [TestCase("S15.5.4.11_A3_T3.js", Description = "replace with regexp /(uid=)(\\d+)/ returns")]
        public void ReplaceWithRegexpUidDReturns(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.11")]
        [TestCase("S15.5.4.11_A4_T1.js", Description = "replace with regexp /([a-z]+)([0-9]+)/ and replace function returns ")]
        [TestCase("S15.5.4.11_A4_T2.js", Description = "replace with regexp /([a-z]+)([0-9]+)/ and replace function returns ")]
        [TestCase("S15.5.4.11_A4_T3.js", Description = "replace with regexp /([a-z]+)([0-9]+)/ and replace function returns ")]
        [TestCase("S15.5.4.11_A4_T4.js", Description = "replace with regexp /([a-z]+)([0-9]+)/ and replace function returns ")]
        public void ReplaceWithRegexpAZ09AndReplaceFunctionReturns(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.11")]
        [TestCase("S15.5.4.11_A5_T1.js", Description = "Use replace with regexp as searchValue and use $ in replaceValue")]
        public void UseReplaceWithRegexpAsSearchValueAndUseInReplaceValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 13.2")]
        [Category("ECMA 15.5.4.11")]
        [TestCase("S15.5.4.11_A6.js", Description = "String.prototype.replace has not prototype property")]
        public void StringPrototypeReplaceHasNotPrototypeProperty(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 13.2")]
        [Category("ECMA 15.5.4.11")]
        [TestCase("S15.5.4.11_A7.js", Description = "String.prototype.replace can\'t be used as constructor")]
        public void StringPrototypeReplaceCanTBeUsedAsConstructor(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.11")]
        [TestCase("S15.5.4.11_A8.js", Description = "The String.prototype.replace.length property has the attribute DontEnum")]
        public void TheStringPrototypeReplaceLengthPropertyHasTheAttributeDontEnum(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.11")]
        [TestCase("S15.5.4.11_A9.js", Description = "The String.prototype.replace.length property has the attribute DontDelete")]
        public void TheStringPrototypeReplaceLengthPropertyHasTheAttributeDontDelete(string file)
        {
            RunFile(file);
        }
    }
}