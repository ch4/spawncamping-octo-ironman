// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.RegExpObjects.PropertiesOfTheRegExpPrototypeObject
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class RegExpPrototypeExecTests : SputnikTestFixture
    {
        public RegExpPrototypeExecTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.10_RegExp_Objects\15.10.6_Properties_of_the_RegExp_Prototype_Object\15.10.6.2_RegExp.prototype.exec")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.6.2")]
        [TestCase("S15.10.6.2_A1_T1.js", Description = "RegExp.prototype.exec(string) Performs a regular expression match of ToString(string) against the regular expression and \n* returns an Array object containing the results of the match, or null if the string did not match")]
        [TestCase("S15.10.6.2_A1_T10.js", Description = "RegExp.prototype.exec(string) Performs a regular expression match of ToString(string) against the regular expression and returns an Array object containing the results of the match, or null if the string did not match")]
        [TestCase("S15.10.6.2_A1_T11.js", Description = "RegExp.prototype.exec(string) Performs a regular expression match of ToString(string) against the regular expression and returns an Array object containing the results of the match, or null if the string did not match")]
        [TestCase("S15.10.6.2_A1_T12.js", Description = "RegExp.prototype.exec(string) Performs a regular expression match of ToString(string) against the regular expression and returns an Array object containing the results of the match, or null if the string did not match")]
        [TestCase("S15.10.6.2_A1_T13.js", Description = "RegExp.prototype.exec(string) Performs a regular expression match of ToString(string) against the regular expression and returns an Array object containing the results of the match, or null if the string did not match")]
        [TestCase("S15.10.6.2_A1_T14.js", Description = "RegExp.prototype.exec(string) Performs a regular expression match of ToString(string) against the regular expression and returns an Array object containing the results of the match, or null if the string did not match")]
        [TestCase("S15.10.6.2_A1_T15.js", Description = "RegExp.prototype.exec(string) Performs a regular expression match of ToString(string) against the regular expression and returns an Array object containing the results of the match, or null if the string did not match")]
        [TestCase("S15.10.6.2_A1_T16.js", Description = "RegExp.prototype.exec(string) Performs a regular expression match of ToString(string) against the regular expression and returns an Array object containing the results of the match, or null if the string did not match")]
        [TestCase("S15.10.6.2_A1_T17.js", Description = "RegExp.prototype.exec(string) Performs a regular expression match of ToString(string) against the regular expression and returns an Array object containing the results of the match, or null if the string did not match")]
        [TestCase("S15.10.6.2_A1_T18.js", Description = "RegExp.prototype.exec(string) Performs a regular expression match of ToString(string) against the regular expression and returns an Array object containing the results of the match, or null if the string did not match")]
        [TestCase("S15.10.6.2_A1_T19.js", Description = "RegExp.prototype.exec(string) Performs a regular expression match of ToString(string) against the regular expression and returns an Array object containing the results of the match, or null if the string did not match")]
        [TestCase("S15.10.6.2_A1_T2.js", Description = "RegExp.prototype.exec(string) Performs a regular expression match of ToString(string) against the regular expression and returns an Array object containing the results of the match, or null if the string did not match")]
        [TestCase("S15.10.6.2_A1_T20.js", Description = "RegExp.prototype.exec(string) Performs a regular expression match of ToString(string) against the regular expression and returns an Array object containing the results of the match, or null if the string did not match")]
        [TestCase("S15.10.6.2_A1_T21.js", Description = "RegExp.prototype.exec(string) Performs a regular expression match of ToString(string) against the regular expression and returns an Array object containing the results of the match, or null if the string did not match")]
        [TestCase("S15.10.6.2_A1_T3.js", Description = "RegExp.prototype.exec(string) Performs a regular expression match of ToString(string) against the regular expression and returns an Array object containing the results of the match, or null if the string did not match")]
        [TestCase("S15.10.6.2_A1_T4.js", Description = "RegExp.prototype.exec(string) Performs a regular expression match of ToString(string) against the regular expression and returns an Array object containing the results of the match, or null if the string did not match")]
        [TestCase("S15.10.6.2_A1_T5.js", Description = "RegExp.prototype.exec(string) Performs a regular expression match of ToString(string) against the regular expression and returns an Array object containing the results of the match, or null if the string did not match")]
        [TestCase("S15.10.6.2_A1_T6.js", Description = "RegExp.prototype.exec(string) Performs a regular expression match of ToString(string) against the regular expression and returns an Array object containing the results of the match, or null if the string did not match")]
        [TestCase("S15.10.6.2_A1_T7.js", Description = "RegExp.prototype.exec(string) Performs a regular expression match of ToString(string) against the regular expression and returns an Array object containing the results of the match, or null if the string did not match")]
        [TestCase("S15.10.6.2_A1_T8.js", Description = "RegExp.prototype.exec(string) Performs a regular expression match of ToString(string) against the regular expression and returns an Array object containing the results of the match, or null if the string did not match")]
        [TestCase("S15.10.6.2_A1_T9.js", Description = "RegExp.prototype.exec(string) Performs a regular expression match of ToString(string) against the regular expression and returns an Array object containing the results of the match, or null if the string did not match")]
        public void RegExpPrototypeExecStringPerformsARegularExpressionMatchOfToStringAndReturnsAnArrayObjectContainingTheResultsOrNull(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.6.2")]
        [TestCase("S15.10.6.2_A10.js", Description = "The RegExp.prototype.exec.length property has the attribute ReadOnly")]
        public void TheRegExpPrototypeExecLengthPropertyHasTheAttributeReadOnly(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.6.2")]
        [TestCase("S15.10.6.2_A11.js", Description = "The length property of the exec method is 1")]
        public void TheLengthPropertyOfTheExecMethodIs1(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.6.2")]
        [TestCase("S15.10.6.2_A2_T1.js", Description = "A TypeError exception is thrown if the this value is not an object for which the value of the internal [[Class]] property is \"RegExp\"")]
        [TestCase("S15.10.6.2_A2_T10.js", Description = "A TypeError exception is thrown if the this value is not an object for which the value of the internal [[Class]] property is \"RegExp\"")]
        [TestCase("S15.10.6.2_A2_T2.js", Description = "A TypeError exception is thrown if the this value is not an object for which the value of the internal [[Class]] property is \"RegExp\"")]
        [TestCase("S15.10.6.2_A2_T3.js", Description = "A TypeError exception is thrown if the this value is not an object for which the value of the internal [[Class]] property is \"RegExp\"")]
        [TestCase("S15.10.6.2_A2_T4.js", Description = "A TypeError exception is thrown if the this value is not an object for which the value of the internal [[Class]] property is \"RegExp\"")]
        [TestCase("S15.10.6.2_A2_T5.js", Description = "A TypeError exception is thrown if the this value is not an object for which the value of the internal [[Class]] property is \"RegExp\"")]
        [TestCase("S15.10.6.2_A2_T6.js", Description = "A TypeError exception is thrown if the this value is not an object for which the value of the internal [[Class]] property is \"RegExp\"")]
        [TestCase("S15.10.6.2_A2_T7.js", Description = "A TypeError exception is thrown if the this value is not an object for which the value of the internal [[Class]] property is \"RegExp\"")]
        [TestCase("S15.10.6.2_A2_T8.js", Description = "A TypeError exception is thrown if the this value is not an object for which the value of the internal [[Class]] property is \"RegExp\"")]
        [TestCase("S15.10.6.2_A2_T9.js", Description = "A TypeError exception is thrown if the this value is not an object for which the value of the internal [[Class]] property is \"RegExp\"")]
        public void ATypeErrorExceptionIsThrownIfTheThisValueIsNotAnObjectForWhichTheValueOfTheInternalClassPropertyIsRegExp(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 13.2")]
        [Category("ECMA 15.10.6.2")]
        [TestCase("S15.10.6.2_A3_T1.js", Description = "RegExp.prototype.exec behavior depends on global property. If global is true and lastIndex not changed manually, next exec calling start to match from position where current match finished")]
        [TestCase("S15.10.6.2_A3_T2.js", Description = "RegExp.prototype.exec behavior depends on global property. If global is true and lastIndex not changed manually, next exec calling start to match from position where current match finished")]
        [TestCase("S15.10.6.2_A3_T3.js", Description = "RegExp.prototype.exec behavior depends on global property. If global is true and lastIndex not changed manually, next exec calling start to match from position where current match finished")]
        [TestCase("S15.10.6.2_A3_T4.js", Description = "RegExp.prototype.exec behavior depends on global property. If global is true and lastIndex not changed manually, next exec calling start to match from position where current match finished")]
        [TestCase("S15.10.6.2_A3_T5.js", Description = "RegExp.prototype.exec behavior depends on global property. If global is true and lastIndex not changed manually, next exec calling start to match from position where current match finished")]
        [TestCase("S15.10.6.2_A3_T6.js", Description = "RegExp.prototype.exec behavior depends on global property. If global is true and lastIndex not changed manually, next exec calling start to match from position where current match finished")]
        [TestCase("S15.10.6.2_A3_T7.js", Description = "RegExp.prototype.exec behavior depends on global property. If global is true and lastIndex not changed manually, next exec calling start to match from position where current match finished")]
        public void RegExpPrototypeExecBehaviorDependsOnGlobalPropertyIfGlobalIsTrueAndLastIndexNotChangedManuallyNextExecCallingStartToMatchFromPositionWhereCurrentMatchFinished(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 13.2")]
        [Category("ECMA 15.10.6.2")]
        [TestCase("S15.10.6.2_A4_T1.js", Description = "RegExp.prototype.exec behavior depends on global property. If global is true next exec calling start to match from lastIndex position")]
        [TestCase("S15.10.6.2_A4_T10.js", Description = "RegExp.prototype.exec behavior depends on global property. If global is true next exec calling start to match from lastIndex position")]
        [TestCase("S15.10.6.2_A4_T11.js", Description = "RegExp.prototype.exec behavior depends on global property. If global is true next exec calling start to match from lastIndex position")]
        [TestCase("S15.10.6.2_A4_T12.js", Description = "RegExp.prototype.exec behavior depends on global property. If global is true next exec calling start to match from lastIndex position")]
        [TestCase("S15.10.6.2_A4_T2.js", Description = "RegExp.prototype.exec behavior depends on global property. If global is true next exec calling start to match from lastIndex position")]
        [TestCase("S15.10.6.2_A4_T3.js", Description = "RegExp.prototype.exec behavior depends on global property. If global is true next exec calling start to match from lastIndex position")]
        [TestCase("S15.10.6.2_A4_T4.js", Description = "RegExp.prototype.exec behavior depends on global property. If global is true next exec calling start to match from lastIndex position")]
        [TestCase("S15.10.6.2_A4_T5.js", Description = "RegExp.prototype.exec behavior depends on global property. If global is true next exec calling start to match from lastIndex position")]
        [TestCase("S15.10.6.2_A4_T6.js", Description = "RegExp.prototype.exec behavior depends on global property. If global is true next exec calling start to match from lastIndex position")]
        [TestCase("S15.10.6.2_A4_T7.js", Description = "RegExp.prototype.exec behavior depends on global property. If global is true next exec calling start to match from lastIndex position")]
        [TestCase("S15.10.6.2_A4_T8.js", Description = "RegExp.prototype.exec behavior depends on global property. If global is true next exec calling start to match from lastIndex position")]
        [TestCase("S15.10.6.2_A4_T9.js", Description = "RegExp.prototype.exec behavior depends on global property. If global is true next exec calling start to match from lastIndex position")]
        public void RegExpPrototypeExecBehaviorDependsOnGlobalPropertyIfGlobalIsTrueNextExecCallingStartToMatchFromLastIndexPosition(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 13.2")]
        [Category("ECMA 15.10.6.2")]
        [TestCase("S15.10.6.2_A5_T1.js", Description = "RegExp.prototype.exec behavior depends on global property. Let global is true and let I = If ToInteger(lastIndex). Then if I<0 orI>length then set lastIndex to 0 and return null")]
        [TestCase("S15.10.6.2_A5_T2.js", Description = "RegExp.prototype.exec behavior depends on global property. Let global is true and let I = If ToInteger(lastIndex). Then if I<0 orI>length then set lastIndex to 0 and return null")]
        [TestCase("S15.10.6.2_A5_T3.js", Description = "RegExp.prototype.exec behavior depends on global property. Let global is true and let I = If ToInteger(lastIndex). Then if I<0 orI>length then set lastIndex to 0 and return null")]
        public void RegExpPrototypeExecBehaviorDependsOnGlobalPropertyLetGlobalIsTrueAndLetIIfToIntegerLastIndexThenIfI0OrILengthThenSetLastIndexTo0AndReturnNull(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 13.2")]
        [Category("ECMA 15.10.6.2")]
        [TestCase("S15.10.6.2_A6.js", Description = "RegExp.prototype.exec has not prototype property")]
        public void RegExpPrototypeExecHasNotPrototypeProperty(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 13.2")]
        [Category("ECMA 15.10.6.2")]
        [TestCase("S15.10.6.2_A7.js", Description = "RegExp.prototype.exec can\'t be used as constructor")]
        public void RegExpPrototypeExecCanTBeUsedAsConstructor(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.6.2")]
        [TestCase("S15.10.6.2_A8.js", Description = "The RegExp.prototype.exec.length property has the attribute DontEnum")]
        public void TheRegExpPrototypeExecLengthPropertyHasTheAttributeDontEnum(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.6.2")]
        [TestCase("S15.10.6.2_A9.js", Description = "The RegExp.prototype.exec.length property has the attribute DontDelete")]
        public void TheRegExpPrototypeExecLengthPropertyHasTheAttributeDontDelete(string file)
        {
            RunFile(file);
        }
    }
}