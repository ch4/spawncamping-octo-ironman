// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.ArrayObjects.PropertiesOfTheArrayPrototypeObject
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class ArrayPrototypeSliceTests : SputnikTestFixture
    {
        public ArrayPrototypeSliceTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.4_Array_Objects\15.4.4_Properties_of_the_Array_Prototype_Object\15.4.4.10_Array_prototype_slice")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.4.4.10")]
        [TestCase("S15.4.4.10_A1.1_T1.js", Description = "If start is positive, use min(start, length). If end is positive, use min(end, length)")]
        [TestCase("S15.4.4.10_A1.1_T2.js", Description = "If start is positive, use min(start, length). If end is positive, use min(end, length)")]
        [TestCase("S15.4.4.10_A1.1_T3.js", Description = "If start is positive, use min(start, length). If end is positive, use min(end, length)")]
        [TestCase("S15.4.4.10_A1.1_T4.js", Description = "If start is positive, use min(start, length). If end is positive, use min(end, length)")]
        [TestCase("S15.4.4.10_A1.1_T5.js", Description = "If start is positive, use min(start, length). If end is positive, use min(end, length)")]
        [TestCase("S15.4.4.10_A1.1_T6.js", Description = "If start is positive, use min(start, length). If end is positive, use min(end, length)")]
        [TestCase("S15.4.4.10_A1.1_T7.js", Description = "If start is positive, use min(start, length). If end is positive, use min(end, length)")]
        public void IfStartIsPositiveUseMinStartLengthIfEndIsPositiveUseMinEndLength(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.4.4.10")]
        [TestCase("S15.4.4.10_A1.2_T1.js", Description = "If start is negative, use max(start + length, 0). If end is positive, use min(end, length)")]
        [TestCase("S15.4.4.10_A1.2_T2.js", Description = "If start is negative, use max(start + length, 0). If end is positive, use min(end, length)")]
        [TestCase("S15.4.4.10_A1.2_T3.js", Description = "If start is negative, use max(start + length, 0). If end is positive, use min(end, length)")]
        [TestCase("S15.4.4.10_A1.2_T4.js", Description = "If start is negative, use max(start + length, 0). If end is positive, use min(end, length)")]
        public void IfStartIsNegativeUseMaxStartLength0IfEndIsPositiveUseMinEndLength(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.4.4.10")]
        [TestCase("S15.4.4.10_A1.3_T1.js", Description = "If start is positive, use min(start, length). If end is negative, use max(end + length, 0)")]
        [TestCase("S15.4.4.10_A1.3_T2.js", Description = "If start is positive, use min(start, length). If end is negative, use max(end + length, 0)")]
        [TestCase("S15.4.4.10_A1.3_T3.js", Description = "If start is positive, use min(start, length). If end is negative, use max(end + length, 0)")]
        [TestCase("S15.4.4.10_A1.3_T4.js", Description = "If start is positive, use min(start, length). If end is negative, use max(end + length, 0)")]
        public void IfStartIsPositiveUseMinStartLengthIfEndIsNegativeUseMaxEndLength0(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.4.4.10")]
        [TestCase("S15.4.4.10_A1.4_T1.js", Description = "If start is negative, use max(start + length, 0). If end is negative, use max(end + length, 0)")]
        [TestCase("S15.4.4.10_A1.4_T2.js", Description = "If start is negative, use max(start + length, 0). If end is negative, use max(end + length, 0)")]
        [TestCase("S15.4.4.10_A1.4_T3.js", Description = "If start is negative, use max(start + length, 0). If end is negative, use max(end + length, 0)")]
        [TestCase("S15.4.4.10_A1.4_T4.js", Description = "If start is negative, use max(start + length, 0). If end is negative, use max(end + length, 0)")]
        public void IfStartIsNegativeUseMaxStartLength0IfEndIsNegativeUseMaxEndLength0(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.4.4.10")]
        [TestCase("S15.4.4.10_A1.5_T1.js", Description = "If end is undefined use length")]
        [TestCase("S15.4.4.10_A1.5_T2.js", Description = "If end is undefined use length")]
        public void IfEndIsUndefinedUseLength(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.4.4.10")]
        [TestCase("S15.4.4.10_A2.1_T1.js", Description = "Operator use ToInteger from start")]
        [TestCase("S15.4.4.10_A2.1_T2.js", Description = "Operator use ToInteger from start")]
        [TestCase("S15.4.4.10_A2.1_T3.js", Description = "Operator use ToInteger from start")]
        [TestCase("S15.4.4.10_A2.1_T4.js", Description = "Operator use ToInteger from start")]
        [TestCase("S15.4.4.10_A2.1_T5.js", Description = "Operator use ToInteger from start")]
        public void OperatorUseToIntegerFromStart(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.4.4.10")]
        [TestCase("S15.4.4.10_A2.2_T1.js", Description = "Operator use ToInteger from end")]
        [TestCase("S15.4.4.10_A2.2_T2.js", Description = "Operator use ToInteger from end")]
        [TestCase("S15.4.4.10_A2.2_T3.js", Description = "Operator use ToInteger from end")]
        [TestCase("S15.4.4.10_A2.2_T4.js", Description = "Operator use ToInteger from end")]
        [TestCase("S15.4.4.10_A2.2_T5.js", Description = "Operator use ToInteger from end")]
        public void OperatorUseToIntegerFromEnd(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.4.4.10")]
        [TestCase("S15.4.4.10_A2_T1.js", Description = "The slice function is intentionally generic. It does not require that its this value be an Array object")]
        [TestCase("S15.4.4.10_A2_T2.js", Description = "The slice function is intentionally generic. It does not require that its this value be an Array object")]
        [TestCase("S15.4.4.10_A2_T3.js", Description = "The slice function is intentionally generic. It does not require that its this value be an Array object")]
        [TestCase("S15.4.4.10_A2_T4.js", Description = "The slice function is intentionally generic. It does not require that its this value be an Array object")]
        [TestCase("S15.4.4.10_A2_T5.js", Description = "The slice function is intentionally generic. It does not require that its this value be an Array object")]
        [TestCase("S15.4.4.10_A2_T6.js", Description = "The slice function is intentionally generic. It does not require that its this value be an Array object")]
        public void TheSliceFunctionIsIntentionallyGenericItDoesNotRequireThatItsThisValueBeAnArrayObject(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.4.4.10")]
        [TestCase("S15.4.4.10_A3_T1.js", Description = "Check ToUint32(length) for non Array objects")]
        [TestCase("S15.4.4.10_A3_T2.js", Description = "Check ToUint32(length) for non Array objects")]
        [TestCase("S15.4.4.10_A3_T3.js", Description = "Check ToUint32(length) for non Array objects")]
        public void CheckToUint32LengthForNonArrayObjects(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.2.4.5")]
        [Category("ECMA 15.4.4.10")]
        [Category("ECMA 8.6.2.1")]
        [TestCase("S15.4.4.10_A4_T1.js", Description = "[[Get]] from not an inherited property")]
        public void GetFromNotAnInheritedProperty(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.4")]
        [Category("ECMA 15.2.4.7")]
        [Category("ECMA 15.4.4.10")]
        [TestCase("S15.4.4.10_A5.1.js", Description = "The length property of slice has the attribute DontEnum")]
        public void TheLengthPropertyOfSliceHasTheAttributeDontEnum(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.4.1")]
        [Category("ECMA 15.2.4.5")]
        [Category("ECMA 15.4.4.10")]
        [TestCase("S15.4.4.10_A5.2.js", Description = "The length property of slice has the attribute DontDelete")]
        public void TheLengthPropertyOfSliceHasTheAttributeDontDelete(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.4.4.10")]
        [TestCase("S15.4.4.10_A5.3.js", Description = "The length property of slice has the attribute ReadOnly")]
        public void TheLengthPropertyOfSliceHasTheAttributeReadOnly(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.4.4.10")]
        [TestCase("S15.4.4.10_A5.4.js", Description = "The length property of slice is 2")]
        public void TheLengthPropertyOfSliceIs2(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.4")]
        [Category("ECMA 15.2.4.7")]
        [Category("ECMA 15.4.4.10")]
        [TestCase("S15.4.4.10_A5.5.js", Description = "The slice property of Array has the attribute DontEnum")]
        public void TheSlicePropertyOfArrayHasTheAttributeDontEnum(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.4.4.10")]
        [TestCase("S15.4.4.10_A5.6.js", Description = "The slice property of Array has not prototype property")]
        public void TheSlicePropertyOfArrayHasNotPrototypeProperty(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.2.2")]
        [Category("ECMA 15.4.4.10")]
        [TestCase("S15.4.4.10_A5.7.js", Description = "The slice property of Array can\'t be used as constructor")]
        public void TheSlicePropertyOfArrayCanTBeUsedAsConstructor(string file)
        {
            RunFile(file);
        }
    }
}