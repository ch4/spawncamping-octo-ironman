// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.ArrayObjects.PropertiesOfArrayInstances
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class PutTests : SputnikTestFixture
    {
        public PutTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.4_Array_Objects\15.4.5_Properties_of_Array_Instances\15.4.5.1_Put")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.4")]
        [Category("ECMA 15.4.5.1")]
        [TestCase("S15.4.5.1_A1.1_T1.js", Description = "If ToUint32(length) !== ToNumber(length), throw RangeError")]
        [TestCase("S15.4.5.1_A1.1_T2.js", Description = "If ToUint32(length) !== ToNumber(length), throw RangeError")]
        public void IfToUint32LengthToNumberLengthThrowRangeError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.2.4.5")]
        [Category("ECMA 15.4")]
        [Category("ECMA 15.4.5.1")]
        [TestCase("S15.4.5.1_A1.2_T1.js", Description = "For every integer k that is less than the value of the length property of A but not less than ToUint32(length), if A itself has a property (not an inherited property) named ToString(k), then delete that property")]
        [TestCase("S15.4.5.1_A1.2_T2.js", Description = "For every integer k that is less than the value of the length property of A but not less than ToUint32(length), if A itself has a property (not an inherited property) named ToString(k), then delete that property")]
        [TestCase("S15.4.5.1_A1.2_T3.js", Description = "For every integer k that is less than the value of the length property of A but not less than ToUint32(length), if A itself has a property (not an inherited property) named ToString(k), then delete that property")]
        public void ForEveryIntegerKThatIsLessThanTheValueOfTheLengthPropertyOfAButNotLessThanToUint32LengthIfAItselfHasAPropertyNotAnInheritedPropertyNamedToStringKThenDeleteThatProperty(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.4")]
        [Category("ECMA 15.4.5.1")]
        [TestCase("S15.4.5.1_A1.3_T1.js", Description = "Set the value of property length of A to Uint32(length)")]
        [TestCase("S15.4.5.1_A1.3_T2.js", Description = "Set the value of property length of A to Uint32(length)")]
        public void SetTheValueOfPropertyLengthOfAToUint32Length(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.4")]
        [Category("ECMA 15.4.5.1")]
        [TestCase("S15.4.5.1_A2.1_T1.js", Description = "If P is not an array index, return (Create a property with name P, set its value to V and give it empty attributes)")]
        public void IfPIsNotAnArrayIndexReturnCreateAPropertyWithNamePSetItsValueToVAndGiveItEmptyAttributes(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.4")]
        [Category("ECMA 15.4.5.1")]
        [TestCase("S15.4.5.1_A2.2_T1.js", Description = "If ToUint32(P) is less than the value of the length property of A, then return")]
        public void IfToUint32PIsLessThanTheValueOfTheLengthPropertyOfAThenReturn(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.4")]
        [Category("ECMA 15.4.5.1")]
        [TestCase("S15.4.5.1_A2.3_T1.js", Description = "If ToUint32(P) is less than the value of the length property of A, change (or set) length to ToUint32(P)+1")]
        public void IfToUint32PIsLessThanTheValueOfTheLengthPropertyOfAChangeOrSetLengthToToUint32P1(string file)
        {
            RunFile(file);
        }
    }
}