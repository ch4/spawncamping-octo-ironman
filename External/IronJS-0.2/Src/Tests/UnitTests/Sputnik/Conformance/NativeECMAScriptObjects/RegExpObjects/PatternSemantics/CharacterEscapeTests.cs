// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.RegExpObjects.PatternSemantics
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class CharacterEscapeTests : SputnikTestFixture
    {
        public CharacterEscapeTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.10_RegExp_Objects\15.10.2_Pattern_Semantics\15.10.2.10_CharacterEscape")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.2.10")]
        [TestCase("S15.10.2.10_A1.1_T1.js", Description = "The production CharacterEscape :: t evaluates by returning the character \\u0009")]
        public void TheProductionCharacterEscapeTEvaluatesByReturningTheCharacterU0009(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.2.10")]
        [TestCase("S15.10.2.10_A1.2_T1.js", Description = "The production CharacterEscape :: n evaluates by returning the character \\u000A")]
        public void TheProductionCharacterEscapeNEvaluatesByReturningTheCharacterU000A(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.2.10")]
        [TestCase("S15.10.2.10_A1.3_T1.js", Description = "The production CharacterEscape :: v evaluates by returning the character \\u000B")]
        public void TheProductionCharacterEscapeVEvaluatesByReturningTheCharacterU000B(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.2.10")]
        [TestCase("S15.10.2.10_A1.4_T1.js", Description = "The production CharacterEscape :: f evaluates by returning the character \\u000C")]
        public void TheProductionCharacterEscapeFEvaluatesByReturningTheCharacterU000C(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.2.10")]
        [TestCase("S15.10.2.10_A1.5_T1.js", Description = "The production CharacterEscape :: r evaluates by returning the character \\u000D")]
        public void TheProductionCharacterEscapeREvaluatesByReturningTheCharacterU000D(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.2.10")]
        [TestCase("S15.10.2.10_A2.1_T1.js", Description = "CharacterEscape :: c ControlLetter")]
        [TestCase("S15.10.2.10_A2.1_T2.js", Description = "CharacterEscape :: c ControlLetter")]
        [TestCase("S15.10.2.10_A2.1_T3.js", Description = "CharacterEscape :: c ControlLetter")]
        public void CharacterEscapeCControlLetter(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.2.10")]
        [TestCase("S15.10.2.10_A3.1_T1.js", Description = "CharacterEscape :: HexEscapeSequence :: x HexDigit HexDigit")]
        [TestCase("S15.10.2.10_A3.1_T2.js", Description = "CharacterEscape :: HexEscapeSequence :: x HexDigit HexDigit")]
        public void CharacterEscapeHexEscapeSequenceXHexDigitHexDigit(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.2.10")]
        [TestCase("S15.10.2.10_A4.1_T1.js", Description = "CharacterEscape :: UnicodeEscapeSequence :: u HexDigit HexDigit HexDigit HexDigit")]
        [TestCase("S15.10.2.10_A4.1_T2.js", Description = "CharacterEscape :: UnicodeEscapeSequence :: u HexDigit HexDigit HexDigit HexDigit")]
        [TestCase("S15.10.2.10_A4.1_T3.js", Description = "CharacterEscape :: UnicodeEscapeSequence :: u HexDigit HexDigit HexDigit HexDigit")]
        public void CharacterEscapeUnicodeEscapeSequenceUHexDigitHexDigitHexDigitHexDigit(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.2.10")]
        [TestCase("S15.10.2.10_A5.1_T1.js", Description = "CharacterEscape :: IdentityEscapeSequence :: SourceCharacter but not IdentifierPart")]
        public void CharacterEscapeIdentityEscapeSequenceSourceCharacterButNotIdentifierPart(string file)
        {
            RunFile(file);
        }
    }
}