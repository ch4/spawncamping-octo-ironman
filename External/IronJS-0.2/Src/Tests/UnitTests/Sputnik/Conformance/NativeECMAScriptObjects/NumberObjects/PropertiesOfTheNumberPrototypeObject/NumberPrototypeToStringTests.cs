// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.NumberObjects.PropertiesOfTheNumberPrototypeObject
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class NumberPrototypeToStringTests : SputnikTestFixture
    {
        public NumberPrototypeToStringTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.7_Number_Objects\15.7.4_Properties_of_the_Number_Prototype_Object\15.7.4.2_Number.prototype.toString")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.7.4.2")]
        [TestCase("S15.7.4.2_A1_T01.js", Description = "toString: If radix is the number 10 or undefined, then this number value is given as an argument to the ToString operator. the resulting string value is returned")]
        [TestCase("S15.7.4.2_A1_T02.js", Description = "toString: If radix is the number 10 or undefined, then this number value is given as an argument to the ToString operator. the resulting string value is returned")]
        [TestCase("S15.7.4.2_A1_T03.js", Description = "toString: If radix is the number 10 or undefined, then this number value is given as an argument to the ToString operator. the resulting string value is returned")]
        public void ToStringIfRadixIsTheNumber10OrUndefinedThenThisNumberValueIsGivenAsAnArgumentToTheToStringOperatorTheResultingStringValueIsReturned(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.7.4.2")]
        [TestCase("S15.7.4.2_A2_T01.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T02.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T03.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T04.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T05.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T06.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T07.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T08.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T09.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T10.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T11.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T12.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T13.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T14.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T15.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T16.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T17.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T18.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T19.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T20.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T21.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T22.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T23.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T24.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T25.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T26.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T27.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T28.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T29.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T30.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T31.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T32.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T33.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        [TestCase("S15.7.4.2_A2_T34.js", Description = "toString: If radix is an integer from 2 to 36, but not 10, the result is a string, the choice of which is implementation-dependent")]
        public void ToStringIfRadixIsAnIntegerFrom2To36ButNot10TheResultIsAStringTheChoiceOfWhichIsImplementationDependent(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.7.4.2")]
        [TestCase("S15.7.4.2_A3_T01.js", Description = "toString: radix should be an integer between 2 and 36")]
        [TestCase("S15.7.4.2_A3_T02.js", Description = "toString: radix should be an integer between 2 and 36")]
        [TestCase("S15.7.4.2_A3_T03.js", Description = "toString: radix should be an integer between 2 and 36")]
        [TestCase("S15.7.4.2_A3_T04.js", Description = "toString: radix should be an integer between 2 and 36")]
        public void ToStringRadixShouldBeAnIntegerBetween2And36(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.7.4.2")]
        [TestCase("S15.7.4.2_A4_T01.js", Description = "The toString function is not generic, it cannot be transferred to other kinds of objects for use as a method and there is should be a TypeError exception if its this value is not a Number object")]
        [TestCase("S15.7.4.2_A4_T02.js", Description = "The toString function is not generic, it cannot be transferred to other kinds of objects for use as a method and there is should be a TypeError exception if its this value is not a Number object")]
        [TestCase("S15.7.4.2_A4_T03.js", Description = "The toString function is not generic, it cannot be transferred to other kinds of objects for use as a method and there is should be a TypeError exception if its this value is not a Number object")]
        [TestCase("S15.7.4.2_A4_T04.js", Description = "The toString function is not generic, it cannot be transferred to other kinds of objects for use as a method and there is should be a TypeError exception if its this value is not a Number object")]
        [TestCase("S15.7.4.2_A4_T05.js", Description = "The toString function is not generic, it cannot be transferred to other kinds of objects for use as a method and there is should be a TypeError exception if its this value is not a Number object")]
        public void TheToStringFunctionIsNotGenericItCannotBeTransferredToOtherKindsOfObjectsForUseAsAMethodAndThereIsShouldBeATypeErrorExceptionIfItsThisValueIsNotANumberObject(string file)
        {
            RunFile(file);
        }
    }
}