// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.TheMathObject.FunctionPropertiesOfTheMathObject
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class Atan2Tests : SputnikTestFixture
    {
        public Atan2Tests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.8_The_Math_Object\15.8.2_Function_Properties_of_the_Math_Object\15.8.2.5_atan2")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.8.2.5")]
        [TestCase("S15.8.2.5_A1.js", Description = "If either x or y is NaN, Math(x,y) is NaN")]
        public void IfEitherXOrYIsNaNMathXYIsNaN(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.8.2.5")]
        [TestCase("S15.8.2.5_A10.js", Description = "If y is -0 and x is -0, Math.atan2(y,x) is an implementation-dependent approximation to -PI")]
        [TestCase("S15.8.2.5_A6.js", Description = "If y is +0 and x is -0, Math.atan2(y,x) is an implementation-dependent approximation to +PI")]
        public void IfYIs0AndXIs0MathAtan2YXIsAnImplementationDependentApproximationToPI(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.8.2.5")]
        [TestCase("S15.8.2.5_A11.js", Description = "If y is equal to -0 and x<0, Math.atan2(y,x) is an implementation-dependent approximation to -PI")]
        [TestCase("S15.8.2.5_A7.js", Description = "If y is equal to +0 and x<0, Math.atan2(y,x) is an implementation-dependent approximation to +PI")]
        public void IfYIsEqualTo0AndX0MathAtan2YXIsAnImplementationDependentApproximationToPI(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.8.2.5")]
        [TestCase("S15.8.2.5_A12.js", Description = "If y<0 and x is +0, Math.atan2(y,x) is an implementation-dependent approximation to -PI/2")]
        [TestCase("S15.8.2.5_A13.js", Description = "If y<0 and x is -0, Math.atan2(y,x) is an implementation-dependent approximation to -PI/2")]
        [TestCase("S15.8.2.5_A2.js", Description = "If y>0 and x is +0, Math.atan2(y,x) is an implementation-dependent approximation to +PI/2")]
        [TestCase("S15.8.2.5_A3.js", Description = "If y>0 and x is -0, Math.atan2(y,x) is an implementation-dependent approximation to +PI/2")]
        public void IfY0AndXIs0MathAtan2YXIsAnImplementationDependentApproximationToPI2(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.8.2.5")]
        [TestCase("S15.8.2.5_A14.js", Description = "If y>0 and y is finite and x is equal to +Infinity, Math.atan2(y,x) is +0")]
        [TestCase("S15.8.2.5_A16.js", Description = "If y<0 and y is finite and x is equal to +Infinity, Math.atan2(y,x) is -0")]
        public void IfY0AndYIsFiniteAndXIsEqualToInfinityMathAtan2YXIs0(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.8.2.5")]
        [TestCase("S15.8.2.5_A15.js", Description = "If y>0 and y is finite and x is equal to -Infinity, Math.atan2(y,x) is an implementation-dependent approximation to +PI")]
        [TestCase("S15.8.2.5_A17.js", Description = "If y<0 and y is finite and x is equal to -Infinity, Math.atan2(y,x) is an implementation-dependent approximation to -PI")]
        public void IfY0AndYIsFiniteAndXIsEqualToInfinityMathAtan2YXIsAnImplementationDependentApproximationToPI(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.8.2.5")]
        [TestCase("S15.8.2.5_A18.js", Description = "If y is +Infinity and x is finite, Math.atan2(y,x) is an implementation-dependent approximation to +PI/2")]
        [TestCase("S15.8.2.5_A19.js", Description = "If y is -Infinity and x is finite, Math.atan2(y,x) is an implementation-dependent approximation to -PI/2")]
        public void IfYIsInfinityAndXIsFiniteMathAtan2YXIsAnImplementationDependentApproximationToPI2(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.8.2.5")]
        [TestCase("S15.8.2.5_A20.js", Description = "If y is equal to +Infinity and x is equal to +Infinity, Math.atan2(y,x) is an implementation-dependent approximation to +PI/4")]
        [TestCase("S15.8.2.5_A22.js", Description = "If y is equal to -Infinity and x is equal to +Infinity, Math.atan2(y,x) is an implementation-dependent approximation to -PI/4")]
        public void IfYIsEqualToInfinityAndXIsEqualToInfinityMathAtan2YXIsAnImplementationDependentApproximationToPI4(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.8.2.5")]
        [TestCase("S15.8.2.5_A21.js", Description = "If y is equal to +Infinity and x is equal to -Infinity, Math.atan2(y,x) is an implementation-dependent approximation to +3*PI/4")]
        [TestCase("S15.8.2.5_A23.js", Description = "If y is equal to -Infinity and x is equal to -Infinity, Math.atan2(y,x) is an implementation-dependent approximation to -3*PI/4")]
        public void IfYIsEqualToInfinityAndXIsEqualToInfinityMathAtan2YXIsAnImplementationDependentApproximationTo3PI4(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.8.2.5")]
        [TestCase("S15.8.2.5_A24.js", Description = "Math.atan2, recommended that implementations use the approximation algorithms for IEEE 754 arithmetic contained in fdlibm")]
        public void MathAtan2RecommendedThatImplementationsUseTheApproximationAlgorithmsForIEEE754ArithmeticContainedInFdlibm(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.8.2.5")]
        [TestCase("S15.8.2.5_A4.js", Description = "If y is +0 and x>0, Math.atan2(y,x) is +0")]
        public void IfYIs0AndX0MathAtan2YXIs0(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.8.2.5")]
        [TestCase("S15.8.2.5_A5.js", Description = "If y is +0 and x is +0, Math.atan2(y,x) is +0")]
        [TestCase("S15.8.2.5_A9.js", Description = "If y is -0 and x is +0, Math.atan2(y,x) is -0")]
        public void IfYIs0AndXIs0MathAtan2YXIs0(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.8.2.5")]
        [TestCase("S15.8.2.5_A8.js", Description = "If y is equal to -0 and x>0, Math.atan2(y,x) is -0")]
        public void IfYIsEqualTo0AndX0MathAtan2YXIs0(string file)
        {
            RunFile(file);
        }
    }
}