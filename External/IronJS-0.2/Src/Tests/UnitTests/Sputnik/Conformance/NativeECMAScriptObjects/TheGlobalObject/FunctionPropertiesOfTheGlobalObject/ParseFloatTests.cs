// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.TheGlobalObject.FunctionPropertiesOfTheGlobalObject
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class ParseFloatTests : SputnikTestFixture
    {
        public ParseFloatTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.1_The_Global_Object\15.1.2_Function_Properties_of_the_Global_Object\15.1.2.3_parseFloat")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.3")]
        [Category("ECMA 8.6.2.6")]
        [Category("ECMA 9.8")]
        [TestCase("S15.1.2.3_A1_T1.js", Description = "Operator use ToString")]
        [TestCase("S15.1.2.3_A1_T2.js", Description = "Operator use ToString")]
        [TestCase("S15.1.2.3_A1_T3.js", Description = "Operator use ToString")]
        [TestCase("S15.1.2.3_A1_T4.js", Description = "Operator use ToString")]
        [TestCase("S15.1.2.3_A1_T5.js", Description = "Operator use ToString")]
        [TestCase("S15.1.2.3_A1_T6.js", Description = "Operator use ToString")]
        [TestCase("S15.1.2.3_A1_T7.js", Description = "Operator use ToString")]
        public void OperatorUseToString(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.3")]
        [TestCase("S15.1.2.3_A2_T1.js", Description = "Operator remove leading StrWhiteSpaceChar")]
        [TestCase("S15.1.2.3_A2_T10.js", Description = "Operator remove leading StrWhiteSpaceChar")]
        [TestCase("S15.1.2.3_A2_T2.js", Description = "Operator remove leading StrWhiteSpaceChar")]
        [TestCase("S15.1.2.3_A2_T3.js", Description = "Operator remove leading StrWhiteSpaceChar")]
        [TestCase("S15.1.2.3_A2_T4.js", Description = "Operator remove leading StrWhiteSpaceChar")]
        [TestCase("S15.1.2.3_A2_T5.js", Description = "Operator remove leading StrWhiteSpaceChar")]
        [TestCase("S15.1.2.3_A2_T6.js", Description = "Operator remove leading StrWhiteSpaceChar")]
        [TestCase("S15.1.2.3_A2_T7.js", Description = "Operator remove leading StrWhiteSpaceChar")]
        [TestCase("S15.1.2.3_A2_T8.js", Description = "Operator remove leading StrWhiteSpaceChar")]
        [TestCase("S15.1.2.3_A2_T9.js", Description = "Operator remove leading StrWhiteSpaceChar")]
        public void OperatorRemoveLeadingStrWhiteSpaceChar(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.3")]
        [Category("ECMA 9.3.1")]
        [TestCase("S15.1.2.3_A3_T1.js", Description = "If neither Result(2) nor any prefix of Result(2) satisfies the syntax of a StrDecimalLiteral (see 9.3.1), return NaN")]
        [TestCase("S15.1.2.3_A3_T2.js", Description = "If neither Result(2) nor any prefix of Result(2) satisfies the syntax of a StrDecimalLiteral (see 9.3.1), return NaN")]
        [TestCase("S15.1.2.3_A3_T3.js", Description = "If neither Result(2) nor any prefix of Result(2) satisfies the syntax of a StrDecimalLiteral (see 9.3.1), return NaN")]
        public void IfNeitherResult2NorAnyPrefixOfResult2SatisfiesTheSyntaxOfAStrDecimalLiteralSee931ReturnNaN(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.3")]
        [Category("ECMA 9.3.1")]
        [TestCase("S15.1.2.3_A4_T1.js", Description = "Compute the longest prefix of Result(2), which might be Result(2) itself, which satisfies the syntax of a StrDecimalLiteral")]
        [TestCase("S15.1.2.3_A4_T2.js", Description = "Compute the longest prefix of Result(2), which might be Result(2) itself, which satisfies the syntax of a StrDecimalLiteral")]
        [TestCase("S15.1.2.3_A4_T3.js", Description = "Compute the longest prefix of Result(2), which might be Result(2) itself, which satisfies the syntax of a StrDecimalLiteral")]
        [TestCase("S15.1.2.3_A4_T4.js", Description = "Compute the longest prefix of Result(2), which might be Result(2) itself, which satisfies the syntax of a StrDecimalLiteral")]
        [TestCase("S15.1.2.3_A4_T5.js", Description = "Compute the longest prefix of Result(2), which might be Result(2) itself, which satisfies the syntax of a StrDecimalLiteral")]
        [TestCase("S15.1.2.3_A4_T6.js", Description = "Compute the longest prefix of Result(2), which might be Result(2) itself, which satisfies the syntax of a StrDecimalLiteral")]
        [TestCase("S15.1.2.3_A4_T7.js", Description = "Compute the longest prefix of Result(2), which might be Result(2) itself, which satisfies the syntax of a StrDecimalLiteral")]
        public void ComputeTheLongestPrefixOfResult2WhichMightBeResult2ItselfWhichSatisfiesTheSyntaxOfAStrDecimalLiteral(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.3")]
        [Category("ECMA 9.3.1")]
        [TestCase("S15.1.2.3_A5_T1.js", Description = "Return the number value for the MV of Result(4)")]
        [TestCase("S15.1.2.3_A5_T2.js", Description = "Return the number value for the MV of Result(4)")]
        [TestCase("S15.1.2.3_A5_T3.js", Description = "Return the number value for the MV of Result(4)")]
        [TestCase("S15.1.2.3_A5_T4.js", Description = "Return the number value for the MV of Result(4)")]
        public void ReturnTheNumberValueForTheMVOfResult4(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.3")]
        [Category("ECMA 9.3.1")]
        [TestCase("S15.1.2.3_A6.js", Description = "parseFloat may interpret only a leading portion of the string as a number value")]
        public void ParseFloatMayInterpretOnlyALeadingPortionOfTheStringAsANumberValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.4")]
        [Category("ECMA 15.1.2.3")]
        [Category("ECMA 15.2.4.7")]
        [TestCase("S15.1.2.3_A7.1.js", Description = "The length property of parseFloat has the attribute DontEnum")]
        public void TheLengthPropertyOfParseFloatHasTheAttributeDontEnum(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.4.1")]
        [Category("ECMA 15.1.2.3")]
        [Category("ECMA 15.2.4.5")]
        [TestCase("S15.1.2.3_A7.2.js", Description = "The length property of parseFloat has the attribute DontDelete")]
        public void TheLengthPropertyOfParseFloatHasTheAttributeDontDelete(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.3")]
        [TestCase("S15.1.2.3_A7.3.js", Description = "The length property of parseFloat has the attribute ReadOnly")]
        public void TheLengthPropertyOfParseFloatHasTheAttributeReadOnly(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.3")]
        [TestCase("S15.1.2.3_A7.4.js", Description = "The length property of parseFloat is 1")]
        public void TheLengthPropertyOfParseFloatIs1(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.4")]
        [Category("ECMA 15.1.2.3")]
        [Category("ECMA 15.2.4.7")]
        [TestCase("S15.1.2.3_A7.5.js", Description = "The parseFloat property has the attribute DontEnum")]
        public void TheParseFloatPropertyHasTheAttributeDontEnum(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.2.3")]
        [TestCase("S15.1.2.3_A7.6.js", Description = "The parseFloat property has not prototype property")]
        public void TheParseFloatPropertyHasNotPrototypeProperty(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.2.2")]
        [Category("ECMA 15.1.2.3")]
        [TestCase("S15.1.2.3_A7.7.js", Description = "The parseFloat property can\'t be used as constructor")]
        public void TheParseFloatPropertyCanTBeUsedAsConstructor(string file)
        {
            RunFile(file);
        }
    }
}