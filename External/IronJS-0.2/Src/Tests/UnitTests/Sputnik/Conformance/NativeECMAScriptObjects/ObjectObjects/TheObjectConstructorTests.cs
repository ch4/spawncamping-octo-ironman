// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.ObjectObjects
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class TheObjectConstructorTests : SputnikTestFixture
    {
        public TheObjectConstructorTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.2_Object_Objects\15.2.2_The_Object_Constructor")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.2.2.1")]
        [TestCase("S15.2.2.1_A1_T1.js", Description = "When the Object constructor is called with no arguments the following steps are taken: (The argument value was not supplied or its type was Null or Undefined.)   i)\tCreate a new native ECMAScript object.  ii) \tThe [[Prototype]] property of the newly constructed object is set to the Object prototype object. iii) \tThe [[Class]] property of the newly constructed object is set to \"Object\".  iv) \tThe newly constructed object has no [[Value]] property.   v) \tReturn the newly created native object")]
        [TestCase("S15.2.2.1_A1_T2.js", Description = "When the Object constructor is called with no arguments the following steps are taken: (The argument value was not supplied or its type was Null or Undefined.)   i)\tCreate a new native ECMAScript object.  ii) \tThe [[Prototype]] property of the newly constructed object is set to the Object prototype object. iii) \tThe [[Class]] property of the newly constructed object is set to \"Object\".  iv) \tThe newly constructed object has no [[Value]] property.   v) \tReturn the newly created native object")]
        [TestCase("S15.2.2.1_A1_T3.js", Description = "When the Object constructor is called with no arguments the following steps are taken: (The argument value was not supplied or its type was Null or Undefined.)   i)\tCreate a new native ECMAScript object.  ii) \tThe [[Prototype]] property of the newly constructed object is set to the Object prototype object. iii) \tThe [[Class]] property of the newly constructed object is set to \"Object\".  iv) \tThe newly constructed object has no [[Value]] property.   v) \tReturn the newly created native object")]
        [TestCase("S15.2.2.1_A1_T4.js", Description = "When the Object constructor is called with no arguments the following steps are taken: (The argument value was not supplied or its type was Null or Undefined.)   i)\tCreate a new native ECMAScript object.  ii) \tThe [[Prototype]] property of the newly constructed object is set to the Object prototype object. iii) \tThe [[Class]] property of the newly constructed object is set to \"Object\".  iv) \tThe newly constructed object has no [[Value]] property.   v) \tReturn the newly created native object")]
        [TestCase("S15.2.2.1_A1_T5.js", Description = "When the Object constructor is called with no arguments the following steps are taken: (The argument value was not supplied or its type was Null or Undefined.)   i)\tCreate a new native ECMAScript object.  ii) \tThe [[Prototype]] property of the newly constructed object is set to the Object prototype object. iii) \tThe [[Class]] property of the newly constructed object is set to \"Object\".  iv) \tThe newly constructed object has no [[Value]] property.   v) \tReturn the newly created native object")]
        public void WhenTheObjectConstructorIsCalledWithNoArgumentsTheFollowingStepsAreTakenTheArgumentValueWasNotSuppliedOrItsTypeWasNullOrUndefinedICreateANewNativeECMAScriptObjectIiThePrototypePropertyOfTheNewlyConstructedObjectIsSetToTheObjectPrototypeObjectIiiTheClassPropertyOfTheNewlyConstructedObjectIsSetToObjectIvTheNewlyConstructedObjectHasNoValuePropertyVReturnTheNewlyCreatedNativeObject(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.2.2.1")]
        [TestCase("S15.2.2.1_A2_T1.js", Description = "When the Object constructor is called with one argument value and the value is a native ECMAScript object, do not create a new object but simply return value")]
        [TestCase("S15.2.2.1_A2_T2.js", Description = "When the Object constructor is called with one argument value and the value is a native ECMAScript object, do not create a new object but simply return value")]
        [TestCase("S15.2.2.1_A2_T3.js", Description = "When the Object constructor is called with one argument value and the value is a native ECMAScript object, do not create a new object but simply return value")]
        [TestCase("S15.2.2.1_A2_T4.js", Description = "When the Object constructor is called with one argument value and the value is a native ECMAScript object, do not create a new object but simply return value")]
        [TestCase("S15.2.2.1_A2_T5.js", Description = "When the Object constructor is called with one argument value and the value is a native ECMAScript object, do not create a new object but simply return value")]
        [TestCase("S15.2.2.1_A2_T6.js", Description = "When the Object constructor is called with one argument value and the value is a native ECMAScript object, do not create a new object but simply return value")]
        [TestCase("S15.2.2.1_A2_T7.js", Description = "When the Object constructor is called with one argument value and the value is a native ECMAScript object, do not create a new object but simply return value")]
        public void WhenTheObjectConstructorIsCalledWithOneArgumentValueAndTheValueIsANativeECMAScriptObjectDoNotCreateANewObjectButSimplyReturnValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.2.2.1")]
        [Category("ECMA 8.6")]
        [TestCase("S15.2.2.1_A3_T1.js", Description = "When the Object constructor is called with one argument value and the type of value is String, return ToObject(string)")]
        [TestCase("S15.2.2.1_A3_T2.js", Description = "When the Object constructor is called with one argument value and the type of value is String, return ToObject(string)")]
        [TestCase("S15.2.2.1_A3_T3.js", Description = "When the Object constructor is called with one argument value and the type of value is String, return ToObject(string)")]
        public void WhenTheObjectConstructorIsCalledWithOneArgumentValueAndTheTypeOfValueIsStringReturnToObjectString(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.2.2.1")]
        [Category("ECMA 8.6")]
        [TestCase("S15.2.2.1_A4_T1.js", Description = "When the Object constructor is called with one argument value and the type of value is Boolean, return ToObject(boolean)")]
        [TestCase("S15.2.2.1_A4_T2.js", Description = "When the Object constructor is called with one argument value and the type of value is Boolean, return ToObject(boolean)")]
        [TestCase("S15.2.2.1_A4_T3.js", Description = "When the Object constructor is called with one argument value and the type of value is Boolean, return ToObject(boolean)")]
        public void WhenTheObjectConstructorIsCalledWithOneArgumentValueAndTheTypeOfValueIsBooleanReturnToObjectBoolean(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.2.2.1")]
        [Category("ECMA 8.6")]
        [TestCase("S15.2.2.1_A5_T1.js", Description = "When the Object constructor is called with one argument value and the type of value is Number, return ToObject(number)")]
        [TestCase("S15.2.2.1_A5_T2.js", Description = "When the Object constructor is called with one argument value and the type of value is Number, return ToObject(number)")]
        [TestCase("S15.2.2.1_A5_T4.js", Description = "When the Object constructor is called with one argument value and the type of value is Number, return ToObject(number)")]
        public void WhenTheObjectConstructorIsCalledWithOneArgumentValueAndTheTypeOfValueIsNumberReturnToObjectNumber(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.2.2.1")]
        [Category("ECMA 8.6")]
        [TestCase("S15.2.2.1_A5_T3.js", Description = "")]
        public void ArgumentValueIsInfinity(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.2.2.1")]
        [TestCase("S15.2.2.1_A6_T1.js", Description = "Since calling Object as a function is identical to calling a function, list of arguments bracketing is allowed")]
        [TestCase("S15.2.2.1_A6_T2.js", Description = "Since calling Object as a function is identical to calling a function, list of arguments bracketing is allowed")]
        [TestCase("S15.2.2.1_A6_T3.js", Description = "Since calling Object as a function is identical to calling a function, list of arguments bracketing is allowed")]
        public void SinceCallingObjectAsAFunctionIsIdenticalToCallingAFunctionListOfArgumentsBracketingIsAllowed(string file)
        {
            RunFile(file);
        }
    }
}