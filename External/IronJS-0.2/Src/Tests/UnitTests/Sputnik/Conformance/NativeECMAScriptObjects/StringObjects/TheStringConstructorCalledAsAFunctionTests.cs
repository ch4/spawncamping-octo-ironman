// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.StringObjects
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class TheStringConstructorCalledAsAFunctionTests : SputnikTestFixture
    {
        public TheStringConstructorCalledAsAFunctionTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.5_String_Objects\15.5.1_The_String_Constructor_Called_as_a_Function")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.1.1")]
        [TestCase("S15.5.1.1_A1_T1.js", Description = "When String is called as a function rather than as a constructor, it performs a type conversion")]
        [TestCase("S15.5.1.1_A1_T10.js", Description = "When String is called as a function rather than as a constructor, it performs a type conversion")]
        [TestCase("S15.5.1.1_A1_T11.js", Description = "When String is called as a function rather than as a constructor, it performs a type conversion")]
        [TestCase("S15.5.1.1_A1_T12.js", Description = "When String is called as a function rather than as a constructor, it performs a type conversion")]
        [TestCase("S15.5.1.1_A1_T13.js", Description = "When String is called as a function rather than as a constructor, it performs a type conversion")]
        [TestCase("S15.5.1.1_A1_T14.js", Description = "When String is called as a function rather than as a constructor, it performs a type conversion")]
        [TestCase("S15.5.1.1_A1_T15.js", Description = "When String is called as a function rather than as a constructor, it performs a type conversion")]
        [TestCase("S15.5.1.1_A1_T16.js", Description = "When String is called as a function rather than as a constructor, it performs a type conversion")]
        [TestCase("S15.5.1.1_A1_T17.js", Description = "When String is called as a function rather than as a constructor, it performs a type conversion")]
        [TestCase("S15.5.1.1_A1_T18.js", Description = "When String is called as a function rather than as a constructor, it performs a type conversion")]
        [TestCase("S15.5.1.1_A1_T19.js", Description = "When String is called as a function rather than as a constructor, it performs a type conversion")]
        [TestCase("S15.5.1.1_A1_T2.js", Description = "When String is called as a function rather than as a constructor, it performs a type conversion")]
        [TestCase("S15.5.1.1_A1_T3.js", Description = "When String is called as a function rather than as a constructor, it performs a type conversion")]
        [TestCase("S15.5.1.1_A1_T4.js", Description = "When String is called as a function rather than as a constructor, it performs a type conversion")]
        [TestCase("S15.5.1.1_A1_T5.js", Description = "When String is called as a function rather than as a constructor, it performs a type conversion")]
        [TestCase("S15.5.1.1_A1_T6.js", Description = "When String is called as a function rather than as a constructor, it performs a type conversion")]
        [TestCase("S15.5.1.1_A1_T7.js", Description = "When String is called as a function rather than as a constructor, it performs a type conversion")]
        [TestCase("S15.5.1.1_A1_T8.js", Description = "When String is called as a function rather than as a constructor, it performs a type conversion")]
        [TestCase("S15.5.1.1_A1_T9.js", Description = "When String is called as a function rather than as a constructor, it performs a type conversion")]
        public void WhenStringIsCalledAsAFunctionRatherThanAsAConstructorItPerformsATypeConversion(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.1.1")]
        [TestCase("S15.5.1.1_A2_T1.js", Description = "If value is not supplied, the empty string \"\" is returned")]
        public void IfValueIsNotSuppliedTheEmptyStringIsReturned(string file)
        {
            RunFile(file);
        }
    }
}