// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.ErrorObjects
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class PropertiesOfTheErrorPrototypeObjectTests : SputnikTestFixture
    {
        public PropertiesOfTheErrorPrototypeObjectTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.11_Error_Objects\15.11.4_Properties_of_the_Error_Prototype_Object")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.11.4.1")]
        [Category("ECMA 16")]
        [TestCase("S15.11.4.1_A1_T1.js", Description = "The initial value of Error.prototype.constructor is the built-in Error constructor")]
        [TestCase("S15.11.4.1_A1_T2.js", Description = "The initial value of Error.prototype.constructor is the built-in Error constructor")]
        public void TheInitialValueOfErrorPrototypeConstructorIsTheBuiltInErrorConstructor(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.11.4.2")]
        [Category("ECMA 16")]
        [TestCase("S15.11.4.2_A1.js", Description = "The Error.prototype has name property")]
        public void TheErrorPrototypeHasNameProperty(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.11.4.2")]
        [Category("ECMA 16")]
        [TestCase("S15.11.4.2_A2.js", Description = "The initial value of Error.prototype.name is \"Error\"")]
        public void TheInitialValueOfErrorPrototypeNameIsError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.11.4.3")]
        [Category("ECMA 16")]
        [TestCase("S15.11.4.3_A1.js", Description = "The Error.prototype has message property")]
        public void TheErrorPrototypeHasMessageProperty(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.11.4.3")]
        [Category("ECMA 16")]
        [TestCase("S15.11.4.3_A2.js", Description = "The initial value of Error.prototype.message is \"\"")]
        public void TheInitialValueOfErrorPrototypeMessageIs(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.11.4.4")]
        [Category("ECMA 16")]
        [TestCase("S15.11.4.4_A1.js", Description = "The Error.prototype has toString property")]
        public void TheErrorPrototypeHasToStringProperty(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.11.4.4")]
        [Category("ECMA 16")]
        [TestCase("S15.11.4.4_A2.js", Description = "The Error.prototype.toString returns an implementation defined string")]
        public void TheErrorPrototypeToStringReturnsAnImplementationDefinedString(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.11.4")]
        [Category("ECMA 16")]
        [TestCase("S15.11.4_A1.js", Description = "The value of the internal [[Prototype]] property of the Error prototype object is the Object prototype object(15.2.3.1)")]
        public void TheValueOfTheInternalPrototypePropertyOfTheErrorPrototypeObjectIsTheObjectPrototypeObject15231(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.11.4")]
        [Category("ECMA 16")]
        [TestCase("S15.11.4_A2.js", Description = "The value of the internal [[Class]] property of Error prototype object is \"Error\"")]
        public void TheValueOfTheInternalClassPropertyOfErrorPrototypeObjectIsError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.11.4")]
        [Category("ECMA 16")]
        [TestCase("S15.11.4_A3.js", Description = "Since Error prototype object is not function it has not [[call]] method")]
        public void SinceErrorPrototypeObjectIsNotFunctionItHasNotCallMethod(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.11.4")]
        [Category("ECMA 16")]
        [TestCase("S15.11.4_A4.js", Description = "Since Error prototype object is not function it has not [[create]] method")]
        public void SinceErrorPrototypeObjectIsNotFunctionItHasNotCreateMethod(string file)
        {
            RunFile(file);
        }
    }
}