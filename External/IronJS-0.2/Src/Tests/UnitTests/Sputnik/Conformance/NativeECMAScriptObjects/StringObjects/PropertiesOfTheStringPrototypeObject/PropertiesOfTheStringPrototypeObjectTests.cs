// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.StringObjects.PropertiesOfTheStringPrototypeObject
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class PropertiesOfTheStringPrototypeObjectTests : SputnikTestFixture
    {
        public PropertiesOfTheStringPrototypeObjectTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.5_String_Objects\15.5.4_Properties_of_the_String_Prototype_Object")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.1")]
        [TestCase("S15.5.4.1_A1_T1.js", Description = "The initial value of String.prototype.constructor is the built-in String constructor")]
        [TestCase("S15.5.4.1_A1_T2.js", Description = "The initial value of String.prototype.constructor is the built-in String constructor")]
        public void TheInitialValueOfStringPrototypeConstructorIsTheBuiltInStringConstructor(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.2")]
        [TestCase("S15.5.4.2_A1_T1.js", Description = "String.prototype.toString() returns this string value")]
        [TestCase("S15.5.4.2_A1_T2.js", Description = "String.prototype.toString() returns this string value")]
        [TestCase("S15.5.4.2_A1_T3.js", Description = "String.prototype.toString() returns this string value")]
        [TestCase("S15.5.4.2_A1_T4.js", Description = "String.prototype.toString() returns this string value")]
        public void StringPrototypeToStringReturnsThisStringValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.2")]
        [TestCase("S15.5.4.2_A2_T1.js", Description = "The toString function is not generic")]
        [TestCase("S15.5.4.2_A2_T2.js", Description = "The toString function is not generic")]
        public void TheToStringFunctionIsNotGeneric(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.2")]
        [Category("ECMA 15.5.4.3")]
        [TestCase("S15.5.4.2_A3_T1.js", Description = "String.prototype.toString() is equal String.prototype.valueOf()")]
        public void StringPrototypeToStringIsEqualStringPrototypeValueOf(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.2")]
        [TestCase("S15.5.4.2_A4_T1.js", Description = "String.prototype.toString have length property and it is equal 0")]
        public void StringPrototypeToStringHaveLengthPropertyAndItIsEqual0(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.3")]
        [TestCase("S15.5.4.3_A1_T1.js", Description = "String.prototype.valueOf() returns this string value")]
        [TestCase("S15.5.4.3_A1_T2.js", Description = "String.prototype.valueOf() returns this string value")]
        [TestCase("S15.5.4.3_A1_T3.js", Description = "String.prototype.valueOf() returns this string value")]
        [TestCase("S15.5.4.3_A1_T4.js", Description = "String.prototype.valueOf() returns this string value")]
        public void StringPrototypeValueOfReturnsThisStringValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.3")]
        [TestCase("S15.5.4.3_A2_T1.js", Description = "The valueOf function is not generic")]
        [TestCase("S15.5.4.3_A2_T2.js", Description = "The valueOf function is not generic")]
        public void TheValueOfFunctionIsNotGeneric(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4")]
        [TestCase("S15.5.4_A1.js", Description = "The String prototype object is itself a String object (its [[Class]] is \"String\")")]
        public void TheStringPrototypeObjectIsItselfAStringObjectItsClassIsString(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4")]
        [TestCase("S15.5.4_A2.js", Description = "The String prototype object is itself a String object whose value is an empty string")]
        public void TheStringPrototypeObjectIsItselfAStringObjectWhoseValueIsAnEmptyString(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.2.3.1")]
        [Category("ECMA 15.5.4")]
        [TestCase("S15.5.4_A3.js", Description = "The value of the internal [[Prototype]] property of the String prototype object is the Object prototype object (15.2.3.1)")]
        public void TheValueOfTheInternalPrototypePropertyOfTheStringPrototypeObjectIsTheObjectPrototypeObject15231(string file)
        {
            RunFile(file);
        }
    }
}