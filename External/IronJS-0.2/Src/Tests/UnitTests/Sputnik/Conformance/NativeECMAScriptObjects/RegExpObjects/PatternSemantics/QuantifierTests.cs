// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.RegExpObjects.PatternSemantics
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class QuantifierTests : SputnikTestFixture
    {
        public QuantifierTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.10_RegExp_Objects\15.10.2_Pattern_Semantics\15.10.2.7_Quantifier")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.2.7")]
        [TestCase("S15.10.2.7_A1_T1.js", Description = "The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        [TestCase("S15.10.2.7_A1_T10.js", Description = "The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        [TestCase("S15.10.2.7_A1_T11.js", Description = "The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        [TestCase("S15.10.2.7_A1_T12.js", Description = "The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        [TestCase("S15.10.2.7_A1_T2.js", Description = "The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        [TestCase("S15.10.2.7_A1_T3.js", Description = "The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        [TestCase("S15.10.2.7_A1_T4.js", Description = "The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        [TestCase("S15.10.2.7_A1_T5.js", Description = "The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        [TestCase("S15.10.2.7_A1_T6.js", Description = "The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        [TestCase("S15.10.2.7_A1_T7.js", Description = "The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        [TestCase("S15.10.2.7_A1_T8.js", Description = "The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        [TestCase("S15.10.2.7_A1_T9.js", Description = "The production QuantifierPrefix :: { DecimalDigits , DecimalDigits } evaluates as ...")]
        public void TheProductionQuantifierPrefixDecimalDigitsDecimalDigitsEvaluatesAs(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.2.7")]
        [TestCase("S15.10.2.7_A2_T1.js", Description = "i) The production QuantifierPrefix :: { DecimalDigits } evaluates... ii) The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        [TestCase("S15.10.2.7_A2_T2.js", Description = "i) The production QuantifierPrefix :: { DecimalDigits } evaluates... ii) The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        [TestCase("S15.10.2.7_A2_T3.js", Description = "i) The production QuantifierPrefix :: { DecimalDigits } evaluates... ii) The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        [TestCase("S15.10.2.7_A2_T4.js", Description = "i) The production QuantifierPrefix :: { DecimalDigits } evaluates... ii) The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        public void ITheProductionQuantifierPrefixDecimalDigitsEvaluatesIiTheProductionQuantifierPrefixEvaluatesByReturningTheTwoResults0And1(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.2.7")]
        [TestCase("S15.10.2.7_A3_T1.js", Description = "The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        [TestCase("S15.10.2.7_A3_T10.js", Description = "The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        [TestCase("S15.10.2.7_A3_T11.js", Description = "The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        [TestCase("S15.10.2.7_A3_T12.js", Description = "The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        [TestCase("S15.10.2.7_A3_T13.js", Description = "The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        [TestCase("S15.10.2.7_A3_T14.js", Description = "The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        [TestCase("S15.10.2.7_A3_T2.js", Description = "The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        [TestCase("S15.10.2.7_A3_T3.js", Description = "The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        [TestCase("S15.10.2.7_A3_T4.js", Description = "The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        [TestCase("S15.10.2.7_A3_T5.js", Description = "The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        [TestCase("S15.10.2.7_A3_T6.js", Description = "The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        [TestCase("S15.10.2.7_A3_T7.js", Description = "The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        [TestCase("S15.10.2.7_A3_T8.js", Description = "The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        [TestCase("S15.10.2.7_A3_T9.js", Description = "The production QuantifierPrefix :: + evaluates by returning the two results 1 and \\infty")]
        public void TheProductionQuantifierPrefixEvaluatesByReturningTheTwoResults1AndInfty(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.2.7")]
        [TestCase("S15.10.2.7_A4_T1.js", Description = "The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        [TestCase("S15.10.2.7_A4_T10.js", Description = "The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        [TestCase("S15.10.2.7_A4_T11.js", Description = "The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        [TestCase("S15.10.2.7_A4_T12.js", Description = "The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        [TestCase("S15.10.2.7_A4_T13.js", Description = "The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        [TestCase("S15.10.2.7_A4_T14.js", Description = "The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        [TestCase("S15.10.2.7_A4_T15.js", Description = "The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        [TestCase("S15.10.2.7_A4_T16.js", Description = "The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        [TestCase("S15.10.2.7_A4_T17.js", Description = "The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        [TestCase("S15.10.2.7_A4_T18.js", Description = "The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        [TestCase("S15.10.2.7_A4_T19.js", Description = "The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        [TestCase("S15.10.2.7_A4_T2.js", Description = "The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        [TestCase("S15.10.2.7_A4_T20.js", Description = "The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        [TestCase("S15.10.2.7_A4_T21.js", Description = "The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        [TestCase("S15.10.2.7_A4_T3.js", Description = "The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        [TestCase("S15.10.2.7_A4_T4.js", Description = "The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        [TestCase("S15.10.2.7_A4_T5.js", Description = "The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        [TestCase("S15.10.2.7_A4_T6.js", Description = "The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        [TestCase("S15.10.2.7_A4_T7.js", Description = "The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        [TestCase("S15.10.2.7_A4_T8.js", Description = "The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        [TestCase("S15.10.2.7_A4_T9.js", Description = "The production QuantifierPrefix :: * evaluates by returning the two results 0 and \\infty")]
        public void TheProductionQuantifierPrefixEvaluatesByReturningTheTwoResults0AndInfty(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.2.7")]
        [TestCase("S15.10.2.7_A5_T1.js", Description = "The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        [TestCase("S15.10.2.7_A5_T10.js", Description = "The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        [TestCase("S15.10.2.7_A5_T11.js", Description = "The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        [TestCase("S15.10.2.7_A5_T12.js", Description = "The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        [TestCase("S15.10.2.7_A5_T2.js", Description = "The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        [TestCase("S15.10.2.7_A5_T3.js", Description = "The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        [TestCase("S15.10.2.7_A5_T4.js", Description = "The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        [TestCase("S15.10.2.7_A5_T5.js", Description = "The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        [TestCase("S15.10.2.7_A5_T6.js", Description = "The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        [TestCase("S15.10.2.7_A5_T7.js", Description = "The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        [TestCase("S15.10.2.7_A5_T8.js", Description = "The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        [TestCase("S15.10.2.7_A5_T9.js", Description = "The production QuantifierPrefix :: ? evaluates by returning the two results 0 and 1")]
        public void TheProductionQuantifierPrefixEvaluatesByReturningTheTwoResults0And1(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.10.2.7")]
        [TestCase("S15.10.2.7_A6_T1.js", Description = "The production QuantifierPrefix :: { DecimalDigits , }evaluates as follows: i) Let i be the MV of DecimalDigits ii) Return the two results i and \\infty")]
        [TestCase("S15.10.2.7_A6_T2.js", Description = "The production QuantifierPrefix :: { DecimalDigits , }evaluates as follows: i) Let i be the MV of DecimalDigits ii) Return the two results i and \\infty")]
        [TestCase("S15.10.2.7_A6_T3.js", Description = "The production QuantifierPrefix :: { DecimalDigits , }evaluates as follows: i) Let i be the MV of DecimalDigits ii) Return the two results i and \\infty")]
        [TestCase("S15.10.2.7_A6_T4.js", Description = "The production QuantifierPrefix :: { DecimalDigits , }evaluates as follows: i) Let i be the MV of DecimalDigits ii) Return the two results i and \\infty")]
        [TestCase("S15.10.2.7_A6_T5.js", Description = "The production QuantifierPrefix :: { DecimalDigits , }evaluates as follows: i) Let i be the MV of DecimalDigits ii) Return the two results i and \\infty")]
        [TestCase("S15.10.2.7_A6_T6.js", Description = "The production QuantifierPrefix :: { DecimalDigits , }evaluates as follows: i) Let i be the MV of DecimalDigits ii) Return the two results i and \\infty")]
        public void TheProductionQuantifierPrefixDecimalDigitsEvaluatesAsFollowsILetIBeTheMVOfDecimalDigitsIiReturnTheTwoResultsIAndInfty(string file)
        {
            RunFile(file);
        }
    }
}