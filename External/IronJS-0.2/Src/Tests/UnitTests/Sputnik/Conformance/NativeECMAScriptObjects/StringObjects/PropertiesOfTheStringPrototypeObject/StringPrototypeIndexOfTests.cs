// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.StringObjects.PropertiesOfTheStringPrototypeObject
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class StringPrototypeIndexOfTests : SputnikTestFixture
    {
        public StringPrototypeIndexOfTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.5_String_Objects\15.5.4_Properties_of_the_String_Prototype_Object\15.5.4.7_String.prototype.indexOf")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.7")]
        [TestCase("S15.5.4.7_A1_T1.js", Description = "String.prototype.indexOf(searchString, position)")]
        [TestCase("S15.5.4.7_A1_T10.js", Description = "String.prototype.indexOf(searchString, position)")]
        [TestCase("S15.5.4.7_A1_T11.js", Description = "String.prototype.indexOf(searchString, position)")]
        [TestCase("S15.5.4.7_A1_T12.js", Description = "String.prototype.indexOf(searchString, position)")]
        [TestCase("S15.5.4.7_A1_T2.js", Description = "String.prototype.indexOf(searchString, position)")]
        [TestCase("S15.5.4.7_A1_T3.js", Description = "String.prototype.indexOf(searchString, position)")]
        [TestCase("S15.5.4.7_A1_T4.js", Description = "String.prototype.indexOf(searchString, position)")]
        [TestCase("S15.5.4.7_A1_T5.js", Description = "String.prototype.indexOf(searchString, position)")]
        [TestCase("S15.5.4.7_A1_T6.js", Description = "String.prototype.indexOf(searchString, position)")]
        [TestCase("S15.5.4.7_A1_T7.js", Description = "String.prototype.indexOf(searchString, position)")]
        [TestCase("S15.5.4.7_A1_T8.js", Description = "String.prototype.indexOf(searchString, position)")]
        [TestCase("S15.5.4.7_A1_T9.js", Description = "String.prototype.indexOf(searchString, position)")]
        public void StringPrototypeIndexOfSearchStringPosition(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.7")]
        [TestCase("S15.5.4.7_A10.js", Description = "The String.prototype.indexOf.length property has the attribute ReadOnly")]
        public void TheStringPrototypeIndexOfLengthPropertyHasTheAttributeReadOnly(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.7")]
        [TestCase("S15.5.4.7_A11.js", Description = "The length property of the indexOf method is 1")]
        public void TheLengthPropertyOfTheIndexOfMethodIs1(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.7")]
        [TestCase("S15.5.4.7_A2_T1.js", Description = "When length of searchString less than length of ToString(this) -1 returns")]
        [TestCase("S15.5.4.7_A2_T2.js", Description = "When length of searchString less than length of ToString(this) -1 returns")]
        [TestCase("S15.5.4.7_A2_T3.js", Description = "When length of searchString less than length of ToString(this) -1 returns")]
        [TestCase("S15.5.4.7_A2_T4.js", Description = "When length of searchString less than length of ToString(this) -1 returns")]
        public void WhenLengthOfSearchStringLessThanLengthOfToStringThis1Returns(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.7")]
        [TestCase("S15.5.4.7_A3_T1.js", Description = "Since we deal with max(ToInteger(pos), 0) if ToInteger(pos) less than 0 indexOf(searchString,0) returns")]
        [TestCase("S15.5.4.7_A3_T2.js", Description = "Since we deal with max(ToInteger(pos), 0) if ToInteger(pos) less than 0 indexOf(searchString,0) returns")]
        [TestCase("S15.5.4.7_A3_T3.js", Description = "Since we deal with max(ToInteger(pos), 0) if ToInteger(pos) less than 0 indexOf(searchString,0) returns")]
        public void SinceWeDealWithMaxToIntegerPos0IfToIntegerPosLessThan0IndexOfSearchString0Returns(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.7")]
        [TestCase("S15.5.4.7_A4_T1.js", Description = "when String.prototype.indexOf(searchString, position) is called first Call ToString, giving it the this value as its argument. Then Call ToString(searchString) and Call ToNumber(position)")]
        [TestCase("S15.5.4.7_A4_T2.js", Description = "when String.prototype.indexOf(searchString, position) is called first Call ToString, giving it the this value as its argument. Then Call ToString(searchString) and Call ToNumber(position)")]
        [TestCase("S15.5.4.7_A4_T3.js", Description = "when String.prototype.indexOf(searchString, position) is called first Call ToString, giving it the this value as its argument. Then Call ToString(searchString) and Call ToNumber(position)")]
        [TestCase("S15.5.4.7_A4_T4.js", Description = "when String.prototype.indexOf(searchString, position) is called first Call ToString, giving it the this value as its argument. Then Call ToString(searchString) and Call ToNumber(position)")]
        [TestCase("S15.5.4.7_A4_T5.js", Description = "when String.prototype.indexOf(searchString, position) is called first Call ToString, giving it the this value as its argument. Then Call ToString(searchString) and Call ToNumber(position)")]
        public void WhenStringPrototypeIndexOfSearchStringPositionIsCalledFirstCallToStringGivingItTheThisValueAsItsArgumentThenCallToStringSearchStringAndCallToNumberPosition(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.7")]
        [TestCase("S15.5.4.7_A5_T1.js", Description = "String.prototype.indexOf works properly")]
        [TestCase("S15.5.4.7_A5_T2.js", Description = "String.prototype.indexOf works properly")]
        [TestCase("S15.5.4.7_A5_T3.js", Description = "String.prototype.indexOf works properly")]
        [TestCase("S15.5.4.7_A5_T4.js", Description = "String.prototype.indexOf works properly")]
        [TestCase("S15.5.4.7_A5_T5.js", Description = "String.prototype.indexOf works properly")]
        [TestCase("S15.5.4.7_A5_T6.js", Description = "String.prototype.indexOf works properly")]
        public void StringPrototypeIndexOfWorksProperly(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 13.2")]
        [Category("ECMA 15.5.4.7")]
        [TestCase("S15.5.4.7_A6.js", Description = "String.prototype.indexOf has not prototype property")]
        public void StringPrototypeIndexOfHasNotPrototypeProperty(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 13.2")]
        [Category("ECMA 15.5.4.7")]
        [TestCase("S15.5.4.7_A7.js", Description = "String.prototype.indexOf can\'t be used as constructor")]
        public void StringPrototypeIndexOfCanTBeUsedAsConstructor(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.7")]
        [TestCase("S15.5.4.7_A8.js", Description = "The String.prototype.indexOf.length property has the attribute DontEnum")]
        public void TheStringPrototypeIndexOfLengthPropertyHasTheAttributeDontEnum(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5.4.7")]
        [TestCase("S15.5.4.7_A9.js", Description = "The String.prototype.indexOf.length property has the attribute DontDelete")]
        public void TheStringPrototypeIndexOfLengthPropertyHasTheAttributeDontDelete(string file)
        {
            RunFile(file);
        }
    }
}