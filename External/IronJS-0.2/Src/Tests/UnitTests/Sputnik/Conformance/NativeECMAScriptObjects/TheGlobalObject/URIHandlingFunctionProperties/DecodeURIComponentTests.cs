// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.NativeECMAScriptObjects.TheGlobalObject.URIHandlingFunctionProperties
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class DecodeURIComponentTests : SputnikTestFixture
    {
        public DecodeURIComponentTests()
            : base(@"Conformance\15_Native_ECMA_Script_Objects\15.1_The_Global_Object\15.1.3_URI_Handling_Function_Properties\15.1.3.2_decodeURIComponent")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A1.1_T1.js", Description = "If string.charAt(k) equal \"%\" and k + 2 >= string.length, throw URIError")]
        public void IfStringCharAtKEqualAndK2StringLengthThrowURIError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A1.10_T1.js", Description = "If B = 110xxxxx (n = 2) and string.charAt(k + 4) and string.charAt(k + 5) do not represent hexadecimal digits, throw URIError")]
        public void IfB110xxxxxN2AndStringCharAtK4AndStringCharAtK5DoNotRepresentHexadecimalDigitsThrowURIError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A1.11_T1.js", Description = "If B = 1110xxxx (n = 3) and (string.charAt(k + 4) and string.charAt(k + 5)) or (string.charAt(k + 7) and string.charAt(k + 8)) do not represent hexadecimal digits, throw URIError")]
        [TestCase("S15.1.3.2_A1.11_T2.js", Description = "If B = 1110xxxx (n = 3) and (string.charAt(k + 4) and string.charAt(k + 5)) or (string.charAt(k + 7) and string.charAt(k + 8)) do not represent hexadecimal digits, throw URIError")]
        public void IfB1110xxxxN3AndStringCharAtK4AndStringCharAtK5OrStringCharAtK7AndStringCharAtK8DoNotRepresentHexadecimalDigitsThrowURIError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A1.12_T1.js", Description = "If B = 11110xxx (n = 4) and (string.charAt(k + 4) and string.charAt(k + 5)) or (string.charAt(k + 7) and string.charAt(k + 8)) or (string.charAt(k + 10) and string.charAt(k + 11)) do not represent hexadecimal digits, throw URIError")]
        [TestCase("S15.1.3.2_A1.12_T2.js", Description = "If B = 11110xxx (n = 4) and (string.charAt(k + 4) and string.charAt(k + 5)) or (string.charAt(k + 7) and string.charAt(k + 8)) or (string.charAt(k + 10) and string.charAt(k + 11)) do not represent hexadecimal digits, throw URIError")]
        [TestCase("S15.1.3.2_A1.12_T3.js", Description = "If B = 11110xxx (n = 4) and (string.charAt(k + 4) and string.charAt(k + 5)) or (string.charAt(k + 7) and string.charAt(k + 8)) or (string.charAt(k + 10) and string.charAt(k + 11)) do not represent hexadecimal digits, throw URIError")]
        public void IfB11110xxxN4AndStringCharAtK4AndStringCharAtK5OrStringCharAtK7AndStringCharAtK8OrStringCharAtK10AndStringCharAtK11DoNotRepresentHexadecimalDigitsThrowURIError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A1.13_T1.js", Description = "If B = 110xxxxx (n = 2) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        [TestCase("S15.1.3.2_A1.13_T2.js", Description = "If B = 110xxxxx (n = 2) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        public void IfB110xxxxxN2AndC10xxxxxxCFirstOfOctetsAfterBThrowURIError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A1.14_T1.js", Description = "If B = 1110xxxx (n = 3) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        [TestCase("S15.1.3.2_A1.14_T2.js", Description = "If B = 1110xxxx (n = 3) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        [TestCase("S15.1.3.2_A1.14_T3.js", Description = "If B = 1110xxxx (n = 3) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        [TestCase("S15.1.3.2_A1.14_T4.js", Description = "If B = 1110xxxx (n = 3) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        public void IfB1110xxxxN3AndC10xxxxxxCFirstOfOctetsAfterBThrowURIError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A1.15_T1.js", Description = "If B = 11110xxx (n = 4) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        [TestCase("S15.1.3.2_A1.15_T2.js", Description = "If B = 11110xxx (n = 4) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        [TestCase("S15.1.3.2_A1.15_T3.js", Description = "If B = 11110xxx (n = 4) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        [TestCase("S15.1.3.2_A1.15_T4.js", Description = "If B = 11110xxx (n = 4) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        [TestCase("S15.1.3.2_A1.15_T5.js", Description = "If B = 11110xxx (n = 4) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        [TestCase("S15.1.3.2_A1.15_T6.js", Description = "If B = 11110xxx (n = 4) and C != 10xxxxxx (C - first of octets after B), throw URIError")]
        public void IfB11110xxxN4AndC10xxxxxxCFirstOfOctetsAfterBThrowURIError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A1.2_T1.js", Description = "If B = string.charAt(k+1) + string.charAt(k+2) do not represent hexadecimal digits, throw URIError")]
        [TestCase("S15.1.3.2_A1.2_T2.js", Description = "If B = string.charAt(k+1) + string.charAt(k+2) do not represent hexadecimal digits, throw URIError")]
        public void IfBStringCharAtK1StringCharAtK2DoNotRepresentHexadecimalDigitsThrowURIError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A1.3_T1.js", Description = "If B = 10xxxxxx or B = 11111xxx, throw URIError")]
        [TestCase("S15.1.3.2_A1.3_T2.js", Description = "If B = 10xxxxxx or B = 11111xxx, throw URIError")]
        public void IfB10xxxxxxOrB11111xxxThrowURIError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A1.4_T1.js", Description = "If B = 110xxxxx (n = 2) and (k + 2) + 3 >= length, throw URIError")]
        public void IfB110xxxxxN2AndK23LengthThrowURIError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A1.5_T1.js", Description = "If B = 1110xxxx (n = 3) and (k + 2) + 6 >= length, throw URIError")]
        public void IfB1110xxxxN3AndK26LengthThrowURIError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A1.6_T1.js", Description = "If B = 11110xxx (n = 4) and (k + 2) + 9 >= length, throw URIError")]
        public void IfB11110xxxN4AndK29LengthThrowURIError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A1.7_T1.js", Description = "If B = 110xxxxx (n = 2) and string.charAt(k + 3) not equal \"%\", throw URIError")]
        public void IfB110xxxxxN2AndStringCharAtK3NotEqualThrowURIError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A1.8_T1.js", Description = "If B = 1110xxxx (n = 3) and string.charAt(k + 3), string.charAt(k + 6) not equal \"%\", throw URIError")]
        [TestCase("S15.1.3.2_A1.8_T2.js", Description = "If B = 1110xxxx (n = 3) and string.charAt(k + 3), string.charAt(k + 6) not equal \"%\", throw URIError")]
        public void IfB1110xxxxN3AndStringCharAtK3StringCharAtK6NotEqualThrowURIError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A1.9_T1.js", Description = "If B = 11110xxx (n = 4) and string.charAt(k + 3), string.charAt(k + 6), string.charAt(k + 9) not equal \"%\", throw URIError")]
        [TestCase("S15.1.3.2_A1.9_T2.js", Description = "If B = 11110xxx (n = 4) and string.charAt(k + 3), string.charAt(k + 6), string.charAt(k + 9) not equal \"%\", throw URIError")]
        [TestCase("S15.1.3.2_A1.9_T3.js", Description = "If B = 11110xxx (n = 4) and string.charAt(k + 3), string.charAt(k + 6), string.charAt(k + 9) not equal \"%\", throw URIError")]
        public void IfB11110xxxN4AndStringCharAtK3StringCharAtK6StringCharAtK9NotEqualThrowURIError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A2.1_T1.js", Description = "If string.charAt(k) not equal \"%\", return this char")]
        public void IfStringCharAtKNotEqualReturnThisChar(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A2.2_T1.js", Description = "If B1 = 0xxxxxxxx ([0x00 - 0x7F]), return B1")]
        public void IfB10xxxxxxxx0x000x7FReturnB1(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A2.3_T1.js", Description = "If B1 = 110xxxxx ([0xC0 - 0xDF]), B2 = 10xxxxxx ([0x80 - 0xBF), without B1 = [0xC0, 0xC1], return UTF8(B1, B2)")]
        public void IfB1110xxxxx0xC00xDFB210xxxxxx0x800xBFWithoutB10xC00xC1ReturnUTF8B1B2(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A2.4_T1.js", Description = "If B1 = 1110xxxx ([0xE0 - 0xEF]), B2, B3 = 10xxxxxxx ([0x80 - 0xBF]), without [B1, B2] = [0xE0, 0x80 - 0x9F], [0xED, 0xA0 - 0xBF] (0xD800 - 0xDFFF), return UTF8(B1, B2, B3)")]
        public void IfB11110xxxx0xE00xEFB2B310xxxxxxx0x800xBFWithoutB1B20xE00x800x9F0xED0xA00xBF0xD8000xDFFFReturnUTF8B1B2B3(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A2.5_T1.js", Description = "If B1 = 11110xxx ([0xF0 - 0x0F4]), B2, B3, B4 = 10xxxxxxx ([0x80 - 0xBF]), without [B1, B2] = [0xF0, 0x80 - 0x9F], [0xF4, 0x90 - 0xBF], return UTF8(B1, B2, B3, B4)")]
        public void IfB111110xxx0xF00x0F4B2B3B410xxxxxxx0x800xBFWithoutB1B20xF00x800x9F0xF40x900xBFReturnUTF8B1B2B3B4(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A3_T1.js", Description = "Let reservedURIComponentSet be the empty string")]
        [TestCase("S15.1.3.2_A3_T2.js", Description = "Let reservedURIComponentSet be the empty string")]
        [TestCase("S15.1.3.2_A3_T3.js", Description = "Let reservedURIComponentSet be the empty string")]
        public void LetReservedURIComponentSetBeTheEmptyString(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A4_T1.js", Description = "URI tests")]
        [TestCase("S15.1.3.2_A4_T2.js", Description = "URI tests")]
        [TestCase("S15.1.3.2_A4_T3.js", Description = "URI tests")]
        [TestCase("S15.1.3.2_A4_T4.js", Description = "URI tests")]
        public void URITests(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.4")]
        [Category("ECMA 15.1.3.2")]
        [Category("ECMA 15.2.4.7")]
        [TestCase("S15.1.3.2_A5.1.js", Description = "The length property of decodeURIComponent has the attribute DontEnum")]
        public void TheLengthPropertyOfDecodeURIComponentHasTheAttributeDontEnum(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.4.1")]
        [Category("ECMA 15.1.3.2")]
        [Category("ECMA 15.2.4.5")]
        [TestCase("S15.1.3.2_A5.2.js", Description = "The length property of decodeURIComponent has the attribute DontDelete")]
        public void TheLengthPropertyOfDecodeURIComponentHasTheAttributeDontDelete(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A5.3.js", Description = "The length property of decodeURIComponent has the attribute ReadOnly")]
        public void TheLengthPropertyOfDecodeURIComponentHasTheAttributeReadOnly(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A5.4.js", Description = "The length property of decodeURIComponent is 1")]
        public void TheLengthPropertyOfDecodeURIComponentIs1(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.4")]
        [Category("ECMA 15.1.3.2")]
        [Category("ECMA 15.2.4.7")]
        [TestCase("S15.1.3.2_A5.5.js", Description = "The decodeURIComponent property has the attribute DontEnum")]
        public void TheDecodeURIComponentPropertyHasTheAttributeDontEnum(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A5.6.js", Description = "The decodeURIComponent property has not prototype property")]
        public void TheDecodeURIComponentPropertyHasNotPrototypeProperty(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.2.2")]
        [Category("ECMA 15.1.3.2")]
        [TestCase("S15.1.3.2_A5.7.js", Description = "The decodeURIComponent property can\'t be used as constructor")]
        public void TheDecodeURIComponentPropertyCanTBeUsedAsConstructor(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.1.3.2")]
        [Category("ECMA 8.6.2.6")]
        [Category("ECMA 9.8")]
        [TestCase("S15.1.3.2_A6_T1.js", Description = "Operator use ToString")]
        public void OperatorUseToString(string file)
        {
            RunFile(file);
        }
    }
}