// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Types
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class TheStringTypeTests : SputnikTestFixture
    {
        public TheStringTypeTests()
            : base(@"Conformance\08_Types\8.4_The_String_Type")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_A1.js", Description = "Any variable that has been assigned with string literal has the type string")]
        public void AnyVariableThatHasBeenAssignedWithStringLiteralHasTheTypeString(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_A10.js", Description = "Both unicode and ascii chars are allowed")]
        public void BothUnicodeAndAsciiCharsAreAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_A11.js", Description = "Presence of reserved words in string literal are allowed")]
        public void PresenceOfReservedWordsInStringLiteralAreAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_A12.js", Description = "Assignment to string literal calls String constructor")]
        public void AssignmentToStringLiteralCallsStringConstructor(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_A13_T1.js", Description = "When appears not closed single-quote program failes", ExpectedException = typeof(Exception))]
        [TestCase("S8.4_A13_T2.js", Description = "When appears not closed single-quote program failes", ExpectedException = typeof(Exception))]
        [TestCase("S8.4_A13_T3.js", Description = "When appears not closed single-quote program failes", ExpectedException = typeof(Exception))]
        public void WhenAppearsNotClosedSingleQuoteProgramFailes(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_A14_T1.js", Description = "When appears not closed double-quote program failes", ExpectedException = typeof(Exception))]
        [TestCase("S8.4_A14_T2.js", Description = "When appears not closed double-quote program failes", ExpectedException = typeof(Exception))]
        [TestCase("S8.4_A14_T3.js", Description = "When appears not closed double-quote program failes", ExpectedException = typeof(Exception))]
        public void WhenAppearsNotClosedDoubleQuoteProgramFailes(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_A2.js", Description = "Empty string has type string")]
        public void EmptyStringHasTypeString(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_A3.js", Description = "String type has a length property")]
        public void StringTypeHasALengthProperty(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_A4.js", Description = "Empty string variable has a length property")]
        public void EmptyStringVariableHasALengthProperty(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_A5.js", Description = "Zero \"\\0\" not terminates the string(C string)")]
        public void Zero0NotTerminatesTheStringCString(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_A6.1.js", Description = "Large string 4096 bytes")]
        public void LargeString4096Bytes(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_A6.2.js", Description = "Large string 8192 bytes")]
        public void LargeString8192Bytes(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_A7.1.js", Description = "<LF> between chunks of one string not allowed", ExpectedException = typeof(Exception))]
        public void LFBetweenChunksOfOneStringNotAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_A7.2.js", Description = "<CR> between chunks of one string not allowed", ExpectedException = typeof(Exception))]
        public void CRBetweenChunksOfOneStringNotAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_A7.3.js", Description = "<PS> between chunks of one string not allowed", ExpectedException = typeof(Exception))]
        public void PSBetweenChunksOfOneStringNotAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_A7.4.js", Description = "<LS> between chunks of one string not allowed", ExpectedException = typeof(Exception))]
        public void LSBetweenChunksOfOneStringNotAllowed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_A8.js", Description = "Empty string, 0, false are all equal (==) to each other, since they all evaluate to 0")]
        public void EmptyString0FalseAreAllEqualToEachOtherSinceTheyAllEvaluateTo0(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 7.8.4")]
        [Category("ECMA 8.4")]
        [TestCase("S8.4_A9_T1.js", Description = "Assignment to string literals calls String constructor")]
        [TestCase("S8.4_A9_T2.js", Description = "Assignment to string literals calls String constructor")]
        [TestCase("S8.4_A9_T3.js", Description = "Assignment to string literals calls String constructor")]
        public void AssignmentToStringLiteralsCallsStringConstructor(string file)
        {
            RunFile(file);
        }
    }
}