// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Types.TheObjectType
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class InternalPropertiesAndMethodsTests : SputnikTestFixture
    {
        public InternalPropertiesAndMethodsTests()
            : base(@"Conformance\08_Types\8.6_The_Object_Type\8.6.2_Internal_Properties_and_Methods")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.6.2.1")]
        [TestCase("S8.6.2.1_A1.js", Description = "[[Get]](P) method should return value when property P does not exist in instance but prototype contain it")]
        public void GetPMethodShouldReturnValueWhenPropertyPDoesNotExistInInstanceButPrototypeContainIt(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.6.2.1")]
        [TestCase("S8.6.2.1_A2.js", Description = "[[Get]](P) method should return undefined when property P does not exist both in instance and prototype")]
        public void GetPMethodShouldReturnUndefinedWhenPropertyPDoesNotExistBothInInstanceAndPrototype(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.6.2.1")]
        [TestCase("S8.6.2.1_A3.js", Description = "When the [[Get]] method of O is called with property name P value of P returns")]
        public void WhenTheGetMethodOfOIsCalledWithPropertyNamePValueOfPReturns(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.6.2.2")]
        [TestCase("S8.6.2.2_A1.js", Description = "When the [[Put]] method of O is called with property P and value V,  and If O doesn\'t have a property with name P, then creates a property with name P, set its value to V and give it empty attributes")]
        public void WhenThePutMethodOfOIsCalledWithPropertyPAndValueVAndIfODoesnTHaveAPropertyWithNamePThenCreatesAPropertyWithNamePSetItsValueToVAndGiveItEmptyAttributes(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.6.2.2")]
        [TestCase("S8.6.2.2_A2.js", Description = "When the [[Put]] method of O is called with property P and value V,  then set the value of the property to V. The attributes of the property are not changed")]
        public void WhenThePutMethodOfOIsCalledWithPropertyPAndValueVThenSetTheValueOfThePropertyToVTheAttributesOfThePropertyAreNotChanged(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.6.1")]
        [Category("ECMA 8.6.2.2")]
        [Category("ECMA 8.6.2.3")]
        [TestCase("S8.6.2.3_A1.js", Description = "If the property has the ReadOnly attribute, [[CanPut]](P) return false")]
        public void IfThePropertyHasTheReadOnlyAttributeCanPutPReturnFalse(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.4")]
        [Category("ECMA 8.6.2.4")]
        [TestCase("S8.6.2.4_A1.js", Description = "When the [[HasProperty]] method of O is called with property name P and if O has a property with name P, return true")]
        public void WhenTheHasPropertyMethodOfOIsCalledWithPropertyNamePAndIfOHasAPropertyWithNamePReturnTrue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.4")]
        [Category("ECMA 8.6.2.4")]
        [TestCase("S8.6.2.4_A2_T1.js", Description = "When the [[HasProperty]] method of O is called with property name P and if O has not a property with name P then If the [[Prototype]] of O is null, return false or call the [[HasProperty]] method of [[Prototype]] with property name P")]
        [TestCase("S8.6.2.4_A2_T2.js", Description = "When the [[HasProperty]] method of O is called with property name P and if O has not a property with name P then If the [[Prototype]] of O is null, return false or call the [[HasProperty]] method of [[Prototype]] with property name P")]
        public void WhenTheHasPropertyMethodOfOIsCalledWithPropertyNamePAndIfOHasNotAPropertyWithNamePThenIfThePrototypeOfOIsNullReturnFalseOrCallTheHasPropertyMethodOfPrototypeWithPropertyNameP(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 12.6.4")]
        [Category("ECMA 8.6.2.4")]
        [TestCase("S8.6.2.4_A3.js", Description = "[[hasProperty]] is sensitive to property existence but [[Get]] is not")]
        public void HasPropertyIsSensitiveToPropertyExistenceButGetIsNot(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.4.1")]
        [Category("ECMA 15.8")]
        [Category("ECMA 8.6.2.5")]
        [TestCase("S8.6.2.5_A1.js", Description = "When the [[Delete]] method of O is called with property name P, and If the property has the DontDelete attribute, return false")]
        public void WhenTheDeleteMethodOfOIsCalledWithPropertyNamePAndIfThePropertyHasTheDontDeleteAttributeReturnFalse(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.4.1")]
        [Category("ECMA 8.6.2.5")]
        [TestCase("S8.6.2.5_A2_T1.js", Description = "When the [[Delete]] method of O is called with property name P, and if O doesn\'t have a property with name P, return true")]
        [TestCase("S8.6.2.5_A2_T2.js", Description = "When the [[Delete]] method of O is called with property name P, and if O doesn\'t have a property with name P, return true")]
        public void WhenTheDeleteMethodOfOIsCalledWithPropertyNamePAndIfODoesnTHaveAPropertyWithNamePReturnTrue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.4.1")]
        [Category("ECMA 8.6.2.5")]
        [TestCase("S8.6.2.5_A3.js", Description = "When the [[Delete]] method of O is called with property name P, removes the property with name P from O and return true")]
        public void WhenTheDeleteMethodOfOIsCalledWithPropertyNamePRemovesThePropertyWithNamePFromOAndReturnTrue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.8.6")]
        [Category("ECMA 8.6.2")]
        [Category("ECMA 8.6.2.6")]
        [Category("ECMA 9.8")]
        [TestCase("S8.6.2.6_A1.js", Description = "This should generate a TypeError, Cause we overload toString method so it return non Primitive value See ECMA reference at http://bugzilla.mozilla.org/show_bug.cgi?id=167325")]
        public void ThisShouldGenerateATypeErrorCauseWeOverloadToStringMethodSoItReturnNonPrimitiveValueSeeECMAReferenceAtHttpBugzillaMozillaOrgShow_bugCgiId167325(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.6.2")]
        [Category("ECMA 8.6.2.6")]
        [Category("ECMA 9.8")]
        [TestCase("S8.6.2.6_A2.js", Description = "This should generate no TypeError, Cause we overload toString method so it return non Primitive value but we overloaded valueOf method too. See ECMA reference at http://bugzilla.mozilla.org/show_bug.cgi?id=167325")]
        public void ThisShouldGenerateNoTypeErrorCauseWeOverloadToStringMethodSoItReturnNonPrimitiveValueButWeOverloadedValueOfMethodTooSeeECMAReferenceAtHttpBugzillaMozillaOrgShow_bugCgiId167325(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.6.2")]
        [Category("ECMA 8.6.2.6")]
        [TestCase("S8.6.2.6_A3.js", Description = "We overload valueOf method so it return non Primitive value Thus [[DefaultValue]] must return Object.toString() value")]
        public void WeOverloadValueOfMethodSoItReturnNonPrimitiveValueThusDefaultValueMustReturnObjectToStringValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.6.2")]
        [Category("ECMA 8.6.2.6")]
        [TestCase("S8.6.2.6_A4.js", Description = "We overload valueOf method so it return non Primitive value and toString method so it return non Primitive value too Thus [[DefaultValue]] must generate TypeError error")]
        public void WeOverloadValueOfMethodSoItReturnNonPrimitiveValueAndToStringMethodSoItReturnNonPrimitiveValueTooThusDefaultValueMustGenerateTypeErrorError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.2.4")]
        [Category("ECMA 8.6.2")]
        [TestCase("S8.6.2_A1.js", Description = "Native ECMAScript objects have an internal property called [[Prototype]]. The value of this property is either null or an object and is used for implementing inheritance")]
        public void NativeECMAScriptObjectsHaveAnInternalPropertyCalledPrototypeTheValueOfThisPropertyIsEitherNullOrAnObjectAndIsUsedForImplementingInheritance(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.2.4")]
        [Category("ECMA 8.6.2")]
        [TestCase("S8.6.2_A2.js", Description = "Properties of the [[Prototype]] object are visible as properties of the child object for the purposes of get access, but not for put access")]
        public void PropertiesOfThePrototypeObjectAreVisibleAsPropertiesOfTheChildObjectForThePurposesOfGetAccessButNotForPutAccess(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.2.4.2")]
        [Category("ECMA 8.6.2")]
        [TestCase("S8.6.2_A3.js", Description = "The specification does not provide any means for a program to access [[class]] value except through Object.prototype.toString")]
        public void TheSpecificationDoesNotProvideAnyMeansForAProgramToAccessClassValueExceptThroughObjectPrototypeToString(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.8.6")]
        [Category("ECMA 8.6.2")]
        [TestCase("S8.6.2_A4.js", Description = "[[HasInstance]] returns a boolean value indicating whether Value delegates behaviour to this object")]
        public void HasInstanceReturnsABooleanValueIndicatingWhetherValueDelegatesBehaviourToThisObject(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 13.1")]
        [Category("ECMA 13.2")]
        [Category("ECMA 8.6.2")]
        [TestCase("S8.6.2_A5_T1.js", Description = "[[Call]] executes code associated with the object")]
        [TestCase("S8.6.2_A5_T2.js", Description = "[[Call]] executes code associated with the object")]
        [TestCase("S8.6.2_A5_T3.js", Description = "[[Call]] executes code associated with the object")]
        [TestCase("S8.6.2_A5_T4.js", Description = "[[Call]] executes code associated with the object")]
        public void CallExecutesCodeAssociatedWithTheObject(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.2.2")]
        [Category("ECMA 8.6.2")]
        [TestCase("S8.6.2_A6.js", Description = "[[Construct]] constructs an object. Invoked via the new operator. Objects that implement this internal method are called constructors")]
        public void ConstructConstructsAnObjectInvokedViaTheNewOperatorObjectsThatImplementThisInternalMethodAreCalledConstructors(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.8")]
        [Category("ECMA 8.6.2")]
        [TestCase("S8.6.2_A7.js", Description = "Objects that implement internal method [[Construct]] are called constructors. Math object is NOT constructor", ExpectedException = typeof(Exception))]
        public void ObjectsThatImplementInternalMethodConstructAreCalledConstructorsMathObjectIsNOTConstructor(string file)
        {
            RunFile(file);
        }
    }
}