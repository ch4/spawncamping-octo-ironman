// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.Types
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class TheReferenceTypeTests : SputnikTestFixture
    {
        public TheReferenceTypeTests()
            : base(@"Conformance\08_Types\8.7_The_Reference_Type")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.4.1")]
        [Category("ECMA 8.7.1")]
        [TestCase("S8.7.1_A1.js", Description = "Delete operator deletes pure property, so it returns true to be applyed to this.property")]
        public void DeleteOperatorDeletesPurePropertySoItReturnsTrueToBeApplyedToThisProperty(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.7.1")]
        [TestCase("S8.7.1_A2.js", Description = "Delete operator can\'t delete reference, so it returns false to be applyed to reference")]
        public void DeleteOperatorCanTDeleteReferenceSoItReturnsFalseToBeApplyedToReference(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.7.2")]
        [TestCase("S8.7.2_A1_T1.js", Description = "GetValue(V) mast fail", ExpectedException = typeof(Exception))]
        [TestCase("S8.7.2_A1_T2.js", Description = "GetValue(V) mast fail", ExpectedException = typeof(Exception))]
        public void GetValueVMastFail(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.7.2")]
        [TestCase("S8.7.2_A2.js", Description = "x++ calls GetValue then PutValue so after applying postfix increment(actually conrete operator type is unimportant) we must have reference to defined value")]
        public void XCallsGetValueThenPutValueSoAfterApplyingPostfixIncrementActuallyConreteOperatorTypeIsUnimportantWeMustHaveReferenceToDefinedValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.7.2")]
        [TestCase("S8.7.2_A3.js", Description = "this.x++ calls GetValue then PutValue so after applying postfix increment(actually conrete operator type is unimportan) we must have reference to defined value")]
        public void ThisXCallsGetValueThenPutValueSoAfterApplyingPostfixIncrementActuallyConreteOperatorTypeIsUnimportanWeMustHaveReferenceToDefinedValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.7")]
        [TestCase("S8.7_A1.js", Description = "Multiple Variables should Referring to a Single Object")]
        public void MultipleVariablesShouldReferringToASingleObject(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.7")]
        [TestCase("S8.7_A2.js", Description = "Reference to Self-Modifying Object remain the integrity")]
        public void ReferenceToSelfModifyingObjectRemainTheIntegrity(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.7")]
        [TestCase("S8.7_A3.js", Description = "Changing the Reference of an Object While Maintaining Integrity")]
        public void ChangingTheReferenceOfAnObjectWhileMaintainingIntegrity(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.7")]
        [TestCase("S8.7_A4.js", Description = "Object Modification Resulting in a New Object for Not a Self-Modified Object leads to loss of integrity")]
        public void ObjectModificationResultingInANewObjectForNotASelfModifiedObjectLeadsToLossOfIntegrity(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.4.1")]
        [Category("ECMA 8.7")]
        [TestCase("S8.7_A5_T1.js", Description = "Delete unary operator can\'t delete object to be referenced")]
        [TestCase("S8.7_A5_T2.js", Description = "Delete unary operator can\'t delete object to be referenced")]
        public void DeleteUnaryOperatorCanTDeleteObjectToBeReferenced(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.7")]
        [TestCase("S8.7_A6.js", Description = "Passing arguments by value differs from by reference and do not change values to be passed")]
        public void PassingArgumentsByValueDiffersFromByReferenceAndDoNotChangeValuesToBePassed(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 8.7")]
        [TestCase("S8.7_A7.js", Description = "Passing arguments by reference do change values of reference to be passed")]
        public void PassingArgumentsByReferenceDoChangeValuesOfReferenceToBePassed(string file)
        {
            RunFile(file);
        }
    }
}