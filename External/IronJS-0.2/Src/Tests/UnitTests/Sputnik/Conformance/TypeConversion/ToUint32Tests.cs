// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.TypeConversion
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class ToUint32Tests : SputnikTestFixture
    {
        public ToUint32Tests()
            : base(@"Conformance\09_Type_Conversion\9.6_ToUint32")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.7.3")]
        [Category("ECMA 9.6")]
        [TestCase("S9.6_A1.js", Description = "If value is NaN, +0, -0, +Infinity, or -Infinity, return +0")]
        public void IfValueIsNaN00InfinityOrInfinityReturn0(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.7.3")]
        [Category("ECMA 9.6")]
        [TestCase("S9.6_A2.1.js", Description = "ToUint32 returns values between 0 and 2^32-1")]
        public void ToUint32ReturnsValuesBetween0And2321(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.7.3")]
        [Category("ECMA 9.6")]
        [TestCase("S9.6_A2.2.js", Description = "Compute result modulo 2^32")]
        public void ComputeResultModulo232(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 9.6")]
        [TestCase("S9.6_A3.1_T1.js", Description = "Operator uses ToNumber")]
        [TestCase("S9.6_A3.1_T2.js", Description = "Operator uses ToNumber")]
        [TestCase("S9.6_A3.1_T3.js", Description = "Operator uses ToNumber")]
        [TestCase("S9.6_A3.1_T4.js", Description = "Operator uses ToNumber")]
        public void OperatorUsesToNumber(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 9.6")]
        [TestCase("S9.6_A3.2_T1.js", Description = "Operator uses floor, abs")]
        public void OperatorUsesFloorAbs(string file)
        {
            RunFile(file);
        }
    }
}