// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.TypeConversion
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class ToIntegerTests : SputnikTestFixture
    {
        public ToIntegerTests()
            : base(@"Conformance\09_Type_Conversion\9.4_ToInteger")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5")]
        [Category("ECMA 9.4")]
        [TestCase("S9.4_A1.js", Description = "If ToNumber(value) is NaN, ToInteger(value) returns +0")]
        public void IfToNumberValueIsNaNToIntegerValueReturns0(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.5")]
        [Category("ECMA 9.4")]
        [TestCase("S9.4_A2.js", Description = "If ToNumber(value) is +0, -0, +Infinity, or -Infinity, return ToNumber(value)")]
        public void IfToNumberValueIs00InfinityOrInfinityReturnToNumberValue(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 15.9")]
        [Category("ECMA 9.4")]
        [TestCase("S9.4_A3_T1.js", Description = "Result of ToInteger(value) conversion is the result of computing sign(ToNumber(value)) * floor(abs(ToNumber(value)))")]
        [TestCase("S9.4_A3_T2.js", Description = "Result of ToInteger(value) conversion is the result of computing sign(ToNumber(value)) * floor(abs(ToNumber(value)))")]
        public void ResultOfToIntegerValueConversionIsTheResultOfComputingSignToNumberValueFloorAbsToNumberValue(string file)
        {
            RunFile(file);
        }
    }
}