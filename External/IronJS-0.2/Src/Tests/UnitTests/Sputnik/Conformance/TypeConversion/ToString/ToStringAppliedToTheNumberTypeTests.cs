// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.TypeConversion.ToString
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class ToStringAppliedToTheNumberTypeTests : SputnikTestFixture
    {
        public ToStringAppliedToTheNumberTypeTests()
            : base(@"Conformance\09_Type_Conversion\9.8_ToString\9.8.1_ToString_Applied_to_the_Number_Type")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 9.8.1")]
        [TestCase("S9.8.1_A1.js", Description = "If m is NaN, return the string \"NaN\"")]
        public void IfMIsNaNReturnTheStringNaN(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 9.8.1")]
        [TestCase("S9.8.1_A10.js", Description = "Return the string consisting of the most significant digit of the decimal representation of s, followed by a decimal point \'.\', followed by the remaining k-1 digits of the decimal representation of s, followed by the lowercase character \'e\', followed by a plus sign \'+\' or minus sign \'-\' according to whether n-1 is positive or negative, followed by the decimal representation of the integer abs(n-1) (with no leading zeros)")]
        public void ReturnTheStringConsistingOfTheMostSignificantDigitOfTheDecimalRepresentationOfSFollowedByADecimalPointFollowedByTheRemainingK1DigitsOfTheDecimalRepresentationOfSFollowedByTheLowercaseCharacterEFollowedByAPlusSignOrMinusSignAccordingToWhetherN1IsPositiveOrNegativeFollowedByTheDecimalRepresentationOfTheIntegerAbsN1WithNoLeadingZeros(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 9.8.1")]
        [TestCase("S9.8.1_A2.js", Description = "If m is +0 or -0, return the string \"0\"")]
        public void IfMIs0Or0ReturnTheString0(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 9.8.1")]
        [TestCase("S9.8.1_A3.js", Description = "If m is less than zero, return the string concatenation of the string \"-\" and ToString(-m)")]
        public void IfMIsLessThanZeroReturnTheStringConcatenationOfTheStringAndToStringM(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 9.8.1")]
        [TestCase("S9.8.1_A4.js", Description = "If m is infinity, return the string \"Infinity\"")]
        public void IfMIsInfinityReturnTheStringInfinity(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 9.8.1")]
        [TestCase("S9.8.1_A6.js", Description = "If 1 <= s < 1e21 or -1e21 s < -1, return the string consisting of the k digits of the decimal representation of s (in order, with no leading zeroes), followed by n-k occurrences of the character \'0\'")]
        public void If1S1e21Or1e21S1ReturnTheStringConsistingOfTheKDigitsOfTheDecimalRepresentationOfSInOrderWithNoLeadingZeroesFollowedByNKOccurrencesOfTheCharacter0(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 9.8.1")]
        [TestCase("S9.8.1_A7.js", Description = "If 1 <= s < 1e21 or -1e21 s < -1 and s has a fractional component, return the string consisting of the most significant n digits of the decimal representation of s, followed by a decimal point \'.\', followed by the remaining k-n digits of the decimal representation of s")]
        public void If1S1e21Or1e21S1AndSHasAFractionalComponentReturnTheStringConsistingOfTheMostSignificantNDigitsOfTheDecimalRepresentationOfSFollowedByADecimalPointFollowedByTheRemainingKNDigitsOfTheDecimalRepresentationOfS(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 9.8.1")]
        [TestCase("S9.8.1_A8.js", Description = "If 1 > s > -1, and -6 < n <= 0, return the string consisting of the character \'0\', followed by a decimal point \'.\', followed by -n occurrences of the character \'0\', followed by the k digits of the decimal representation of s")]
        public void If1S1And6N0ReturnTheStringConsistingOfTheCharacter0FollowedByADecimalPointFollowedByNOccurrencesOfTheCharacter0FollowedByTheKDigitsOfTheDecimalRepresentationOfS(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 9.8.1")]
        [TestCase("S9.8.1_A9_T1.js", Description = "Return the string consisting of the single digit of s, followed by lowercase character \'e\', followed by a plus sign \'+\' or minus sign \'-\' according to whether n-1 is positive or negative, followed by the decimal representation of the integer abs(n-1) (with no leading zeros)")]
        [TestCase("S9.8.1_A9_T2.js", Description = "Return the string consisting of the single digit of s, followed by lowercase character \'e\', followed by a plus sign \'+\' or minus sign \'-\' according to whether n-1 is positive or negative, followed by the decimal representation of the integer abs(n-1) (with no leading zeros)")]
        public void ReturnTheStringConsistingOfTheSingleDigitOfSFollowedByLowercaseCharacterEFollowedByAPlusSignOrMinusSignAccordingToWhetherN1IsPositiveOrNegativeFollowedByTheDecimalRepresentationOfTheIntegerAbsN1WithNoLeadingZeros(string file)
        {
            RunFile(file);
        }
    }
}