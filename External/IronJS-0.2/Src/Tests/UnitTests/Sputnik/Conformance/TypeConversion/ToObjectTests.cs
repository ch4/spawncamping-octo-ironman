// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.TypeConversion
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class ToObjectTests : SputnikTestFixture
    {
        public ToObjectTests()
            : base(@"Conformance\09_Type_Conversion\9.9_ToObject")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 9.9")]
        [TestCase("S9.9_A1.js", Description = "ToObject conversion from undefined value must throw TypeError")]
        public void ToObjectConversionFromUndefinedValueMustThrowTypeError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 9.9")]
        [TestCase("S9.9_A2.js", Description = "ToObject conversion from null value must throw TypeError")]
        public void ToObjectConversionFromNullValueMustThrowTypeError(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 9.9")]
        [TestCase("S9.9_A3.js", Description = "ToObject conversion from Boolean: create a new Boolean object whose [[value]] property is set to the value of the boolean")]
        public void ToObjectConversionFromBooleanCreateANewBooleanObjectWhoseValuePropertyIsSetToTheValueOfTheBoolean(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 9.9")]
        [TestCase("S9.9_A4.js", Description = "ToObject conversion from Number: create a new Number object whose [[value]] property is set to the value of the number")]
        public void ToObjectConversionFromNumberCreateANewNumberObjectWhoseValuePropertyIsSetToTheValueOfTheNumber(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 9.9")]
        [TestCase("S9.9_A5.js", Description = "ToObject conversion from String: create a new String object whose [[value]] property is set to the value of the string")]
        public void ToObjectConversionFromStringCreateANewStringObjectWhoseValuePropertyIsSetToTheValueOfTheString(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 9.9")]
        [TestCase("S9.9_A6.js", Description = "ToObject conversion from Object: The result is the input argument (no conversion)")]
        public void ToObjectConversionFromObjectTheResultIsTheInputArgumentNoConversion(string file)
        {
            RunFile(file);
        }
    }
}