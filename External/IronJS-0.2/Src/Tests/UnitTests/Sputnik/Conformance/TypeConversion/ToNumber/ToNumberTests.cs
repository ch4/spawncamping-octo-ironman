// <auto-generated />
namespace IronJS.Tests.UnitTests.Sputnik.Conformance.TypeConversion.ToNumber
{
    using System;
    using NUnit.Framework;

    [TestFixture]
    public class ToNumberTests : SputnikTestFixture
    {
        public ToNumberTests()
            : base(@"Conformance\09_Type_Conversion\9.3_ToNumber")
        {
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.6.1")]
        [Category("ECMA 15.7.1")]
        [Category("ECMA 9.3")]
        [TestCase("S9.3_A1_T1.js", Description = "Result of number conversion from undefined value is NaN")]
        [TestCase("S9.3_A1_T2.js", Description = "Result of number conversion from undefined value is NaN")]
        public void ResultOfNumberConversionFromUndefinedValueIsNaN(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.6.1")]
        [Category("ECMA 15.7.1")]
        [Category("ECMA 9.3")]
        [TestCase("S9.3_A2_T1.js", Description = "Result of number conversion from null value is +0")]
        [TestCase("S9.3_A2_T2.js", Description = "Result of number conversion from null value is +0")]
        public void ResultOfNumberConversionFromNullValueIs0(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.6.1")]
        [Category("ECMA 15.7.1")]
        [Category("ECMA 9.3")]
        [TestCase("S9.3_A3_T1.js", Description = "Result of number conversion from boolean value is 1 if the argument is true, else is +0")]
        [TestCase("S9.3_A3_T2.js", Description = "Result of number conversion from boolean value is 1 if the argument is true, else is +0")]
        public void ResultOfNumberConversionFromBooleanValueIs1IfTheArgumentIsTrueElseIs0(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.6.1")]
        [Category("ECMA 15.7.1")]
        [Category("ECMA 9.3")]
        [TestCase("S9.3_A4.1_T1.js", Description = "Result of number conversion from number value equals to the input argument (no conversion)")]
        [TestCase("S9.3_A4.1_T2.js", Description = "Result of number conversion from number value equals to the input argument (no conversion)")]
        [TestCase("S9.3_A4.2_T1.js", Description = "Result of number conversion from number value equals to the input argument (no conversion)")]
        [TestCase("S9.3_A4.2_T2.js", Description = "Result of number conversion from number value equals to the input argument (no conversion)")]
        public void ResultOfNumberConversionFromNumberValueEqualsToTheInputArgumentNoConversion(string file)
        {
            RunFile(file);
        }

        [Test]
        [Category("Sputnik Conformance")]
        [Category("ECMA 11.6.1")]
        [Category("ECMA 15.7.1")]
        [Category("ECMA 9.3")]
        [TestCase("S9.3_A5_T1.js", Description = "Result of number conversion from object value is the result  of conversion from primitive value")]
        [TestCase("S9.3_A5_T2.js", Description = "Result of number conversion from object value is the result  of conversion from primitive value")]
        public void ResultOfNumberConversionFromObjectValueIsTheResultOfConversionFromPrimitiveValue(string file)
        {
            RunFile(file);
        }
    }
}